doctype 'html'
html {
  xmlns 'http://www.w3.org/1999/xhtml'
  lang 'EN'
  head {
    meta {
      http-equiv 'Content-Type'
      content 'text/html; charset=utf-8'
    }
    title {
      'Extensible Markup Language (XML) 1.0 (Fifth Edition)'
    }
    style {
      type 'text/css'
      'code           { font-family: monospace; }\n\ndiv.constraint,\ndiv.issue,\ndiv.note,\ndiv.notice     { margin-left: 2em; }\n\nol.enumar      { list-style-type: decimal; }\nol.enumla      { list-style-type: lower-alpha; }\nol.enumlr      { list-style-type: lower-roman; }\nol.enumua      { list-style-type: upper-alpha; }\nol.enumur      { list-style-type: upper-roman; }\n\n\ndiv.exampleInner pre { margin-left: 1em;\n                       margin-top: 0em; margin-bottom: 0em}\ndiv.exampleOuter {border: 4px double gray;\n                  margin: 0em; padding: 0em}\ndiv.exampleInner { background-color: #d5dee3;\n                   border-top-width: 4px;\n                   border-top-style: double;\n                   border-top-color: #d3d3d3;\n                   border-bottom-width: 4px;\n                   border-bottom-style: double;\n                   border-bottom-color: #d3d3d3;\n                   padding: 4px; margin: 0em }\ndiv.exampleWrapper { margin: 4px }\ndiv.exampleHeader { font-weight: bold;\n                    margin: 4px}\n\nem.rfc2119 { text-transform: lowercase;\n             font-variant: small-caps;\n             font-style: normal; }'
    }
    link {
      rel 'stylesheet'
      type 'text/css'
      href 'http://www.w3.org/StyleSheets/TR/W3C-REC.css'
    }
  }
  body {
    div {
      class 'head'
      p {
        a {
          href 'http://www.w3.org/'
          img {
            src 'http://www.w3.org/Icons/w3c_home'
            alt 'W3C'
            height '48'
            width '72'
          }
        }
      }
      h1 {
        a {
          name 'title'
          id 'title'
        }
        'Extensible Markup Language (XML) 1.0 (Fifth Edition)'
      }
      h2 {
        a {
          name 'w3c-doctype'
          id 'w3c-doctype'
        }
        'W3C Recommendation 26 November 2008'
      }
      div {
        id 'notice-20130207'
        style 'border: solid black 1px; padding: 0.5em; background: #FFB;'
        p {
          strong {
            'Note:'
          }
          'On 7 February 2013, this specification was modified in place to replace broken links to RFC4646 and RFC4647.'
        }
      }
      dl {
        dt {
          'This version:'
        }
        dd {
          a {
            href 'http://www.w3.org/TR/2008/REC-xml-20081126/'
            'http://www.w3.org/TR/2008/REC-xml-20081126/'
          }
        }
        dt {
          'Latest version:'
        }
        dd {
          a {
            href 'http://www.w3.org/TR/xml/'
            'http://www.w3.org/TR/xml/'
          }
        }
        dt {
          'Previous versions:'
        }
        dd {
          a {
            href 'http://www.w3.org/TR/2008/PER-xml-20080205/'
            'http://www.w3.org/TR/2008/PER-xml-20080205/'
          }
          br {
          }
          a {
            href 'http://www.w3.org/TR/2006/REC-xml-20060816/'
            'http://www.w3.org/TR/2006/REC-xml-20060816/'
          }
        }
        dt {
          'Editors:'
        }
        dd {
          'Tim Bray, Textuality and Netscape'
          a {
            href 'mailto:tbray@textuality.com'
            '<tbray@textuality.com>'
          }
        }
        dd {
          'Jean Paoli, Microsoft'
          a {
            href 'mailto:jeanpa@microsoft.com'
            '<jeanpa@microsoft.com>'
          }
        }
        dd {
          'C. M. Sperberg-McQueen, W3C'
          a {
            href 'mailto:cmsmcq@w3.org'
            '<cmsmcq@w3.org>'
          }
        }
        dd {
          'Eve Maler, Sun Microsystems, Inc.'
          a {
            href 'mailto:elm@east.sun.com'
            '<eve.maler@east.sun.com>'
          }
        }
        dd {
          'François Yergeau'
        }
      }
      p {
        'Please refer to the'
        a {
          href 'http://www.w3.org/XML/xml-V10-5e-errata'
          strong {
            'errata'
          }
        }
        'for this document, which may\n      include some normative corrections.'
      }
      p {
        'The'
        a {
          href 'http://www.w3.org/XML/xml-V10-4e-errata'
          'previous errata'
        }
        'for this document, are also available.'
      }
      p {
        'See also'
        a {
          href 'http://www.w3.org/2003/03/Translations/byTechnology?technology=xml'
          strong {
            'translations'
          }
        }
        '.'
      }
      p {
        'This document is also available in these non-normative formats:'
        a {
          href 'REC-xml-20081126.xml'
          'XML'
        }
        'and'
        a {
          href 'REC-xml-20081126-review.html'
          'XHTML with color-coded revision indicators'
        }
        '.'
      }
      p {
        class 'copyright'
        a {
          href 'http://www.w3.org/Consortium/Legal/ipr-notice#Copyright'
          'Copyright'
        }
        '© 2008'
        a {
          href 'http://www.w3.org/'
          acronym {
            title 'World Wide Web Consortium'
            'W3C'
          }
        }
        sup {
          '®'
        }
        '('
        a {
          href 'http://www.csail.mit.edu/'
          acronym {
            title 'Massachusetts Institute of Technology'
            'MIT'
          }
        }
        ','
        a {
          href 'http://www.ercim.org/'
          acronym {
            title 'European Research Consortium for Informatics and Mathematics'
            'ERCIM'
          }
        }
        ','
        a {
          href 'http://www.keio.ac.jp/'
          'Keio'
        }
        '), All Rights Reserved. W3C'
        a {
          href 'http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer'
          'liability'
        }
        ','
        a {
          href 'http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks'
          'trademark'
        }
        'and'
        a {
          href 'http://www.w3.org/Consortium/Legal/copyright-documents'
          'document use'
        }
        'rules apply.'
      }
    }
    hr {
    }
    div {
      h2 {
        a {
          name 'abstract'
          id 'abstract'
        }
        'Abstract'
      }
      p {
        'The Extensible Markup Language (XML) is a subset of SGML that is completely\ndescribed in this document. Its goal is to enable generic SGML to be served,\nreceived, and processed on the Web in the way that is now possible with HTML.\nXML has been designed for ease of implementation and for interoperability\nwith both SGML and HTML.'
      }
    }
    div {
      h2 {
        a {
          name 'status'
          id 'status'
        }
        'Status of this Document'
      }
      p {
        em {
          'This section describes the status of this document at the time of its publication.\n\t\t\t\tOther documents may supersede this document. A list of current W3C publications and the\n\t\t\t\tlatest revision of this technical report can be found in the'
          a {
            href 'http://www.w3.org/TR/'
            'W3C technical reports index'
          }
          'at\n\t\t\t\thttp://www.w3.org/TR/.'
        }
      }
      p {
        'This document specifies a syntax created by subsetting an existing, widely\n\t\t\t\tused international text processing standard (Standard Generalized Markup Language,\n\t\t\t\tISO 8879:1986(E) as amended and corrected) for use on the World Wide Web.\n\t\t\t\tIt is a product of the'
        a {
          href 'http://www.w3.org/XML/Core/'
          'XML Core Working Group'
        }
        'as part of the'
        a {
          href 'http://www.w3.org/XML/Activity'
          'XML Activity'
        }
        '.\n\t\t\t\tThe English version of this specification is the only normative version. However,\n\t\t\t\tfor translations of this document, see'
        a {
          href 'http://www.w3.org/2003/03/Translations/byTechnology?technology=xml'
          'http://www.w3.org/2003/03/Translations/byTechnology?technology=xml'
        }
        '.'
      }
      p {
        'This document is a'
        a {
          href 'http://www.w3.org/2005/10/Process-20051014/tr.html#q74'
          'W3C Recommendation'
        }
        '. This fifth edition is'
        em {
          'not'
        }
        'a new version of XML. As a convenience to readers,\n\t\t\t\tit incorporates the changes dictated by the accumulated errata (available at'
        a {
          href 'http://www.w3.org/XML/xml-V10-4e-errata'
          'http://www.w3.org/XML/xml-V10-4e-errata'
        }
        ') to the'
        a {
          href 'http://www.w3.org/TR/2006/REC-xml-20060816/'
          'Fourth\n\t\t\t\tEdition of XML 1.0, dated 16 August 2006'
        }
        '.  In particular, erratum'
        a {
          href 'http://www.w3.org/XML/xml-V10-4e-errata#E09'
          '[E09]'
        }
        'relaxes the restrictions on element and attribute names, thereby providing in XML 1.0 the major end user benefit\n\t\t\t\tcurrently achievable only by using XML\n1.1.  As a consequence, many possible\n documents which were not well-formed according to previous editions of this\n specification are now well-formed, and previously invalid documents\nusing the newly-allowed name characters in, for example, ID\nattributes, are now valid.'
      }
      p {
        'This edition supersedes the previous'
        a {
          href 'http://www.w3.org/TR/2006/REC-xml-20060816/'
          'W3C Recommendation\n\t\t\t\tof 16 August 2006'
        }
        '.'
      }
      p {
        'Please report errors in this document to\nthe public'
        a {
          href 'mailto:xml-editor@w3.org'
          'xml-editor@w3.org'
        }
        'mail list; public'
        a {
          href 'http://lists.w3.org/Archives/Public/xml-editor/'
          'archives'
        }
        'are available. For the convenience of readers,\n\t\t\t\tan'
        a {
          href 'REC-xml-20081126-review.html'
          'XHTML version with color-coded revision indicators'
        }
        'is\n\t\t\t\talso provided; this version highlights each change due to an erratum published in the'
        a {
          href 'http://www.w3.org/XML/xml-V10-4e-errata'
          'errata\nlist'
        }
        'for the previous edition, together with a link to the particular\n\t\t\t\terratum in that list. Most of the\nerrata in the list provide a rationale for the change.  The errata\nlist for this fifth edition is available at'
        a {
          href 'http://www.w3.org/XML/xml-V10-5e-errata'
          'http://www.w3.org/XML/xml-V10-5e-errata'
        }
        '.'
      }
      p {
        'An implementation report is available at'
        a {
          href 'http://www.w3.org/XML/2008/01/xml10-5e-implementation.html'
          'http://www.w3.org/XML/2008/01/xml10-5e-implementation.html'
        }
        '.\n\t\t\t\tA'
        a {
          href 'http://www.w3.org/XML/Test/'
          'Test Suite'
        }
        'is maintained to help assessing conformance to this specification.'
      }
      p {
        'This document has been reviewed by W3C Members, by software developers, and by other W3C groups and interested parties, and is endorsed by the Director as a W3C Recommendation. It is a stable document and may be used as reference material or cited from another document. W3C\'s role in making the Recommendation is to draw attention to the specification and to promote its widespread deployment. This enhances the functionality and interoperability of the Web.'
      }
      p {
        'W3C maintains a'
        a {
          href 'http://www.w3.org/2002/08/xmlcore-IPR-statements'
          rel 'disclosure'
          'public list of\n\t\t\t\tany patent disclosures'
        }
        'made in connection with the deliverables of\n\t\t\t\tthe group; that page also includes instructions for disclosing a patent.\n\t\t\t\tAn individual who has actual knowledge of a patent which the individual\n\t\t\t\tbelieves contains'
        a {
          href 'http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential'
          'Essential\n\t\t\t\tClaim(s)'
        }
        'must disclose the information in accordance with'
        a {
          href 'http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure'
          'section 6 of the W3C Patent Policy'
        }
        '.'
      }
    }
    div {
      class 'toc'
      h2 {
        a {
          name 'contents'
          id 'contents'
        }
        'Table of Contents'
      }
      p {
        class 'toc'
        '1'
        a {
          href '#sec-intro'
          'Introduction'
        }
        br {
        }
        '1.1'
        a {
          href '#sec-origin-goals'
          'Origin and Goals'
        }
        br {
        }
        '1.2'
        a {
          href '#sec-terminology'
          'Terminology'
        }
        br {
        }
        '2'
        a {
          href '#sec-documents'
          'Documents'
        }
        br {
        }
        '2.1'
        a {
          href '#sec-well-formed'
          'Well-Formed XML Documents'
        }
        br {
        }
        '2.2'
        a {
          href '#charsets'
          'Characters'
        }
        br {
        }
        '2.3'
        a {
          href '#sec-common-syn'
          'Common Syntactic Constructs'
        }
        br {
        }
        '2.4'
        a {
          href '#syntax'
          'Character Data and Markup'
        }
        br {
        }
        '2.5'
        a {
          href '#sec-comments'
          'Comments'
        }
        br {
        }
        '2.6'
        a {
          href '#sec-pi'
          'Processing Instructions'
        }
        br {
        }
        '2.7'
        a {
          href '#sec-cdata-sect'
          'CDATA Sections'
        }
        br {
        }
        '2.8'
        a {
          href '#sec-prolog-dtd'
          'Prolog and Document Type Declaration'
        }
        br {
        }
        '2.9'
        a {
          href '#sec-rmd'
          'Standalone Document Declaration'
        }
        br {
        }
        '2.10'
        a {
          href '#sec-white-space'
          'White Space Handling'
        }
        br {
        }
        '2.11'
        a {
          href '#sec-line-ends'
          'End-of-Line Handling'
        }
        br {
        }
        '2.12'
        a {
          href '#sec-lang-tag'
          'Language Identification'
        }
        br {
        }
        '3'
        a {
          href '#sec-logical-struct'
          'Logical Structures'
        }
        br {
        }
        '3.1'
        a {
          href '#sec-starttags'
          'Start-Tags, End-Tags, and Empty-Element Tags'
        }
        br {
        }
        '3.2'
        a {
          href '#elemdecls'
          'Element Type Declarations'
        }
        br {
        }
        '3.2.1'
        a {
          href '#sec-element-content'
          'Element Content'
        }
        br {
        }
        '3.2.2'
        a {
          href '#sec-mixed-content'
          'Mixed Content'
        }
        br {
        }
        '3.3'
        a {
          href '#attdecls'
          'Attribute-List Declarations'
        }
        br {
        }
        '3.3.1'
        a {
          href '#sec-attribute-types'
          'Attribute Types'
        }
        br {
        }
        '3.3.2'
        a {
          href '#sec-attr-defaults'
          'Attribute Defaults'
        }
        br {
        }
        '3.3.3'
        a {
          href '#AVNormalize'
          'Attribute-Value Normalization'
        }
        br {
        }
        '3.4'
        a {
          href '#sec-condition-sect'
          'Conditional Sections'
        }
        br {
        }
        '4'
        a {
          href '#sec-physical-struct'
          'Physical Structures'
        }
        br {
        }
        '4.1'
        a {
          href '#sec-references'
          'Character and Entity References'
        }
        br {
        }
        '4.2'
        a {
          href '#sec-entity-decl'
          'Entity Declarations'
        }
        br {
        }
        '4.2.1'
        a {
          href '#sec-internal-ent'
          'Internal Entities'
        }
        br {
        }
        '4.2.2'
        a {
          href '#sec-external-ent'
          'External Entities'
        }
        br {
        }
        '4.3'
        a {
          href '#TextEntities'
          'Parsed Entities'
        }
        br {
        }
        '4.3.1'
        a {
          href '#sec-TextDecl'
          'The Text Declaration'
        }
        br {
        }
        '4.3.2'
        a {
          href '#wf-entities'
          'Well-Formed Parsed Entities'
        }
        br {
        }
        '4.3.3'
        a {
          href '#charencoding'
          'Character Encoding in Entities'
        }
        br {
        }
        '4.4'
        a {
          href '#entproc'
          'XML Processor Treatment of Entities and References'
        }
        br {
        }
        '4.4.1'
        a {
          href '#not-recognized'
          'Not Recognized'
        }
        br {
        }
        '4.4.2'
        a {
          href '#included'
          'Included'
        }
        br {
        }
        '4.4.3'
        a {
          href '#include-if-valid'
          'Included If Validating'
        }
        br {
        }
        '4.4.4'
        a {
          href '#forbidden'
          'Forbidden'
        }
        br {
        }
        '4.4.5'
        a {
          href '#inliteral'
          'Included in Literal'
        }
        br {
        }
        '4.4.6'
        a {
          href '#notify'
          'Notify'
        }
        br {
        }
        '4.4.7'
        a {
          href '#bypass'
          'Bypassed'
        }
        br {
        }
        '4.4.8'
        a {
          href '#as-PE'
          'Included as PE'
        }
        br {
        }
        '4.4.9'
        a {
          href '#error'
          'Error'
        }
        br {
        }
        '4.5'
        a {
          href '#intern-replacement'
          'Construction of Entity Replacement Text'
        }
        br {
        }
        '4.6'
        a {
          href '#sec-predefined-ent'
          'Predefined Entities'
        }
        br {
        }
        '4.7'
        a {
          href '#Notations'
          'Notation Declarations'
        }
        br {
        }
        '4.8'
        a {
          href '#sec-doc-entity'
          'Document Entity'
        }
        br {
        }
        '5'
        a {
          href '#sec-conformance'
          'Conformance'
        }
        br {
        }
        '5.1'
        a {
          href '#proc-types'
          'Validating and Non-Validating Processors'
        }
        br {
        }
        '5.2'
        a {
          href '#safe-behavior'
          'Using XML Processors'
        }
        br {
        }
        '6'
        a {
          href '#sec-notation'
          'Notation'
        }
        br {
        }
      }
      h3 {
        a {
          name 'appendices'
          id 'appendices'
        }
        'Appendices'
      }
      p {
        class 'toc'
        'A'
        a {
          href '#sec-bibliography'
          'References'
        }
        br {
        }
        'A.1'
        a {
          href '#sec-existing-stds'
          'Normative References'
        }
        br {
        }
        'A.2'
        a {
          href '#null'
          'Other References'
        }
        br {
        }
        'B'
        a {
          href '#CharClasses'
          'Character Classes'
        }
        br {
        }
        'C'
        a {
          href '#sec-xml-and-sgml'
          'XML and SGML'
        }
        '(Non-Normative)'
        br {
        }
        'D'
        a {
          href '#sec-entexpand'
          'Expansion of Entity and Character References'
        }
        '(Non-Normative)'
        br {
        }
        'E'
        a {
          href '#determinism'
          'Deterministic Content Models'
        }
        '(Non-Normative)'
        br {
        }
        'F'
        a {
          href '#sec-guessing'
          'Autodetection of Character Encodings'
        }
        '(Non-Normative)'
        br {
        }
        'F.1'
        a {
          href '#sec-guessing-no-ext-info'
          'Detection Without External Encoding Information'
        }
        br {
        }
        'F.2'
        a {
          href '#sec-guessing-with-ext-info'
          'Priorities in the Presence of External Encoding Information'
        }
        br {
        }
        'G'
        a {
          href '#sec-xml-wg'
          'W3C XML Working Group'
        }
        '(Non-Normative)'
        br {
        }
        'H'
        a {
          href '#sec-core-wg'
          'W3C XML Core Working Group'
        }
        '(Non-Normative)'
        br {
        }
        'I'
        a {
          href '#prod-notes'
          'Production Notes'
        }
        '(Non-Normative)'
        br {
        }
        'J'
        a {
          href '#sec-suggested-names'
          'Suggestions for XML Names'
        }
        '(Non-Normative)'
        br {
        }
      }
    }
    hr {
    }
    div {
      class 'body'
      div {
        class 'div1'
        h2 {
          a {
            name 'sec-intro'
            id 'sec-intro'
          }
          '1 Introduction'
        }
        p {
          'Extensible Markup Language, abbreviated XML, describes a class of data\nobjects called'
          a {
            title 'XML Document'
            href '#dt-xml-doc'
            'XML documents'
          }
          'and partially\ndescribes the behavior of computer programs which process them. XML is an\napplication profile or restricted form of SGML, the Standard Generalized Markup\nLanguage'
          a {
            href '#ISO8879'
            '[ISO 8879]'
          }
          '. By construction, XML documents are conforming\nSGML documents.'
        }
        p {
          'XML documents are made up of storage units called'
          a {
            title 'Entity'
            href '#dt-entity'
            'entities'
          }
          ',\nwhich contain either parsed or unparsed data. Parsed data is made up of'
          a {
            title 'Character'
            href '#dt-character'
            'characters'
          }
          ', some of which form'
          a {
            title 'Character Data'
            href '#dt-chardata'
            'character\ndata'
          }
          ', and some of which form'
          a {
            title 'Markup'
            href '#dt-markup'
            'markup'
          }
          '.\nMarkup encodes a description of the document\'s storage layout and logical\nstructure. XML provides a mechanism to impose constraints on the storage layout\nand logical structure.'
        }
        p {
          '['
          a {
            name 'dt-xml-proc'
            id 'dt-xml-proc'
            title 'XML Processor'
            'Definition'
          }
          ': A software module called\nan'
          b {
            'XML processor'
          }
          'is used to read XML documents and provide access\nto their content and structure.]\n\t\t\t\t['
          a {
            name 'dt-app'
            id 'dt-app'
            title 'Application'
            'Definition'
          }
          ': It\nis assumed that an XML processor is doing its work on behalf of another module,\ncalled the'
          b {
            'application'
          }
          '.] This specification describes\nthe required behavior of an XML processor in terms of how it must read XML\ndata and the information it must provide to the application.'
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-origin-goals'
              id 'sec-origin-goals'
            }
            '1.1 Origin and Goals'
          }
          p {
            'XML was developed by an XML Working Group (originally known as the SGML\nEditorial Review Board) formed under the auspices of the World Wide Web Consortium\n(W3C) in 1996. It was chaired by Jon Bosak of Sun Microsystems with the active\nparticipation of an XML Special Interest Group (previously known as the SGML\nWorking Group) also organized by the W3C. The membership of the XML Working\nGroup is given in an appendix. Dan Connolly served as the Working Group\'s contact with\nthe W3C.'
          }
          p {
            'The design goals for XML are:'
          }
          ol {
            class 'enumar'
            li {
              p {
                'XML shall be straightforwardly usable over the Internet.'
              }
            }
            li {
              p {
                'XML shall support a wide variety of applications.'
              }
            }
            li {
              p {
                'XML shall be compatible with SGML.'
              }
            }
            li {
              p {
                'It shall be easy to write programs which process XML documents.'
              }
            }
            li {
              p {
                'The number of optional features in XML is to be kept to the absolute\nminimum, ideally zero.'
              }
            }
            li {
              p {
                'XML documents should be human-legible and reasonably clear.'
              }
            }
            li {
              p {
                'The XML design should be prepared quickly.'
              }
            }
            li {
              p {
                'The design of XML shall be formal and concise.'
              }
            }
            li {
              p {
                'XML documents shall be easy to create.'
              }
            }
            li {
              p {
                'Terseness in XML markup is of minimal importance.'
              }
            }
          }
          p {
            'This specification, together with associated standards (Unicode'
            a {
              href '#Unicode'
              '[Unicode]'
            }
            'and ISO/IEC 10646'
            a {
              href '#ISO10646'
              '[ISO/IEC 10646]'
            }
            'for characters, Internet'
            span {
              'BCP 47'
            }
            a {
              href '#RFC1766'
              '[IETF BCP 47]'
            }
            span {
              'and the Language Subtag Registry'
              a {
                href '#IANA-LANGCODES'
                '[IANA-LANGCODES]'
              }
            }
            'for language\n\t\t\t\t\tidentification tags), provides\nall the information necessary to understand XML Version 1.0 and\nconstruct computer programs to process it.'
          }
          p {
            'This version of the XML specification may be distributed freely, as long as\nall text and legal notices remain intact.'
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-terminology'
              id 'sec-terminology'
            }
            '1.2 Terminology'
          }
          p {
            'The terminology used to describe XML documents is defined in the body of\nthis specification. The key words'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            ','
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST NOT'
            }
            ','
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'REQUIRED'
            }
            ','
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'SHALL'
            }
            ','
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'SHALL NOT'
            }
            ','
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'SHOULD'
            }
            ','
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'SHOULD NOT'
            }
            ','
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'RECOMMENDED'
            }
            ','
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MAY'
            }
            ', and'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'OPTIONAL'
            }
            ', when'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'EMPHASIZED'
            }
            ',\nare to be interpreted as described in'
            a {
              href '#rfc2119'
              '[IETF RFC 2119]'
            }
            '. In addition, the terms defined\nin the following list are used in building\nthose definitions and in describing the actions of an XML processor:'
          }
          dl {
            dt {
              class 'label'
              'error'
            }
            dd {
              p {
                '['
                a {
                  name 'dt-error'
                  id 'dt-error'
                  title 'Error'
                  'Definition'
                }
                ': A violation of the rules of this specification;\nresults are undefined. Unless otherwise specified, failure to observe a prescription of this specification indicated by one of the keywords'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                ','
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'REQUIRED'
                }
                ','
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST NOT'
                }
                ','
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'SHALL'
                }
                'and'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'SHALL NOT'
                }
                'is an error.  Conforming software'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MAY'
                }
                'detect and report an error\nand'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MAY'
                }
                'recover from it.]'
              }
            }
            dt {
              class 'label'
              'fatal error'
            }
            dd {
              p {
                '['
                a {
                  name 'dt-fatal'
                  id 'dt-fatal'
                  title 'Fatal Error'
                  'Definition'
                }
                ': An error which a conforming'
                a {
                  title 'XML Processor'
                  href '#dt-xml-proc'
                  'XML processor'
                }
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'detect and report to the application.\nAfter encountering a fatal error, the processor'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MAY'
                }
                'continue processing the\ndata to search for further errors and'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MAY'
                }
                'report such errors to the application.\nIn order to support correction of errors, the processor'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MAY'
                }
                'make unprocessed\ndata from the document (with intermingled character data and markup) available\nto the application. Once a fatal error is detected, however, the processor'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST NOT'
                }
                'continue normal processing (i.e., it'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST NOT'
                }
                'continue to pass character\ndata and information about the document\'s logical structure to the application\nin the normal way).]'
              }
            }
            dt {
              class 'label'
              'at user option'
            }
            dd {
              p {
                '['
                a {
                  name 'dt-atuseroption'
                  id 'dt-atuseroption'
                  title 'At user option'
                  'Definition'
                }
                ': Conforming software'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MAY'
                }
                'or'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                '(depending on the modal verb in the sentence) behave as described;\nif it does, it'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'provide users a means to enable or disable the behavior\ndescribed.]'
              }
            }
            dt {
              class 'label'
              'validity constraint'
            }
            dd {
              p {
                '['
                a {
                  name 'dt-vc'
                  id 'dt-vc'
                  title 'Validity constraint'
                  'Definition'
                }
                ': A rule which applies to\nall'
                a {
                  title 'Validity'
                  href '#dt-valid'
                  'valid'
                }
                'XML documents. Violations of validity\nconstraints are errors; they'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                ', at user option, be reported by'
                a {
                  title 'Validating Processor'
                  href '#dt-validating'
                  'validating XML processors'
                }
                '.]'
              }
            }
            dt {
              class 'label'
              'well-formedness constraint'
            }
            dd {
              p {
                '['
                a {
                  name 'dt-wfc'
                  id 'dt-wfc'
                  title 'Well-formedness constraint'
                  'Definition'
                }
                ': A rule which applies\nto all'
                a {
                  title 'Well-Formed'
                  href '#dt-wellformed'
                  'well-formed'
                }
                'XML documents. Violations\nof well-formedness constraints are'
                a {
                  title 'Fatal Error'
                  href '#dt-fatal'
                  'fatal errors'
                }
                '.]'
              }
            }
            dt {
              class 'label'
              'match'
            }
            dd {
              p {
                '['
                a {
                  name 'dt-match'
                  id 'dt-match'
                  title 'match'
                  'Definition'
                }
                ': (Of strings or names:) Two strings\nor names being compared are identical. Characters with multiple possible\nrepresentations in ISO/IEC 10646 (e.g. characters with both precomposed and\nbase+diacritic forms) match only if they have the same representation in both\nstrings. No\ncase folding is performed. (Of strings and rules in the grammar:) A string\nmatches a grammatical production if it belongs to the language generated by\nthat production. (Of content and content models:) An element matches its declaration\nwhen it conforms in the fashion described in the constraint'
                b {
                  '[VC:'
                  a {
                    href '#elementvalid'
                    'Element Valid'
                  }
                  ']'
                }
                '.]'
              }
            }
            dt {
              class 'label'
              'for compatibility'
            }
            dd {
              p {
                '['
                a {
                  name 'dt-compat'
                  id 'dt-compat'
                  title 'For Compatibility'
                  'Definition'
                }
                ': Marks\na sentence describing a feature of XML included solely to ensure\nthat XML remains compatible with SGML.]'
              }
            }
            dt {
              class 'label'
              'for interoperability'
            }
            dd {
              p {
                '['
                a {
                  name 'dt-interop'
                  id 'dt-interop'
                  title 'For interoperability'
                  'Definition'
                }
                ': Marks\na sentence describing a non-binding recommendation included to increase\nthe chances that XML documents can be processed by the existing installed\nbase of SGML processors which predate the WebSGML Adaptations Annex to ISO 8879.]'
              }
            }
          }
          p {
          }
        }
      }
      div {
        class 'div1'
        h2 {
          a {
            name 'sec-documents'
            id 'sec-documents'
          }
          '2 Documents'
        }
        p {
          '['
          a {
            name 'dt-xml-doc'
            id 'dt-xml-doc'
            title 'XML Document'
            'Definition'
          }
          ':  A data object is an'
          b {
            'XML\ndocument'
          }
          'if it is'
          a {
            title 'Well-Formed'
            href '#dt-wellformed'
            'well-formed'
          }
          ',\nas defined in this specification. In addition, the XML document is'
          a {
            title 'Validity'
            href '#dt-valid'
            'valid'
          }
          'if it meets certain further constraints.]'
        }
        p {
          'Each XML document has both a logical and a physical structure. Physically,\nthe document is composed of units called'
          a {
            title 'Entity'
            href '#dt-entity'
            'entities'
          }
          '.\nAn entity may'
          a {
            title 'Entity Reference'
            href '#dt-entref'
            'refer'
          }
          'to other entities to\ncause their inclusion in the document. A document begins in a "root"\nor'
          a {
            title 'Document Entity'
            href '#dt-docent'
            'document entity'
          }
          '. Logically, the document\nis composed of declarations, elements, comments, character references, and\nprocessing instructions, all of which are indicated in the document by explicit\nmarkup. The logical and physical structures'
          em {
            class 'rfc2119'
            title 'Keyword in RFC 2119 context'
            'MUST'
          }
          'nest properly, as described\nin'
          a {
            href '#wf-entities'
            b {
              '4.3.2 Well-Formed Parsed Entities'
            }
          }
          '.'
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-well-formed'
              id 'sec-well-formed'
            }
            '2.1 Well-Formed XML Documents'
          }
          p {
            '['
            a {
              name 'dt-wellformed'
              id 'dt-wellformed'
              title 'Well-Formed'
              'Definition'
            }
            ':  A textual object is a'
            b {
              'well-formed'
            }
            'XML document if:]'
          }
          ol {
            class 'enumar'
            li {
              p {
                'Taken as a whole, it matches the production labeled'
                a {
                  href '#NT-document'
                  'document'
                }
                '.'
              }
            }
            li {
              p {
                'It meets all the well-formedness constraints given in this specification.'
              }
            }
            li {
              p {
                'Each of the'
                a {
                  title 'Text Entity'
                  href '#dt-parsedent'
                  'parsed entities'
                }
                'which is referenced directly or indirectly within the document is'
                a {
                  title 'Well-Formed'
                  href '#dt-wellformed'
                  'well-formed'
                }
                '.'
              }
            }
          }
          h5 {
            a {
              name 'document'
              id 'document'
            }
            'Document'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-document'
                    id 'NT-document'
                  }
                  '[1]'
                }
                td {
                  code {
                    'document'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-prolog'
                      'prolog'
                    }
                    a {
                      href '#NT-element'
                      'element'
                    }
                    a {
                      href '#NT-Misc'
                      'Misc'
                    }
                    '*'
                  }
                }
              }
            }
          }
          p {
            'Matching the'
            a {
              href '#NT-document'
              'document'
            }
            'production implies that:'
          }
          ol {
            class 'enumar'
            li {
              p {
                'It contains one or more'
                a {
                  title 'Element'
                  href '#dt-element'
                  'elements'
                }
                '.'
              }
            }
            li {
              p {
                '['
                a {
                  name 'dt-root'
                  id 'dt-root'
                  title 'Root Element'
                  'Definition'
                }
                ': There is exactly one element,\ncalled the'
                b {
                  'root'
                }
                ', or document element, no part of which appears\nin the'
                a {
                  title 'Content'
                  href '#dt-content'
                  'content'
                }
                'of any other element.] For\nall other elements, if the'
                a {
                  title 'Start-Tag'
                  href '#dt-stag'
                  'start-tag'
                }
                'is in\nthe content of another element, the'
                a {
                  title 'End Tag'
                  href '#dt-etag'
                  'end-tag'
                }
                'is in the content of the same element. More simply stated, the elements,\ndelimited by start- and end-tags, nest properly within each other.'
              }
            }
          }
          p {
            '['
            a {
              name 'dt-parentchild'
              id 'dt-parentchild'
              title 'Parent/Child'
              'Definition'
            }
            ': As a consequence of this,\nfor each non-root element'
            code {
              'C'
            }
            'in the document, there is one other element'
            code {
              'P'
            }
            'in the document such that'
            code {
              'C'
            }
            'is in the content of'
            code {
              'P'
            }
            ', but\nis not in the content of any other element that is in the content of'
            code {
              'P'
            }
            '.'
            code {
              'P'
            }
            'is referred to as the'
            b {
              'parent'
            }
            'of'
            code {
              'C'
            }
            ', and'
            code {
              'C'
            }
            'as\na'
            b {
              'child'
            }
            'of'
            code {
              'P'
            }
            '.]'
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'charsets'
              id 'charsets'
            }
            '2.2 Characters'
          }
          p {
            '['
            a {
              name 'dt-text'
              id 'dt-text'
              title 'Text'
              'Definition'
            }
            ': A parsed entity contains'
            b {
              'text'
            }
            ',\na sequence of'
            a {
              title 'Character'
              href '#dt-character'
              'characters'
            }
            ', which may\nrepresent markup or character data.]\n\t\t\t\t\t['
            a {
              name 'dt-character'
              id 'dt-character'
              title 'Character'
              'Definition'
            }
            ': A'
            b {
              'character'
            }
            'is an atomic unit of text as specified by ISO/IEC 10646:2000'
            a {
              href '#ISO10646'
              '[ISO/IEC 10646]'
            }
            '. Legal characters are tab, carriage\nreturn, line feed, and the legal characters\nof Unicode and ISO/IEC 10646. The\nversions of these standards cited in'
            a {
              href '#sec-existing-stds'
              b {
                'A.1 Normative References'
              }
            }
            'were\ncurrent at the time this document was prepared. New characters may be added\nto these standards by amendments or new editions. Consequently, XML processors'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'accept any character in the range specified for'
            a {
              href '#NT-Char'
              'Char'
            }
            '.\n]'
          }
          h5 {
            a {
              name 'char32'
              id 'char32'
            }
            'Character Range'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-Char'
                    id 'NT-Char'
                  }
                  '[2]'
                }
                td {
                  code {
                    'Char'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]'
                  }
                }
                td {
                  i {
                    '/* any Unicode character, excluding the surrogate blocks, FFFE, and FFFF. */'
                  }
                }
              }
            }
          }
          p {
            'The mechanism for encoding character code points into bit patterns may\nvary from entity to entity. All XML processors'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'accept the UTF-8 and UTF-16\nencodings of Unicode'
            span {
              a {
                href '#Unicode'
                '[Unicode]'
              }
            }
            ';\nthe mechanisms for signaling which of the two is in use,\nor for bringing other encodings into play, are discussed later, in'
            a {
              href '#charencoding'
              b {
                '4.3.3 Character Encoding in Entities'
              }
            }
            '.'
          }
          div {
            class 'note'
            p {
              class 'prefix'
              b {
                'Note:'
              }
            }
            p {
              'Document authors are encouraged to avoid\n"compatibility characters", as defined\nin section'
              span {
                '2.3'
              }
              'of'
              a {
                href '#Unicode'
                '[Unicode]'
              }
              '. The characters defined in the following ranges are also\ndiscouraged. They are either control characters or permanently undefined Unicode\ncharacters:'
            }
            div {
              class 'exampleInner'
              pre {
                '[#x7F-#x84], [#x86-#x9F], [#xFDD0-#xFD'
                span {
                  'E'
                }
                'F],\n[#x1FFFE-#x1FFFF], [#x2FFFE-#x2FFFF], [#x3FFFE-#x3FFFF],\n[#x4FFFE-#x4FFFF], [#x5FFFE-#x5FFFF], [#x6FFFE-#x6FFFF],\n[#x7FFFE-#x7FFFF], [#x8FFFE-#x8FFFF], [#x9FFFE-#x9FFFF],\n[#xAFFFE-#xAFFFF], [#xBFFFE-#xBFFFF], [#xCFFFE-#xCFFFF],\n[#xDFFFE-#xDFFFF], [#xEFFFE-#xEFFFF], [#xFFFFE-#xFFFFF],\n[#x10FFFE-#x10FFFF].'
              }
            }
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-common-syn'
              id 'sec-common-syn'
            }
            '2.3 Common Syntactic Constructs'
          }
          p {
            'This section defines some symbols used widely in the grammar.'
          }
          p {
            a {
              href '#NT-S'
              'S'
            }
            '(white space) consists of one or more space (#x20)\ncharacters, carriage returns, line feeds, or tabs.'
          }
          h5 {
            a {
              name 'white'
              id 'white'
            }
            'White Space'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-S'
                    id 'NT-S'
                  }
                  '[3]'
                }
                td {
                  code {
                    'S'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '(#x20 | #x9 | #xD | #xA)+'
                  }
                }
              }
            }
          }
          div {
            class 'note'
            p {
              class 'prefix'
              b {
                'Note:'
              }
            }
            p {
              'The presence of #xD in the above production is\n\tmaintained purely for backward compatibility with the'
              a {
                href 'http://www.w3.org/TR/1998/REC-xml-19980210'
                'First Edition'
              }
              '.\n\tAs explained in'
              a {
                href '#sec-line-ends'
                b {
                  '2.11 End-of-Line Handling'
                }
              }
              ',\n\tall #xD characters literally present in an XML document\n\tare either removed or replaced by #xA characters before\n\tany other processing is done. The only way to get a #xD character to match this production is to\n  use a character reference in an entity value literal.'
            }
          }
          p {
            'An'
            a {
              href '#NT-Nmtoken'
              'Nmtoken'
            }
            '(name token) is any mixture of name\ncharacters.'
          }
          p {
            '['
            a {
              name 'dt-name'
              id 'dt-name'
              title 'Name'
              'Definition'
            }
            ': A'
            a {
              href '#NT-Name'
              'Name'
            }
            'is an'
            a {
              href '#NT-Nmtoken'
              'Nmtoken'
            }
            'with a restricted set of initial characters.]  Disallowed initial characters for'
            a {
              href '#NT-Name'
              'Names'
            }
            'include digits, diacritics, the full stop and the hyphen.'
          }
          p {
            'Names beginning with the string "'
            code {
              'xml'
            }
            '",\nor with any string which would match'
            code {
              '((\'X\'|\'x\') (\'M\'|\'m\') (\'L\'|\'l\'))'
            }
            ',\nare reserved for standardization in this or future versions of this specification.'
          }
          div {
            class 'note'
            p {
              class 'prefix'
              b {
                'Note:'
              }
            }
            p {
              'The\nNamespaces in XML Recommendation'
              a {
                href '#xml-names'
                '[XML Names]'
              }
              'assigns a meaning\nto names containing colon characters. Therefore, authors should not use the\ncolon in XML names except for namespace purposes, but XML processors must\naccept the colon as a name character.'
            }
          }
          p {
            'The first character of a'
            a {
              href '#NT-Name'
              'Name'
            }
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be a'
            a {
              href '#NT-NameStartChar'
              'NameStartChar'
            }
            ', and any\n\t\t\t\t\tother characters'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be'
            a {
              href '#NT-NameChar'
              'NameChars'
            }
            '; this mechanism is used to\n\t\t\t\t\tprevent names from beginning with European (ASCII) digits or with\n\t\t\t\t\tbasic combining characters. Almost all characters are permitted in\n\t\t\t\t\tnames, except those which either are or reasonably could be used as\n\t\t\t\t\tdelimiters. The intention is to be inclusive rather than exclusive,\n\t\t\t\t\tso that writing systems not yet encoded in Unicode can be used in\n\t\t\t\t\tXML names. See'
            a {
              href '#sec-suggested-names'
              b {
                'J Suggestions for XML Names'
              }
            }
            'for suggestions on the creation of\n\t\t\t\t\tnames.'
          }
          p {
            'Document authors are encouraged to use names which are\n\t\t\t\t\tmeaningful words or combinations of words in natural languages, and\n\t\t\t\t\tto avoid symbolic or white space characters in names. Note that\n\t\t\t\t\tCOLON, HYPHEN-MINUS, FULL STOP (period), LOW LINE (underscore), and\n\t\t\t\t\tMIDDLE DOT are explicitly permitted.'
          }
          p {
            'The ASCII symbols and punctuation marks, along with a fairly\n\t\t\t\t\tlarge group of Unicode symbol characters, are excluded from names\n\t\t\t\t\tbecause they are more useful as delimiters in contexts where XML\n\t\t\t\t\tnames are used outside XML documents; providing this group gives\n\t\t\t\t\tthose contexts hard guarantees about what'
            em {
              'cannot'
            }
            'be part of\n\t\t\t\t\tan XML name. The character #x037E, GREEK QUESTION MARK, is excluded\n\t\t\t\t\tbecause when normalized it becomes a semicolon, which could change\n\t\t\t\t\tthe meaning of entity references.'
          }
          h5 {
            a {
              name 'd0e804'
              id 'd0e804'
            }
            'Names and Tokens'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-NameStartChar'
                    id 'NT-NameStartChar'
                  }
                  '[4]'
                }
                td {
                  code {
                    'NameStartChar'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]'
                  }
                }
              }
            }
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-NameChar'
                    id 'NT-NameChar'
                  }
                  '[4a]'
                }
                td {
                  code {
                    'NameChar'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-NameStartChar'
                      'NameStartChar'
                    }
                    '| "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]'
                  }
                }
              }
            }
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-Name'
                    id 'NT-Name'
                  }
                  '[5]'
                }
                td {
                  code {
                    'Name'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-NameStartChar'
                      'NameStartChar'
                    }
                    '('
                    a {
                      href '#NT-NameChar'
                      'NameChar'
                    }
                    ')*'
                  }
                }
              }
            }
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-Names'
                    id 'NT-Names'
                  }
                  '[6]'
                }
                td {
                  code {
                    'Names'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-Name'
                      'Name'
                    }
                    '(#x20'
                    a {
                      href '#NT-Name'
                      'Name'
                    }
                    ')*'
                  }
                }
              }
            }
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-Nmtoken'
                    id 'NT-Nmtoken'
                  }
                  '[7]'
                }
                td {
                  code {
                    'Nmtoken'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '('
                    a {
                      href '#NT-NameChar'
                      'NameChar'
                    }
                    ')+'
                  }
                }
              }
            }
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-Nmtokens'
                    id 'NT-Nmtokens'
                  }
                  '[8]'
                }
                td {
                  code {
                    'Nmtokens'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-Nmtoken'
                      'Nmtoken'
                    }
                    '(#x20'
                    a {
                      href '#NT-Nmtoken'
                      'Nmtoken'
                    }
                    ')*'
                  }
                }
              }
            }
          }
          div {
            class 'note'
            p {
              class 'prefix'
              b {
                'Note:'
              }
            }
            p {
              'The'
              a {
                href '#NT-Names'
                'Names'
              }
              'and'
              a {
                href '#NT-Nmtokens'
                'Nmtokens'
              }
              'productions are used to define the validity\nof tokenized attribute values after normalization (see'
              a {
                href '#sec-attribute-types'
                b {
                  '3.3.1 Attribute Types'
                }
              }
              ').'
            }
          }
          p {
            'Literal data is any quoted string not containing the quotation mark used\nas a delimiter for that string. Literals are used for specifying the content\nof internal entities ('
            a {
              href '#NT-EntityValue'
              'EntityValue'
            }
            '), the values\nof attributes ('
            a {
              href '#NT-AttValue'
              'AttValue'
            }
            '), and external identifiers\n('
            a {
              href '#NT-SystemLiteral'
              'SystemLiteral'
            }
            '). Note that a'
            a {
              href '#NT-SystemLiteral'
              'SystemLiteral'
            }
            'can be parsed without scanning for markup.'
          }
          h5 {
            a {
              name 'd0e888'
              id 'd0e888'
            }
            'Literals'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-EntityValue'
                    id 'NT-EntityValue'
                  }
                  '[9]'
                }
                td {
                  code {
                    'EntityValue'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'"\' ([^%&"] |'
                    a {
                      href '#NT-PEReference'
                      'PEReference'
                    }
                    '|'
                    a {
                      href '#NT-Reference'
                      'Reference'
                    }
                    ')* \'"\''
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                }
                td {
                }
                td {
                }
                td {
                  code {
                    '|  "\'" ([^%&\'] |'
                    a {
                      href '#NT-PEReference'
                      'PEReference'
                    }
                    '|'
                    a {
                      href '#NT-Reference'
                      'Reference'
                    }
                    ')* "\'"'
                  }
                }
              }
            }
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-AttValue'
                    id 'NT-AttValue'
                  }
                  '[10]'
                }
                td {
                  code {
                    'AttValue'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'"\' ([^<&"] |'
                    a {
                      href '#NT-Reference'
                      'Reference'
                    }
                    ')*\n\'"\''
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                }
                td {
                }
                td {
                }
                td {
                  code {
                    '|  "\'" ([^<&\'] |'
                    a {
                      href '#NT-Reference'
                      'Reference'
                    }
                    ')*\n"\'"'
                  }
                }
              }
            }
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-SystemLiteral'
                    id 'NT-SystemLiteral'
                  }
                  '[11]'
                }
                td {
                  code {
                    'SystemLiteral'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '(\'"\' [^"]* \'"\') | ("\'" [^\']* "\'")'
                  }
                }
              }
            }
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-PubidLiteral'
                    id 'NT-PubidLiteral'
                  }
                  '[12]'
                }
                td {
                  code {
                    'PubidLiteral'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'"\''
                    a {
                      href '#NT-PubidChar'
                      'PubidChar'
                    }
                    '* \'"\'\n| "\'" ('
                    a {
                      href '#NT-PubidChar'
                      'PubidChar'
                    }
                    '- "\'")* "\'"'
                  }
                }
              }
            }
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-PubidChar'
                    id 'NT-PubidChar'
                  }
                  '[13]'
                }
                td {
                  code {
                    'PubidChar'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '#x20 | #xD | #xA | [a-zA-Z0-9] | [-\'()+,./:=?;!*#@$_%]'
                  }
                }
              }
            }
          }
          div {
            class 'note'
            p {
              class 'prefix'
              b {
                'Note:'
              }
            }
            p {
              'Although\nthe'
              a {
                href '#NT-EntityValue'
                'EntityValue'
              }
              'production allows the definition\nof a general entity consisting of a single explicit'
              code {
                '<'
              }
              'in the literal\n(e.g.,'
              code {
                '<!ENTITY mylt "<">'
              }
              '), it is strongly advised to avoid\nthis practice since any reference to that entity will cause a well-formedness\nerror.'
            }
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'syntax'
              id 'syntax'
            }
            '2.4 Character Data and Markup'
          }
          p {
            a {
              title 'Text'
              href '#dt-text'
              'Text'
            }
            'consists of intermingled'
            a {
              title 'Character Data'
              href '#dt-chardata'
              'character data'
            }
            'and markup. ['
            a {
              name 'dt-markup'
              id 'dt-markup'
              title 'Markup'
              'Definition'
            }
            ':'
            b {
              'Markup'
            }
            'takes the form of'
            a {
              title 'Start-Tag'
              href '#dt-stag'
              'start-tags'
            }
            ','
            a {
              title 'End Tag'
              href '#dt-etag'
              'end-tags'
            }
            ','
            a {
              title 'Empty'
              href '#dt-empty'
              'empty-element tags'
            }
            ','
            a {
              title 'Entity Reference'
              href '#dt-entref'
              'entity references'
            }
            ','
            a {
              title 'Character Reference'
              href '#dt-charref'
              'character\nreferences'
            }
            ','
            a {
              title 'Comment'
              href '#dt-comment'
              'comments'
            }
            ','
            a {
              title 'CDATA Section'
              href '#dt-cdsection'
              'CDATA section'
            }
            'delimiters,'
            a {
              title 'Document Type Declaration'
              href '#dt-doctype'
              'document\ntype declarations'
            }
            ','
            a {
              title 'Processing instruction'
              href '#dt-pi'
              'processing instructions'
            }
            ','
            a {
              href '#NT-XMLDecl'
              'XML declarations'
            }
            ','
            a {
              href '#NT-TextDecl'
              'text declarations'
            }
            ',\nand any white space that is at the top level of the document entity (that\nis, outside the document element and not inside any other markup).]'
          }
          p {
            '['
            a {
              name 'dt-chardata'
              id 'dt-chardata'
              title 'Character Data'
              'Definition'
            }
            ': All text that is not markup\nconstitutes the'
            b {
              'character data'
            }
            'of the document.]'
          }
          p {
            'The ampersand character (&) and the left angle bracket (<)'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST NOT'
            }
            'appear\nin their literal form, except when used as markup delimiters, or\nwithin a'
            a {
              title 'Comment'
              href '#dt-comment'
              'comment'
            }
            ', a'
            a {
              title 'Processing instruction'
              href '#dt-pi'
              'processing\ninstruction'
            }
            ', or a'
            a {
              title 'CDATA Section'
              href '#dt-cdsection'
              'CDATA section'
            }
            '.\n\nIf they are needed elsewhere, they'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be'
            a {
              title 'escape'
              href '#dt-escape'
              'escaped'
            }
            'using either'
            a {
              title 'Character Reference'
              href '#dt-charref'
              'numeric character references'
            }
            'or the strings "'
            code {
              '&amp;'
            }
            '" and "'
            code {
              '&lt;'
            }
            '"\nrespectively. The right angle bracket (>) may be represented using the string "'
            code {
              '&gt;'
            }
            '",\nand'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            ','
            a {
              title 'For Compatibility'
              href '#dt-compat'
              'for compatibility'
            }
            ', be escaped\nusing either "'
            code {
              '&gt;'
            }
            '" or a character reference when it\nappears in the string "'
            code {
              ']]>'
            }
            '" in content, when\nthat string is not marking the end of a'
            a {
              title 'CDATA Section'
              href '#dt-cdsection'
              'CDATA\nsection'
            }
            '.'
          }
          p {
            'In the content of elements, character data is any string of characters\nwhich does not contain the start-delimiter of any markup and does not include the CDATA-section-close\ndelimiter, "'
            code {
              ']]>'
            }
            '". In a CDATA section,\ncharacter data is any string of characters not including the CDATA-section-close\ndelimiter, "'
            code {
              ']]>'
            }
            '".'
          }
          p {
            'To allow attribute values to contain both single and double quotes, the\napostrophe or single-quote character (\') may be represented as "'
            code {
              '&apos;'
            }
            '",\nand the double-quote character (") as "'
            code {
              '&quot;'
            }
            '".'
          }
          h5 {
            a {
              name 'd0e1106'
              id 'd0e1106'
            }
            'Character Data'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-CharData'
                    id 'NT-CharData'
                  }
                  '[14]'
                }
                td {
                  code {
                    'CharData'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '[^<&]* - ([^<&]* \']]>\' [^<&]*)'
                  }
                }
              }
            }
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-comments'
              id 'sec-comments'
            }
            '2.5 Comments'
          }
          p {
            '['
            a {
              name 'dt-comment'
              id 'dt-comment'
              title 'Comment'
              'Definition'
            }
            ':'
            b {
              'Comments'
            }
            'may appear\nanywhere in a document outside other'
            a {
              title 'Markup'
              href '#dt-markup'
              'markup'
            }
            ';\nin addition, they may appear within the document type declaration at places\nallowed by the grammar. They are not part of the document\'s'
            a {
              title 'Character Data'
              href '#dt-chardata'
              'character\ndata'
            }
            '; an XML processor'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MAY'
            }
            ', but need not, make it possible for an\napplication to retrieve the text of comments.'
            a {
              title 'For Compatibility'
              href '#dt-compat'
              'For\ncompatibility'
            }
            ', the string "'
            code {
              '--'
            }
            '" (double-hyphen)'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST NOT'
            }
            'occur within comments.] Parameter\nentity references'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST NOT'
            }
            'be recognized within comments.'
          }
          h5 {
            a {
              name 'd0e1149'
              id 'd0e1149'
            }
            'Comments'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-Comment'
                    id 'NT-Comment'
                  }
                  '[15]'
                }
                td {
                  code {
                    'Comment'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'<!--\' (('
                    a {
                      href '#NT-Char'
                      'Char'
                    }
                    '- \'-\') | (\'-\'\n('
                    a {
                      href '#NT-Char'
                      'Char'
                    }
                    '- \'-\')))* \'-->\''
                  }
                }
              }
            }
          }
          p {
            'An example of a comment:'
          }
          div {
            class 'exampleInner'
            pre {
              '<!-- declarations for <head> & <body> -->'
            }
          }
          p {
            'Note\nthat the grammar does not allow a comment ending in'
            code {
              '--->'
            }
            '. The\nfollowing example is'
            em {
              'not'
            }
            'well-formed.'
          }
          div {
            class 'exampleInner'
            pre {
              '<!-- B+, B, or B--->'
            }
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-pi'
              id 'sec-pi'
            }
            '2.6 Processing Instructions'
          }
          p {
            '['
            a {
              name 'dt-pi'
              id 'dt-pi'
              title 'Processing instruction'
              'Definition'
            }
            ':'
            b {
              'Processing instructions'
            }
            '(PIs) allow documents to contain instructions for applications.]'
          }
          h5 {
            a {
              name 'd0e1188'
              id 'd0e1188'
            }
            'Processing Instructions'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-PI'
                    id 'NT-PI'
                  }
                  '[16]'
                }
                td {
                  code {
                    'PI'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'<?\''
                    a {
                      href '#NT-PITarget'
                      'PITarget'
                    }
                    '('
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '('
                    a {
                      href '#NT-Char'
                      'Char'
                    }
                    '* - ('
                    a {
                      href '#NT-Char'
                      'Char'
                    }
                    '* \'?>\''
                    a {
                      href '#NT-Char'
                      'Char'
                    }
                    '*)))? \'?>\''
                  }
                }
              }
            }
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-PITarget'
                    id 'NT-PITarget'
                  }
                  '[17]'
                }
                td {
                  code {
                    'PITarget'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-Name'
                      'Name'
                    }
                    '- ((\'X\' | \'x\') (\'M\' |\n\'m\') (\'L\' | \'l\'))'
                  }
                }
              }
            }
          }
          p {
            'PIs are not part of the document\'s'
            a {
              title 'Character Data'
              href '#dt-chardata'
              'character\ndata'
            }
            ', but'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be passed through to the application. The PI begins\nwith a target ('
            a {
              href '#NT-PITarget'
              'PITarget'
            }
            ') used to identify the application\nto which the instruction is directed. The target names "'
            code {
              'XML'
            }
            '", "'
            code {
              'xml'
            }
            '",\nand so on are reserved for standardization in this or future versions of this\nspecification. The XML'
            a {
              title 'Notation'
              href '#dt-notation'
              'Notation'
            }
            'mechanism\nmay be used for formal declaration of PI targets. Parameter\nentity references'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST NOT'
            }
            'be recognized within processing instructions.'
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-cdata-sect'
              id 'sec-cdata-sect'
            }
            '2.7 CDATA Sections'
          }
          p {
            '['
            a {
              name 'dt-cdsection'
              id 'dt-cdsection'
              title 'CDATA Section'
              'Definition'
            }
            ':'
            b {
              'CDATA sections'
            }
            'may occur anywhere character data may occur; they are used to escape blocks\nof text containing characters which would otherwise be recognized as markup.\nCDATA sections begin with the string "'
            code {
              '<![CDATA['
            }
            '"\nand end with the string "'
            code {
              ']]>'
            }
            '":]'
          }
          h5 {
            a {
              name 'd0e1271'
              id 'd0e1271'
            }
            'CDATA Sections'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-CDSect'
                    id 'NT-CDSect'
                  }
                  '[18]'
                }
                td {
                  code {
                    'CDSect'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-CDStart'
                      'CDStart'
                    }
                    a {
                      href '#NT-CData'
                      'CData'
                    }
                    a {
                      href '#NT-CDEnd'
                      'CDEnd'
                    }
                  }
                }
              }
            }
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-CDStart'
                    id 'NT-CDStart'
                  }
                  '[19]'
                }
                td {
                  code {
                    'CDStart'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'<![CDATA[\''
                  }
                }
              }
            }
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-CData'
                    id 'NT-CData'
                  }
                  '[20]'
                }
                td {
                  code {
                    'CData'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '('
                    a {
                      href '#NT-Char'
                      'Char'
                    }
                    '* - ('
                    a {
                      href '#NT-Char'
                      'Char'
                    }
                    '*\n\']]>\''
                    a {
                      href '#NT-Char'
                      'Char'
                    }
                    '*))'
                  }
                }
              }
            }
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-CDEnd'
                    id 'NT-CDEnd'
                  }
                  '[21]'
                }
                td {
                  code {
                    'CDEnd'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\']]>\''
                  }
                }
              }
            }
          }
          p {
            'Within a CDATA section, only the'
            a {
              href '#NT-CDEnd'
              'CDEnd'
            }
            'string is\nrecognized as markup, so that left angle brackets and ampersands may occur\nin their literal form; they need not (and cannot) be escaped using "'
            code {
              '&lt;'
            }
            '"\nand "'
            code {
              '&amp;'
            }
            '". CDATA sections cannot nest.'
          }
          p {
            'An example of a CDATA section, in which "'
            code {
              '<greeting>'
            }
            '"\nand "'
            code {
              '</greeting>'
            }
            '" are recognized as'
            a {
              title 'Character Data'
              href '#dt-chardata'
              'character data'
            }
            ', not'
            a {
              title 'Markup'
              href '#dt-markup'
              'markup'
            }
            ':'
          }
          div {
            class 'exampleInner'
            pre {
              '<![CDATA[<greeting>Hello, world!</greeting>]]>'
            }
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-prolog-dtd'
              id 'sec-prolog-dtd'
            }
            '2.8 Prolog and Document Type Declaration'
          }
          p {
            '['
            a {
              name 'dt-xmldecl'
              id 'dt-xmldecl'
              title 'XML Declaration'
              'Definition'
            }
            ': XML documents'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'SHOULD'
            }
            'begin with an'
            b {
              'XML declaration'
            }
            'which specifies the version of\nXML being used.] For example, the following is a complete XML document,'
            a {
              title 'Well-Formed'
              href '#dt-wellformed'
              'well-formed'
            }
            'but not'
            a {
              title 'Validity'
              href '#dt-valid'
              'valid'
            }
            ':'
          }
          div {
            class 'exampleInner'
            pre {
              '<?xml version="1.0"?>\n<greeting>Hello, world!</greeting>'
            }
          }
          p {
            'and so is this:'
          }
          div {
            class 'exampleInner'
            pre {
              '<greeting>Hello, world!</greeting>'
            }
          }
          p {
            'The function of the markup in an XML document is to describe its storage and\nlogical structure and to associate attribute\nname-value pairs with its logical structures. XML provides a mechanism, the'
            a {
              title 'Document Type Declaration'
              href '#dt-doctype'
              'document\ntype declaration'
            }
            ', to define constraints on the logical structure\nand to support the use of predefined storage units. ['
            a {
              name 'dt-valid'
              id 'dt-valid'
              title 'Validity'
              'Definition'
            }
            ': An XML document is'
            b {
              'valid'
            }
            'if it has an associated\ndocument type declaration and if the document complies with the constraints\nexpressed in it.]'
          }
          p {
            'The document type declaration'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'appear before the first'
            a {
              title 'Element'
              href '#dt-element'
              'element'
            }
            'in the document.'
          }
          h5 {
            a {
              name 'xmldoc'
              id 'xmldoc'
            }
            'Prolog'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-prolog'
                    id 'NT-prolog'
                  }
                  '[22]'
                }
                td {
                  code {
                    'prolog'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-XMLDecl'
                      'XMLDecl'
                    }
                    '?'
                    a {
                      href '#NT-Misc'
                      'Misc'
                    }
                    '*\n('
                    a {
                      href '#NT-doctypedecl'
                      'doctypedecl'
                    }
                    a {
                      href '#NT-Misc'
                      'Misc'
                    }
                    '*)?'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-XMLDecl'
                    id 'NT-XMLDecl'
                  }
                  '[23]'
                }
                td {
                  code {
                    'XMLDecl'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'<?xml\''
                    a {
                      href '#NT-VersionInfo'
                      'VersionInfo'
                    }
                    a {
                      href '#NT-EncodingDecl'
                      'EncodingDecl'
                    }
                    '?'
                    a {
                      href '#NT-SDDecl'
                      'SDDecl'
                    }
                    '?'
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '? \'?>\''
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-VersionInfo'
                    id 'NT-VersionInfo'
                  }
                  '[24]'
                }
                td {
                  code {
                    'VersionInfo'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '\'version\''
                    a {
                      href '#NT-Eq'
                      'Eq'
                    }
                    '("\'"'
                    a {
                      href '#NT-VersionNum'
                      'VersionNum'
                    }
                    '"\'" | \'"\''
                    a {
                      href '#NT-VersionNum'
                      'VersionNum'
                    }
                    '\'"\')'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-Eq'
                    id 'NT-Eq'
                  }
                  '[25]'
                }
                td {
                  code {
                    'Eq'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '? \'=\''
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '?'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-VersionNum'
                    id 'NT-VersionNum'
                  }
                  '[26]'
                }
                td {
                  code {
                    'VersionNum'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'1.\' [0-9]+'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-Misc'
                    id 'NT-Misc'
                  }
                  '[27]'
                }
                td {
                  code {
                    'Misc'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-Comment'
                      'Comment'
                    }
                    '|'
                    a {
                      href '#NT-PI'
                      'PI'
                    }
                    '|'
                    a {
                      href '#NT-S'
                      'S'
                    }
                  }
                }
              }
            }
          }
          p {
            'Even though the'
            a {
              href '#NT-VersionNum'
              'VersionNum'
            }
            'production matches\n\t\t\t\t\tany version number of the form \'1.x\', XML 1.0 documents'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'SHOULD NOT'
            }
            'specify a version number other than \'1.0\'.'
          }
          div {
            class 'note'
            p {
              class 'prefix'
              b {
                'Note:'
              }
            }
            p {
              'When an XML 1.0 processor encounters a document that specifies\n\t\t\t\t\t\ta 1.x version number other than \'1.0\', it will process it as\n\t\t\t\t\t\ta 1.0 document.  This means that an XML 1.0 processor will accept\n\t\t\t\t\t\t1.x documents provided they do not use any non-1.0 features.'
            }
          }
          p {
            '['
            a {
              name 'dt-doctype'
              id 'dt-doctype'
              title 'Document Type Declaration'
              'Definition'
            }
            ': The XML'
            b {
              'document\ntype declaration'
            }
            'contains or points to'
            a {
              title 'markup declaration'
              href '#dt-markupdecl'
              'markup\ndeclarations'
            }
            'that provide a grammar for a class of documents. This\ngrammar is known as a document type definition, or'
            b {
              'DTD'
            }
            '. The document\ntype declaration can point to an external subset (a special kind of'
            a {
              title 'External Entity'
              href '#dt-extent'
              'external entity'
            }
            ') containing markup declarations,\nor can contain the markup declarations directly in an internal subset, or\ncan do both. The DTD for a document consists of both subsets taken together.]'
          }
          p {
            '['
            a {
              name 'dt-markupdecl'
              id 'dt-markupdecl'
              title 'markup declaration'
              'Definition'
            }
            ':  A'
            b {
              'markup declaration'
            }
            'is an'
            a {
              title 'Element Type declaration'
              href '#dt-eldecl'
              'element type declaration'
            }
            ', an'
            a {
              title 'Attribute-List Declaration'
              href '#dt-attdecl'
              'attribute-list declaration'
            }
            ', an'
            a {
              title 'entity declaration'
              href '#dt-entdecl'
              'entity\ndeclaration'
            }
            ', or a'
            a {
              title 'Notation Declaration'
              href '#dt-notdecl'
              'notation declaration'
            }
            '.]\nThese declarations may be contained in whole or in part within'
            a {
              title 'Parameter entity'
              href '#dt-PE'
              'parameter\nentities'
            }
            ', as described in the well-formedness and validity constraints\nbelow. For further\ninformation, see'
            a {
              href '#sec-physical-struct'
              b {
                '4 Physical Structures'
              }
            }
            '.'
          }
          h5 {
            a {
              name 'dtd'
              id 'dtd'
            }
            'Document Type Definition'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-doctypedecl'
                    id 'NT-doctypedecl'
                  }
                  '[28]'
                }
                td {
                  code {
                    'doctypedecl'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'<!DOCTYPE\''
                    a {
                      href '#NT-S'
                      'S'
                    }
                    a {
                      href '#NT-Name'
                      'Name'
                    }
                    '('
                    a {
                      href '#NT-S'
                      'S'
                    }
                    a {
                      href '#NT-ExternalID'
                      'ExternalID'
                    }
                    ')?'
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '?\n(\'[\''
                    a {
                      href '#NT-intSubset'
                      'intSubset'
                    }
                    '\']\''
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '?)? \'>\''
                  }
                }
                td {
                  a {
                    href '#vc-roottype'
                    '[VC: Root Element Type]'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                }
                td {
                }
                td {
                }
                td {
                }
                td {
                  a {
                    href '#ExtSubset'
                    '[WFC: External Subset]'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-DeclSep'
                    id 'NT-DeclSep'
                  }
                  '[28a]'
                }
                td {
                  code {
                    'DeclSep'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-PEReference'
                      'PEReference'
                    }
                    '|'
                    a {
                      href '#NT-S'
                      'S'
                    }
                  }
                }
                td {
                  a {
                    href '#PE-between-Decls'
                    '[WFC: PE Between Declarations]'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-intSubset'
                    id 'NT-intSubset'
                  }
                  '[28b]'
                }
                td {
                  code {
                    'intSubset'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '('
                    a {
                      href '#NT-markupdecl'
                      'markupdecl'
                    }
                    '|'
                    a {
                      href '#NT-DeclSep'
                      'DeclSep'
                    }
                    ')*'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-markupdecl'
                    id 'NT-markupdecl'
                  }
                  '[29]'
                }
                td {
                  code {
                    'markupdecl'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-elementdecl'
                      'elementdecl'
                    }
                    '|'
                    a {
                      href '#NT-AttlistDecl'
                      'AttlistDecl'
                    }
                    '|'
                    a {
                      href '#NT-EntityDecl'
                      'EntityDecl'
                    }
                    '|'
                    a {
                      href '#NT-NotationDecl'
                      'NotationDecl'
                    }
                    '|'
                    a {
                      href '#NT-PI'
                      'PI'
                    }
                    '|'
                    a {
                      href '#NT-Comment'
                      'Comment'
                    }
                  }
                }
                td {
                  a {
                    href '#vc-PEinMarkupDecl'
                    '[VC: Proper Declaration/PE Nesting]'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                }
                td {
                }
                td {
                }
                td {
                }
                td {
                  a {
                    href '#wfc-PEinInternalSubset'
                    '[WFC: PEs in Internal Subset]'
                  }
                }
              }
            }
          }
          p {
            'Note\nthat it is possible to construct a well-formed document containing a'
            a {
              href '#NT-doctypedecl'
              'doctypedecl'
            }
            'that neither points to an external subset nor contains an internal subset.'
          }
          p {
            'The markup declarations may be made up in whole or in part of the'
            a {
              title 'Replacement Text'
              href '#dt-repltext'
              'replacement text'
            }
            'of'
            a {
              title 'Parameter entity'
              href '#dt-PE'
              'parameter\nentities'
            }
            '. The productions later in this specification for individual\nnonterminals ('
            a {
              href '#NT-elementdecl'
              'elementdecl'
            }
            ','
            a {
              href '#NT-AttlistDecl'
              'AttlistDecl'
            }
            ',\nand so on) describe the declarations'
            em {
              'after'
            }
            'all the parameter\nentities have been'
            a {
              title 'Include'
              href '#dt-include'
              'included'
            }
            '.'
          }
          p {
            'Parameter\nentity references are recognized anywhere in the DTD (internal and external\nsubsets and external parameter entities), except in literals, processing instructions,\ncomments, and the contents of ignored conditional sections (see'
            a {
              href '#sec-condition-sect'
              b {
                '3.4 Conditional Sections'
              }
            }
            ').\nThey are also recognized in entity value literals. The use of parameter entities\nin the internal subset is restricted as described below.'
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'vc-roottype'
                id 'vc-roottype'
              }
              b {
                'Validity constraint: Root Element Type'
              }
            }
            p {
              'The'
              a {
                href '#NT-Name'
                'Name'
              }
              'in the document type declaration'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'match the element type of the'
              a {
                title 'Root Element'
                href '#dt-root'
                'root element'
              }
              '.'
            }
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'vc-PEinMarkupDecl'
                id 'vc-PEinMarkupDecl'
              }
              b {
                'Validity constraint: Proper Declaration/PE Nesting'
              }
            }
            p {
              'Parameter-entity'
              a {
                title 'Replacement Text'
                href '#dt-repltext'
                'replacement text'
              }
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'be properly nested with markup declarations. That is to say, if either\nthe first character or the last character of a markup declaration ('
              a {
                href '#NT-markupdecl'
                'markupdecl'
              }
              'above) is contained in the replacement text for a'
              a {
                title 'Parameter-entity reference'
                href '#dt-PERef'
                'parameter-entity\nreference'
              }
              ', both'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'be contained in the same replacement text.'
            }
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'wfc-PEinInternalSubset'
                id 'wfc-PEinInternalSubset'
              }
              b {
                'Well-formedness constraint: PEs in Internal Subset'
              }
            }
            p {
              'In\nthe internal DTD subset,'
              a {
                title 'Parameter-entity reference'
                href '#dt-PERef'
                'parameter-entity references'
              }
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST NOT'
              }
              'occur within markup declarations; they may occur where markup declarations can occur.\n(This does not apply to references that occur in external parameter entities\nor to the external subset.)'
            }
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'ExtSubset'
                id 'ExtSubset'
              }
              b {
                'Well-formedness constraint: External Subset'
              }
            }
            p {
              'The external subset, if any,'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'match the production for'
              a {
                href '#NT-extSubset'
                'extSubset'
              }
              '.'
            }
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'PE-between-Decls'
                id 'PE-between-Decls'
              }
              b {
                'Well-formedness constraint: PE Between Declarations'
              }
            }
            p {
              'The replacement text of a parameter entity reference\nin a'
              a {
                href '#NT-DeclSep'
                'DeclSep'
              }
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'match the production'
              a {
                href '#NT-extSubsetDecl'
                'extSubsetDecl'
              }
              '.'
            }
          }
          p {
            'Like the internal subset, the external subset and any external parameter\nentities referenced\nin a'
            a {
              href '#NT-DeclSep'
              'DeclSep'
            }
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'consist of a series of\ncomplete markup declarations of the types allowed by the non-terminal symbol'
            a {
              href '#NT-markupdecl'
              'markupdecl'
            }
            ', interspersed with white space or'
            a {
              title 'Parameter-entity reference'
              href '#dt-PERef'
              'parameter-entity references'
            }
            '. However, portions of\nthe contents of the external subset or of these\nexternal parameter entities may conditionally be ignored by using the'
            a {
              title 'conditional section'
              href '#dt-cond-section'
              'conditional section'
            }
            'construct; this is not\nallowed in the internal subset but is\nallowed in external parameter entities referenced in the internal subset.'
          }
          h5 {
            a {
              name 'ext-Subset'
              id 'ext-Subset'
            }
            'External Subset'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-extSubset'
                    id 'NT-extSubset'
                  }
                  '[30]'
                }
                td {
                  code {
                    'extSubset'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-TextDecl'
                      'TextDecl'
                    }
                    '?'
                    a {
                      href '#NT-extSubsetDecl'
                      'extSubsetDecl'
                    }
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-extSubsetDecl'
                    id 'NT-extSubsetDecl'
                  }
                  '[31]'
                }
                td {
                  code {
                    'extSubsetDecl'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '('
                    a {
                      href '#NT-markupdecl'
                      'markupdecl'
                    }
                    '|'
                    a {
                      href '#NT-conditionalSect'
                      'conditionalSect'
                    }
                    '|'
                    a {
                      href '#NT-DeclSep'
                      'DeclSep'
                    }
                    ')*'
                  }
                }
              }
            }
          }
          p {
            'The external subset and external parameter entities also differ from the\ninternal subset in that in them,'
            a {
              title 'Parameter-entity reference'
              href '#dt-PERef'
              'parameter-entity\nreferences'
            }
            'are permitted'
            em {
              'within'
            }
            'markup declarations,\nnot only'
            em {
              'between'
            }
            'markup declarations.'
          }
          p {
            'An example of an XML document with a document type declaration:'
          }
          div {
            class 'exampleInner'
            pre {
              '<?xml version="1.0"?>\n<!DOCTYPE greeting SYSTEM "hello.dtd">\n<greeting>Hello, world!</greeting>'
            }
          }
          p {
            'The'
            a {
              title 'System Identifier'
              href '#dt-sysid'
              'system identifier'
            }
            '"'
            code {
              'hello.dtd'
            }
            '"\ngives the address (a URI reference) of a DTD for the document.'
          }
          p {
            'The declarations can also be given locally, as in this example:'
          }
          div {
            class 'exampleInner'
            pre {
              '<?xml version="1.0" encoding="UTF-8" ?>\n<!DOCTYPE greeting [\n  <!ELEMENT greeting (#PCDATA)>\n]>\n<greeting>Hello, world!</greeting>'
            }
          }
          p {
            'If both the external and internal subsets are used, the internal subset'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be considered to occur before the external subset. \nThis has the effect that entity and attribute-list declarations in the internal\nsubset take precedence over those in the external subset.'
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-rmd'
              id 'sec-rmd'
            }
            '2.9 Standalone Document Declaration'
          }
          p {
            'Markup declarations can affect the content of the document, as passed from\nan'
            a {
              title 'XML Processor'
              href '#dt-xml-proc'
              'XML processor'
            }
            'to an application; examples\nare attribute defaults and entity declarations. The standalone document declaration,\nwhich may appear as a component of the XML declaration, signals whether or\nnot there are such declarations which appear external to the'
            a {
              title 'Document Entity'
              href '#dt-docent'
              'document\nentity'
            }
            'or in parameter entities. ['
            a {
              name 'dt-extmkpdecl'
              id 'dt-extmkpdecl'
              title 'External Markup Declaration'
              'Definition'
            }
            ': An'
            b {
              'external\nmarkup declaration'
            }
            'is defined as a markup declaration occurring in\nthe external subset or in a parameter entity (external or internal, the latter\nbeing included because non-validating processors are not required to read\nthem).]'
          }
          h5 {
            a {
              name 'fulldtd'
              id 'fulldtd'
            }
            'Standalone Document Declaration'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-SDDecl'
                    id 'NT-SDDecl'
                  }
                  '[32]'
                }
                td {
                  code {
                    'SDDecl'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '\'standalone\''
                    a {
                      href '#NT-Eq'
                      'Eq'
                    }
                    '(("\'" (\'yes\' | \'no\') "\'") | (\'"\' (\'yes\' | \'no\') \'"\'))'
                  }
                }
                td {
                  a {
                    href '#vc-check-rmd'
                    '[VC: Standalone Document Declaration]'
                  }
                }
              }
            }
          }
          p {
            'In a standalone document declaration, the value "yes" indicates\nthat there are no'
            a {
              title 'External Markup Declaration'
              href '#dt-extmkpdecl'
              'external markup declarations'
            }
            'which\naffect the information passed from the XML processor to the application. The\nvalue "no" indicates that there are or may be such external\nmarkup declarations. Note that the standalone document declaration only denotes\nthe presence of external'
            em {
              'declarations'
            }
            '; the presence, in a document,\nof references to external'
            em {
              'entities'
            }
            ', when those entities are internally\ndeclared, does not change its standalone status.'
          }
          p {
            'If there are no external markup declarations, the standalone document declaration\nhas no meaning. If there are external markup declarations but there is no\nstandalone document declaration, the value "no" is assumed.'
          }
          p {
            'Any XML document for which'
            code {
              'standalone="no"'
            }
            'holds can be converted\nalgorithmically to a standalone document, which may be desirable for some\nnetwork delivery applications.'
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'vc-check-rmd'
                id 'vc-check-rmd'
              }
              b {
                'Validity constraint: Standalone Document Declaration'
              }
            }
            p {
              'The\nstandalone document declaration'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'have the value "no" if\nany external markup declarations contain declarations of:'
            }
            ul {
              li {
                p {
                  'attributes with'
                  a {
                    title 'Attribute Default'
                    href '#dt-default'
                    'default'
                  }
                  'values,\nif elements to which these attributes apply appear in the document without\nspecifications of values for these attributes, or'
                }
              }
              li {
                p {
                  'entities (other than'
                  code {
                    'amp'
                  }
                  ','
                  code {
                    'lt'
                  }
                  ','
                  code {
                    'gt'
                  }
                  ','
                  code {
                    'apos'
                  }
                  ','
                  code {
                    'quot'
                  }
                  '), if'
                  a {
                    title 'Entity Reference'
                    href '#dt-entref'
                    'references'
                  }
                  'to those entities appear in the document, or'
                }
              }
              li {
                p {
                  'attributes with\ntokenized types, where the\nattribute appears in the document with a value such that'
                  a {
                    href '#AVNormalize'
                    cite {
                      'normalization'
                    }
                  }
                  'will produce a different value from that which would be produced\nin the absence of the declaration, or'
                }
              }
              li {
                p {
                  'element types with'
                  a {
                    title 'Element content'
                    href '#dt-elemcontent'
                    'element content'
                  }
                  ',\nif white space occurs directly within any instance of those types.'
                }
              }
            }
          }
          p {
            'An example XML declaration with a standalone document declaration:'
          }
          div {
            class 'exampleInner'
            pre {
              '<?xml version="1.0" standalone=\'yes\'?>'
            }
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-white-space'
              id 'sec-white-space'
            }
            '2.10 White Space Handling'
          }
          p {
            'In editing XML documents, it is often convenient to use "white space"\n(spaces, tabs, and blank lines)\nto set apart the markup for greater readability. Such white space is typically\nnot intended for inclusion in the delivered version of the document. On the\nother hand, "significant" white space that should be preserved\nin the delivered version is common, for example in poetry and source code.'
          }
          p {
            'An'
            a {
              title 'XML Processor'
              href '#dt-xml-proc'
              'XML processor'
            }
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'always pass\nall characters in a document that are not markup through to the application.\nA'
            a {
              title 'Validating Processor'
              href '#dt-validating'
              'validating XML processor'
            }
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'also\ninform the application which of these characters constitute white space appearing\nin'
            a {
              title 'Element content'
              href '#dt-elemcontent'
              'element content'
            }
            '.'
          }
          p {
            'A special'
            a {
              title 'Attribute'
              href '#dt-attr'
              'attribute'
            }
            'named'
            code {
              'xml:space'
            }
            'may be attached to an element to signal an intention that in that element,\nwhite space should be preserved by applications. In valid documents, this\nattribute, like any other,'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be'
            a {
              title 'Attribute-List Declaration'
              href '#dt-attdecl'
              'declared'
            }
            'if it is used. When declared, it'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be given as an'
            a {
              title 'Enumerated Attribute Values'
              href '#dt-enumerated'
              'enumerated\ntype'
            }
            'whose values\nare one or both of "default" and "preserve".\nFor example:'
          }
          div {
            class 'exampleInner'
            pre {
              '<!ATTLIST poem  xml:space (default|preserve) \'preserve\'>\n\n<!ATTLIST pre xml:space (preserve) #FIXED \'preserve\'>'
            }
          }
          p {
            'The value "default" signals that applications\' default white-space\nprocessing modes are acceptable for this element; the value "preserve"\nindicates the intent that applications preserve all the white space. This\ndeclared intent is considered to apply to all elements within the content\nof the element where it is specified, unless overridden with\nanother instance of the'
            code {
              'xml:space'
            }
            'attribute. This specification does not give meaning to any value of'
            code {
              'xml:space'
            }
            'other than "default" and "preserve". It is an error for other values to be specified; the XML processor'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MAY'
            }
            'report the error or'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MAY'
            }
            'recover by ignoring the attribute specification or by reporting the (erroneous) value to the application. Applications may ignore or reject erroneous values.'
          }
          p {
            'The'
            a {
              title 'Root Element'
              href '#dt-root'
              'root element'
            }
            'of any document is considered\nto have signaled no intentions as regards application space handling, unless\nit provides a value for this attribute or the attribute is declared with a\ndefault value.'
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-line-ends'
              id 'sec-line-ends'
            }
            '2.11 End-of-Line Handling'
          }
          p {
            'XML'
            a {
              title 'Text Entity'
              href '#dt-parsedent'
              'parsed entities'
            }
            'are often stored\nin computer files which, for editing convenience, are organized into lines.\nThese lines are typically separated by some combination of the characters\nCARRIAGE RETURN (#xD) and LINE FEED (#xA).'
          }
          p {
            'To\nsimplify the tasks of'
            a {
              title 'Application'
              href '#dt-app'
              'applications'
            }
            ', the'
            a {
              title 'XML Processor'
              href '#dt-xml-proc'
              'XML\nprocessor'
            }
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'behave as if it normalized all line breaks in external parsed\nentities (including the document entity) on input, before parsing, by translating\nboth the two-character sequence #xD #xA and any #xD that is not followed by\n#xA to a single #xA character.'
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-lang-tag'
              id 'sec-lang-tag'
            }
            '2.12 Language Identification'
          }
          p {
            'In document processing, it is often useful to identify the natural or formal\nlanguage in which the content is written. A special'
            a {
              title 'Attribute'
              href '#dt-attr'
              'attribute'
            }
            'named'
            code {
              'xml:lang'
            }
            'may be inserted in documents to specify the language\nused in the contents and attribute values of any element in an XML document.\nIn valid documents, this attribute, like any other,'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be'
            a {
              title 'Attribute-List Declaration'
              href '#dt-attdecl'
              'declared'
            }
            'if it is used. The\nvalues of the attribute are language identifiers as defined by'
            a {
              href '#RFC1766'
              '[IETF BCP 47]'
            }
            ','
            cite {
              'Tags\nfor the Identification of Languages'
            }
            '; in addition, the empty string may be specified.'
          }
          p {
            '(Productions 33 through 38 have been removed.)'
          }
          p {
            'For example:'
          }
          div {
            class 'exampleInner'
            pre {
              '<p xml:lang="en">The quick brown fox jumps over the lazy dog.</p>\n<p xml:lang="en-GB">What colour is it?</p>\n<p xml:lang="en-US">What color is it?</p>\n<sp who="Faust" desc=\'leise\' xml:lang="de">\n  <l>Habe nun, ach! Philosophie,</l>\n  <l>Juristerei, und Medizin</l>\n  <l>und leider auch Theologie</l>\n  <l>durchaus studiert mit heißem Bemüh\'n.</l>\n</sp>'
            }
          }
          p {
            'The language specified by'
            code {
              'xml:lang'
            }
            'applies to the element where it is specified\n\t\t (including the values of its attributes), and  to all elements in its content unless\n     overridden with another instance of'
            code {
              'xml:lang'
            }
            '. In particular, the empty value of'
            code {
              'xml:lang'
            }
            'is used on an element B to override\n\t\t a specification of'
            code {
              'xml:lang'
            }
            'on an enclosing element A, without specifying another language. Within B,\n\t\t it is considered that there is no language information available, just as if'
            code {
              'xml:lang'
            }
            'had not been specified\n\t\t on B or any of its ancestors. Applications determine which of an element\'s attribute values\n     and which parts of its character content, if any, are treated as language-dependent values described by'
            code {
              'xml:lang'
            }
            '.'
          }
          div {
            class 'note'
            p {
              class 'prefix'
              b {
                'Note:'
              }
            }
            p {
              'Language information may also be provided by external transport protocols (e.g. HTTP or\n  MIME). When available, this information may be used by XML applications, but the more local\n  information provided by'
              code {
                'xml:lang'
              }
              'should be considered to override it.'
            }
          }
          p {
            'A simple declaration for'
            code {
              'xml:lang'
            }
            'might take the form'
          }
          div {
            class 'exampleInner'
            pre {
              'xml:lang CDATA #IMPLIED'
            }
          }
          p {
            'but specific default values may also be given, if appropriate. In a collection\nof French poems for English students, with glosses and notes in English, the'
            code {
              'xml:lang'
            }
            'attribute might be declared this way:'
          }
          div {
            class 'exampleInner'
            pre {
              '<!ATTLIST poem   xml:lang CDATA \'fr\'>\n<!ATTLIST gloss  xml:lang CDATA \'en\'>\n<!ATTLIST note   xml:lang CDATA \'en\'>'
            }
          }
        }
      }
      div {
        class 'div1'
        h2 {
          a {
            name 'sec-logical-struct'
            id 'sec-logical-struct'
          }
          '3 Logical Structures'
        }
        p {
          '['
          a {
            name 'dt-element'
            id 'dt-element'
            title 'Element'
            'Definition'
          }
          ': Each'
          a {
            title 'XML Document'
            href '#dt-xml-doc'
            'XML\ndocument'
          }
          'contains one or more'
          b {
            'elements'
          }
          ', the boundaries\nof which are either delimited by'
          a {
            title 'Start-Tag'
            href '#dt-stag'
            'start-tags'
          }
          'and'
          a {
            title 'End Tag'
            href '#dt-etag'
            'end-tags'
          }
          ', or, for'
          a {
            title 'Empty'
            href '#dt-empty'
            'empty'
          }
          'elements, by an'
          a {
            title 'empty-element tag'
            href '#dt-eetag'
            'empty-element tag'
          }
          '. Each\nelement has a type, identified by name, sometimes called its "generic\nidentifier" (GI), and may have a set of attribute specifications.]\nEach attribute specification has a'
          a {
            title 'Attribute Name'
            href '#dt-attrname'
            'name'
          }
          'and a'
          a {
            title 'Attribute Value'
            href '#dt-attrval'
            'value'
          }
          '.'
        }
        h5 {
          a {
            name 'd0e2130'
            id 'd0e2130'
          }
          'Element'
        }
        table {
          class 'scrap'
          summary 'Scrap'
          tbody {
            tr {
              valign 'baseline'
              td {
                a {
                  name 'NT-element'
                  id 'NT-element'
                }
                '[39]'
              }
              td {
                code {
                  'element'
                }
              }
              td {
                '::='
              }
              td {
                code {
                  a {
                    href '#NT-EmptyElemTag'
                    'EmptyElemTag'
                  }
                }
              }
            }
            tr {
              valign 'baseline'
              td {
              }
              td {
              }
              td {
              }
              td {
                code {
                  '|'
                  a {
                    href '#NT-STag'
                    'STag'
                  }
                  a {
                    href '#NT-content'
                    'content'
                  }
                  a {
                    href '#NT-ETag'
                    'ETag'
                  }
                }
              }
              td {
                a {
                  href '#GIMatch'
                  '[WFC: Element Type Match]'
                }
              }
            }
            tr {
              valign 'baseline'
              td {
              }
              td {
              }
              td {
              }
              td {
              }
              td {
                a {
                  href '#elementvalid'
                  '[VC: Element Valid]'
                }
              }
            }
          }
        }
        p {
          'This specification does not constrain the\n\t\t\tapplication semantics, use, or (beyond syntax)\nnames of the element types and attributes, except that names beginning with\na match to'
          code {
            '((\'X\'|\'x\')(\'M\'|\'m\')(\'L\'|\'l\'))'
          }
          'are reserved for standardization\nin this or future versions of this specification.'
        }
        div {
          class 'constraint'
          p {
            class 'prefix'
            a {
              name 'GIMatch'
              id 'GIMatch'
            }
            b {
              'Well-formedness constraint: Element Type Match'
            }
          }
          p {
            'The'
            a {
              href '#NT-Name'
              'Name'
            }
            'in an element\'s end-tag'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'match the element type in the start-tag.'
          }
        }
        div {
          class 'constraint'
          p {
            class 'prefix'
            a {
              name 'elementvalid'
              id 'elementvalid'
            }
            b {
              'Validity constraint: Element Valid'
            }
          }
          p {
            'An element is valid\nif there is a declaration matching'
            a {
              href '#NT-elementdecl'
              'elementdecl'
            }
            'where the'
            a {
              href '#NT-Name'
              'Name'
            }
            'matches the element type, and one of\nthe following holds:'
          }
          ol {
            class 'enumar'
            li {
              p {
                'The declaration matches'
                b {
                  'EMPTY'
                }
                'and the element has no'
                a {
                  title 'Content'
                  href '#dt-content'
                  'content'
                }
                '(not even entity\nreferences, comments, PIs or white space).'
              }
            }
            li {
              p {
                'The declaration matches'
                a {
                  href '#NT-children'
                  'children'
                }
                'and the\nsequence of'
                a {
                  title 'Parent/Child'
                  href '#dt-parentchild'
                  'child elements'
                }
                'belongs\nto the language generated by the regular expression in the content model,\nwith optional white space, comments and\nPIs (i.e. markup matching production [27]'
                a {
                  href '#NT-Misc'
                  'Misc'
                }
                ') between the\nstart-tag and the first child element, between child elements, or between\nthe last child element and the end-tag. Note that a CDATA section containing\nonly white space or a reference\nto an entity whose replacement text is character references expanding to white\nspace do not\nmatch the nonterminal'
                a {
                  href '#NT-S'
                  'S'
                }
                ', and\nhence cannot appear in these positions; however, a\nreference to an internal entity with a literal value consisting of character\nreferences expanding to white space does match'
                a {
                  href '#NT-S'
                  'S'
                }
                ', since its\nreplacement text is the white space resulting from expansion of the character\nreferences.'
              }
            }
            li {
              p {
                'The declaration matches'
                a {
                  href '#NT-Mixed'
                  'Mixed'
                }
                ', and the content\n(after replacing\nany entity references with their replacement text) consists of'
                a {
                  title 'Character Data'
                  href '#dt-chardata'
                  'character data'
                }
                '(including'
                a {
                  title 'CDATA Section'
                  href '#dt-cdsection'
                  'CDATA sections'
                }
                '),'
                a {
                  title 'Comment'
                  href '#dt-comment'
                  'comments'
                }
                ','
                a {
                  title 'Processing instruction'
                  href '#dt-pi'
                  'PIs'
                }
                'and'
                a {
                  title 'Parent/Child'
                  href '#dt-parentchild'
                  'child elements'
                }
                'whose types match names in the\ncontent model.'
              }
            }
            li {
              p {
                'The declaration matches'
                b {
                  'ANY'
                }
                ', and the content (after replacing\nany entity references with their replacement text)\nconsists of character data,'
                a {
                  title 'CDATA Section'
                  href '#dt-cdsection'
                  'CDATA\nsections'
                }
                ','
                a {
                  title 'Comment'
                  href '#dt-comment'
                  'comments'
                }
                ','
                a {
                  title 'Processing instruction'
                  href '#dt-pi'
                  'PIs'
                }
                'and'
                a {
                  title 'Parent/Child'
                  href '#dt-parentchild'
                  'child elements'
                }
                'whose types have been declared.'
              }
            }
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-starttags'
              id 'sec-starttags'
            }
            '3.1 Start-Tags, End-Tags, and Empty-Element Tags'
          }
          p {
            '['
            a {
              name 'dt-stag'
              id 'dt-stag'
              title 'Start-Tag'
              'Definition'
            }
            ': The beginning of every non-empty\nXML element is marked by a'
            b {
              'start-tag'
            }
            '.]'
          }
          h5 {
            a {
              name 'd0e2259'
              id 'd0e2259'
            }
            'Start-tag'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-STag'
                    id 'NT-STag'
                  }
                  '[40]'
                }
                td {
                  code {
                    'STag'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'<\''
                    a {
                      href '#NT-Name'
                      'Name'
                    }
                    '('
                    a {
                      href '#NT-S'
                      'S'
                    }
                    a {
                      href '#NT-Attribute'
                      'Attribute'
                    }
                    ')*'
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '? \'>\''
                  }
                }
                td {
                  a {
                    href '#uniqattspec'
                    '[WFC: Unique Att Spec]'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-Attribute'
                    id 'NT-Attribute'
                  }
                  '[41]'
                }
                td {
                  code {
                    'Attribute'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-Name'
                      'Name'
                    }
                    a {
                      href '#NT-Eq'
                      'Eq'
                    }
                    a {
                      href '#NT-AttValue'
                      'AttValue'
                    }
                  }
                }
                td {
                  a {
                    href '#ValueType'
                    '[VC: Attribute Value Type]'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                }
                td {
                }
                td {
                }
                td {
                }
                td {
                  a {
                    href '#NoExternalRefs'
                    '[WFC: No External Entity References]'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                }
                td {
                }
                td {
                }
                td {
                }
                td {
                  a {
                    href '#CleanAttrVals'
                    '[WFC: No < in Attribute Values]'
                  }
                }
              }
            }
          }
          p {
            'The'
            a {
              href '#NT-Name'
              'Name'
            }
            'in the start- and end-tags gives the element\'s'
            b {
              'type'
            }
            '. ['
            a {
              name 'dt-attr'
              id 'dt-attr'
              title 'Attribute'
              'Definition'
            }
            ':  The'
            a {
              href '#NT-Name'
              'Name'
            }
            '-'
            a {
              href '#NT-AttValue'
              'AttValue'
            }
            'pairs are referred to as the'
            b {
              'attribute specifications'
            }
            'of the\nelement], ['
            a {
              name 'dt-attrname'
              id 'dt-attrname'
              title 'Attribute Name'
              'Definition'
            }
            ': with the'
            a {
              href '#NT-Name'
              'Name'
            }
            'in each pair referred to as the'
            b {
              'attribute name'
            }
            ']\nand ['
            a {
              name 'dt-attrval'
              id 'dt-attrval'
              title 'Attribute Value'
              'Definition'
            }
            ': the content of the'
            a {
              href '#NT-AttValue'
              'AttValue'
            }
            '(the text between the'
            code {
              '\''
            }
            'or'
            code {
              '"'
            }
            'delimiters) as the'
            b {
              'attribute value'
            }
            '.] Note\nthat the order of attribute specifications in a start-tag or empty-element\ntag is not significant.'
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'uniqattspec'
                id 'uniqattspec'
              }
              b {
                'Well-formedness constraint: Unique Att Spec'
              }
            }
            p {
              'An attribute name'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST NOT'
              }
              'appear more than once in the same start-tag or empty-element tag.'
            }
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'ValueType'
                id 'ValueType'
              }
              b {
                'Validity constraint: Attribute Value Type'
              }
            }
            p {
              'The attribute'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'have been declared; the value'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'be of the type declared for it. (For attribute\ntypes, see'
              a {
                href '#attdecls'
                b {
                  '3.3 Attribute-List Declarations'
                }
              }
              '.)'
            }
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'NoExternalRefs'
                id 'NoExternalRefs'
              }
              b {
                'Well-formedness constraint: No External Entity References'
              }
            }
            p {
              'Attribute\nvalues'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST NOT'
              }
              'contain direct or indirect entity references to external entities.'
            }
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'CleanAttrVals'
                id 'CleanAttrVals'
              }
              b {
                'Well-formedness constraint: No'
                code {
                  '<'
                }
                'in Attribute Values'
              }
            }
            p {
              'The'
              a {
                title 'Replacement Text'
                href '#dt-repltext'
                'replacement text'
              }
              'of any entity\nreferred to directly or indirectly in an attribute value'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST NOT'
              }
              'contain a'
              code {
                '<'
              }
              '.'
            }
          }
          p {
            'An example of a start-tag:'
          }
          div {
            class 'exampleInner'
            pre {
              '<termdef id="dt-dog" term="dog">'
            }
          }
          p {
            '['
            a {
              name 'dt-etag'
              id 'dt-etag'
              title 'End Tag'
              'Definition'
            }
            ': The end of every element that begins\nwith a start-tag'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be marked by an'
            b {
              'end-tag'
            }
            'containing a name\nthat echoes the element\'s type as given in the start-tag:]'
          }
          h5 {
            a {
              name 'd0e2403'
              id 'd0e2403'
            }
            'End-tag'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-ETag'
                    id 'NT-ETag'
                  }
                  '[42]'
                }
                td {
                  code {
                    'ETag'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'</\''
                    a {
                      href '#NT-Name'
                      'Name'
                    }
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '?\n\'>\''
                  }
                }
              }
            }
          }
          p {
            'An example of an end-tag:'
          }
          div {
            class 'exampleInner'
            pre {
              '</termdef>'
            }
          }
          p {
            '['
            a {
              name 'dt-content'
              id 'dt-content'
              title 'Content'
              'Definition'
            }
            ': The'
            a {
              title 'Text'
              href '#dt-text'
              'text'
            }
            'between the start-tag and end-tag is called the element\'s'
            b {
              'content'
            }
            ':]'
          }
          h5 {
            a {
              name 'd0e2433'
              id 'd0e2433'
            }
            'Content of Elements'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-content'
                    id 'NT-content'
                  }
                  '[43]'
                }
                td {
                  code {
                    'content'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-CharData'
                      'CharData'
                    }
                    '? (('
                    a {
                      href '#NT-element'
                      'element'
                    }
                    '|'
                    a {
                      href '#NT-Reference'
                      'Reference'
                    }
                    '|'
                    a {
                      href '#NT-CDSect'
                      'CDSect'
                    }
                    '|'
                    a {
                      href '#NT-PI'
                      'PI'
                    }
                    '|'
                    a {
                      href '#NT-Comment'
                      'Comment'
                    }
                    ')'
                    a {
                      href '#NT-CharData'
                      'CharData'
                    }
                    '?)*'
                  }
                }
              }
            }
          }
          p {
            '['
            a {
              name 'dt-empty'
              id 'dt-empty'
              title 'Empty'
              'Definition'
            }
            ': An element\nwith no'
            a {
              href '#NT-content'
              'content'
            }
            'is said to be'
            b {
              'empty'
            }
            '.] The representation\nof an empty element is either a start-tag immediately followed by an end-tag,\nor an empty-element tag. ['
            a {
              name 'dt-eetag'
              id 'dt-eetag'
              title 'empty-element tag'
              'Definition'
            }
            ': An'
            b {
              'empty-element\ntag'
            }
            'takes a special form:]'
          }
          h5 {
            a {
              name 'd0e2480'
              id 'd0e2480'
            }
            'Tags for Empty Elements'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-EmptyElemTag'
                    id 'NT-EmptyElemTag'
                  }
                  '[44]'
                }
                td {
                  code {
                    'EmptyElemTag'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'<\''
                    a {
                      href '#NT-Name'
                      'Name'
                    }
                    '('
                    a {
                      href '#NT-S'
                      'S'
                    }
                    a {
                      href '#NT-Attribute'
                      'Attribute'
                    }
                    ')*'
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '? \'/>\''
                  }
                }
                td {
                  a {
                    href '#uniqattspec'
                    '[WFC: Unique Att Spec]'
                  }
                }
              }
            }
          }
          p {
            'Empty-element tags may be used for any element which has no content, whether\nor not it is declared using the keyword'
            b {
              'EMPTY'
            }
            '.'
            a {
              title 'For interoperability'
              href '#dt-interop'
              'For\ninteroperability'
            }
            ', the empty-element tag'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'SHOULD'
            }
            'be used, and'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'SHOULD'
            }
            'only be used, for elements which are declared\nEMPTY.'
          }
          p {
            'Examples of empty elements:'
          }
          div {
            class 'exampleInner'
            pre {
              '<IMG align="left"\n src="http://www.w3.org/Icons/WWW/w3c_home" />\n<br></br>\n<br/>'
            }
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'elemdecls'
              id 'elemdecls'
            }
            '3.2 Element Type Declarations'
          }
          p {
            'The'
            a {
              title 'Element'
              href '#dt-element'
              'element'
            }
            'structure of an'
            a {
              title 'XML Document'
              href '#dt-xml-doc'
              'XML document'
            }
            'may, for'
            a {
              title 'Validity'
              href '#dt-valid'
              'validation'
            }
            'purposes, be constrained using element type and attribute-list declarations.\nAn element type declaration constrains the element\'s'
            a {
              title 'Content'
              href '#dt-content'
              'content'
            }
            '.'
          }
          p {
            'Element type declarations often constrain which element types can appear\nas'
            a {
              title 'Parent/Child'
              href '#dt-parentchild'
              'children'
            }
            'of the element. At user\noption, an XML processor'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MAY'
            }
            'issue a warning when a declaration mentions an\nelement type for which no declaration is provided, but this is not an error.'
          }
          p {
            '['
            a {
              name 'dt-eldecl'
              id 'dt-eldecl'
              title 'Element Type declaration'
              'Definition'
            }
            ': An'
            b {
              'element\ntype declaration'
            }
            'takes the form:]'
          }
          h5 {
            a {
              name 'd0e2553'
              id 'd0e2553'
            }
            'Element Type Declaration'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-elementdecl'
                    id 'NT-elementdecl'
                  }
                  '[45]'
                }
                td {
                  code {
                    'elementdecl'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'<!ELEMENT\''
                    a {
                      href '#NT-S'
                      'S'
                    }
                    a {
                      href '#NT-Name'
                      'Name'
                    }
                    a {
                      href '#NT-S'
                      'S'
                    }
                    a {
                      href '#NT-contentspec'
                      'contentspec'
                    }
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '?\n\'>\''
                  }
                }
                td {
                  a {
                    href '#EDUnique'
                    '[VC: Unique Element Type Declaration]'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-contentspec'
                    id 'NT-contentspec'
                  }
                  '[46]'
                }
                td {
                  code {
                    'contentspec'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'EMPTY\' | \'ANY\' |'
                    a {
                      href '#NT-Mixed'
                      'Mixed'
                    }
                    '|'
                    a {
                      href '#NT-children'
                      'children'
                    }
                  }
                }
              }
            }
          }
          p {
            'where the'
            a {
              href '#NT-Name'
              'Name'
            }
            'gives the element type being declared.'
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'EDUnique'
                id 'EDUnique'
              }
              b {
                'Validity constraint: Unique Element Type Declaration'
              }
            }
            p {
              'An element type'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST NOT'
              }
              'be declared more than once.'
            }
          }
          p {
            'Examples of element type declarations:'
          }
          div {
            class 'exampleInner'
            pre {
              '<!ELEMENT br EMPTY>\n<!ELEMENT p (#PCDATA|emph)* >\n<!ELEMENT %name.para; %content.para; >\n<!ELEMENT container ANY>'
            }
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'sec-element-content'
                id 'sec-element-content'
              }
              '3.2.1 Element Content'
            }
            p {
              '['
              a {
                name 'dt-elemcontent'
                id 'dt-elemcontent'
                title 'Element content'
                'Definition'
              }
              ': An element'
              a {
                title 'Start-Tag'
                href '#dt-stag'
                'type'
              }
              'has'
              b {
                'element content'
              }
              'when elements\nof that type'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'contain only'
              a {
                title 'Parent/Child'
                href '#dt-parentchild'
                'child'
              }
              'elements (no character data), optionally separated by white space (characters\nmatching the nonterminal'
              a {
                href '#NT-S'
                'S'
              }
              ').]\n\t\t\t\t\t\t['
              a {
                name 'dt-content-model'
                id 'dt-content-model'
                title 'Content model'
                'Definition'
              }
              ': In this case, the constraint includes a'
              b {
                'content\nmodel'
              }
              ', a simple grammar governing the allowed types of the\nchild elements and the order in which they are allowed to appear.]\nThe grammar is built on content particles ('
              a {
                href '#NT-cp'
                'cp'
              }
              's), which\nconsist of names, choice lists of content particles, or sequence lists of\ncontent particles:'
            }
            h5 {
              a {
                name 'd0e2638'
                id 'd0e2638'
              }
              'Element-content Models'
            }
            table {
              class 'scrap'
              summary 'Scrap'
              tbody {
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-children'
                      id 'NT-children'
                    }
                    '[47]'
                  }
                  td {
                    code {
                      'children'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      '('
                      a {
                        href '#NT-choice'
                        'choice'
                      }
                      '|'
                      a {
                        href '#NT-seq'
                        'seq'
                      }
                      ')\n(\'?\' | \'*\' | \'+\')?'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-cp'
                      id 'NT-cp'
                    }
                    '[48]'
                  }
                  td {
                    code {
                      'cp'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      '('
                      a {
                        href '#NT-Name'
                        'Name'
                      }
                      '|'
                      a {
                        href '#NT-choice'
                        'choice'
                      }
                      '|'
                      a {
                        href '#NT-seq'
                        'seq'
                      }
                      ') (\'?\' | \'*\' | \'+\')?'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-choice'
                      id 'NT-choice'
                    }
                    '[49]'
                  }
                  td {
                    code {
                      'choice'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      '\'(\''
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '?'
                      a {
                        href '#NT-cp'
                        'cp'
                      }
                      '('
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '? \'|\''
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '?'
                      a {
                        href '#NT-cp'
                        'cp'
                      }
                      ')+'
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '? \')\''
                    }
                  }
                  td {
                    a {
                      href '#vc-PEinGroup'
                      '[VC: Proper Group/PE Nesting]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-seq'
                      id 'NT-seq'
                    }
                    '[50]'
                  }
                  td {
                    code {
                      'seq'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      '\'(\''
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '?'
                      a {
                        href '#NT-cp'
                        'cp'
                      }
                      '('
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '? \',\''
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '?'
                      a {
                        href '#NT-cp'
                        'cp'
                      }
                      ')*'
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '? \')\''
                    }
                  }
                  td {
                    a {
                      href '#vc-PEinGroup'
                      '[VC: Proper Group/PE Nesting]'
                    }
                  }
                }
              }
            }
            p {
              'where each'
              a {
                href '#NT-Name'
                'Name'
              }
              'is the type of an element which\nmay appear as a'
              a {
                title 'Parent/Child'
                href '#dt-parentchild'
                'child'
              }
              '. Any content\nparticle in a choice list may appear in the'
              a {
                title 'Element content'
                href '#dt-elemcontent'
                'element\ncontent'
              }
              'at the location where the choice list appears in the grammar;\ncontent particles occurring in a sequence list'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'each appear in the'
              a {
                title 'Element content'
                href '#dt-elemcontent'
                'element content'
              }
              'in the order given in the list.\nThe optional character following a name or list governs whether the element\nor the content particles in the list may occur one or more ('
              code {
                '+'
              }
              '),\nzero or more ('
              code {
                '*'
              }
              '), or zero or one times ('
              code {
                '?'
              }
              '). The\nabsence of such an operator means that the element or content particle'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'appear exactly once. This syntax and meaning are identical to those used in\nthe productions in this specification.'
            }
            p {
              'The content of an element matches a content model if and only if it is\npossible to trace out a path through the content model, obeying the sequence,\nchoice, and repetition operators and matching each element in the content\nagainst an element type in the content model.'
              a {
                title 'For Compatibility'
                href '#dt-compat'
                'For\ncompatibility'
              }
              ', it is an error if the content model\nallows an element to match more than one occurrence of an element type in the\ncontent model. For more information, see'
              a {
                href '#determinism'
                b {
                  'E Deterministic Content Models'
                }
              }
              '.'
            }
            div {
              class 'constraint'
              p {
                class 'prefix'
                a {
                  name 'vc-PEinGroup'
                  id 'vc-PEinGroup'
                }
                b {
                  'Validity constraint: Proper Group/PE Nesting'
                }
              }
              p {
                'Parameter-entity'
                a {
                  title 'Replacement Text'
                  href '#dt-repltext'
                  'replacement text'
                }
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'be properly nested with parenthesized\ngroups. That is to say, if either of the opening or closing parentheses in\na'
                a {
                  href '#NT-choice'
                  'choice'
                }
                ','
                a {
                  href '#NT-seq'
                  'seq'
                }
                ', or'
                a {
                  href '#NT-Mixed'
                  'Mixed'
                }
                'construct is contained in the replacement text for a'
                a {
                  title 'Parameter-entity reference'
                  href '#dt-PERef'
                  'parameter\nentity'
                }
                ', both'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'be contained in the same replacement text.'
              }
              p {
                a {
                  title 'For interoperability'
                  href '#dt-interop'
                  'For interoperability'
                }
                ', if a parameter-entity reference\nappears in a'
                a {
                  href '#NT-choice'
                  'choice'
                }
                ','
                a {
                  href '#NT-seq'
                  'seq'
                }
                ', or'
                a {
                  href '#NT-Mixed'
                  'Mixed'
                }
                'construct, its replacement text'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'SHOULD'
                }
                'contain at\nleast one non-blank character, and neither the first nor last non-blank character\nof the replacement text'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'SHOULD'
                }
                'be a connector ('
                code {
                  '|'
                }
                'or'
                code {
                  ','
                }
                ').'
              }
            }
            p {
              'Examples of element-content models:'
            }
            div {
              class 'exampleInner'
              pre {
                '<!ELEMENT spec (front, body, back?)>\n<!ELEMENT div1 (head, (p | list | note)*, div2*)>\n<!ELEMENT dictionary-body (%div.mix; | %dict.mix;)*>'
              }
            }
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'sec-mixed-content'
                id 'sec-mixed-content'
              }
              '3.2.2 Mixed Content'
            }
            p {
              '['
              a {
                name 'dt-mixed'
                id 'dt-mixed'
                title 'Mixed Content'
                'Definition'
              }
              ': An element'
              a {
                title 'Start-Tag'
                href '#dt-stag'
                'type'
              }
              'has'
              b {
                'mixed content'
              }
              'when elements of that type may contain character\ndata, optionally interspersed with'
              a {
                title 'Parent/Child'
                href '#dt-parentchild'
                'child'
              }
              'elements.] In this case, the types of the child elements may be constrained,\nbut not their order or their number of occurrences:'
            }
            h5 {
              a {
                name 'd0e2826'
                id 'd0e2826'
              }
              'Mixed-content Declaration'
            }
            table {
              class 'scrap'
              summary 'Scrap'
              tbody {
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-Mixed'
                      id 'NT-Mixed'
                    }
                    '[51]'
                  }
                  td {
                    code {
                      'Mixed'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      '\'(\''
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '? \'#PCDATA\' ('
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '?\n\'|\''
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '?'
                      a {
                        href '#NT-Name'
                        'Name'
                      }
                      ')*'
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '?\n\')*\''
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    code {
                      '| \'(\''
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '? \'#PCDATA\''
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '? \')\''
                    }
                  }
                  td {
                    a {
                      href '#vc-PEinGroup'
                      '[VC: Proper Group/PE Nesting]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    a {
                      href '#vc-MixedChildrenUnique'
                      '[VC: No Duplicate Types]'
                    }
                  }
                }
              }
            }
            p {
              'where the'
              a {
                href '#NT-Name'
                'Name'
              }
              's give the types of elements that\nmay appear as children. The\nkeyword'
              b {
                '#PCDATA'
              }
              'derives historically from the term "parsed\ncharacter data."'
            }
            div {
              class 'constraint'
              p {
                class 'prefix'
                a {
                  name 'vc-MixedChildrenUnique'
                  id 'vc-MixedChildrenUnique'
                }
                b {
                  'Validity constraint: No Duplicate Types'
                }
              }
              p {
                'The\nsame name'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST NOT'
                }
                'appear more than once in a single mixed-content declaration.'
              }
            }
            p {
              'Examples of mixed content declarations:'
            }
            div {
              class 'exampleInner'
              pre {
                '<!ELEMENT p (#PCDATA|a|ul|b|i|em)*>\n<!ELEMENT p (#PCDATA | %font; | %phrase; | %special; | %form;)* >\n<!ELEMENT b (#PCDATA)>'
              }
            }
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'attdecls'
              id 'attdecls'
            }
            '3.3 Attribute-List Declarations'
          }
          p {
            a {
              title 'Attribute'
              href '#dt-attr'
              'Attributes'
            }
            'are used to associate name-value\npairs with'
            a {
              title 'Element'
              href '#dt-element'
              'elements'
            }
            '. Attribute specifications'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST NOT'
            }
            'appear outside of'
            a {
              title 'Start-Tag'
              href '#dt-stag'
              'start-tags'
            }
            'and'
            a {
              title 'empty-element tag'
              href '#dt-eetag'
              'empty-element tags'
            }
            '; thus, the productions used to\nrecognize them appear in'
            a {
              href '#sec-starttags'
              b {
                '3.1 Start-Tags, End-Tags, and Empty-Element Tags'
              }
            }
            '. Attribute-list declarations\nmay be used:'
          }
          ul {
            li {
              p {
                'To define the set of attributes pertaining to a given element type.'
              }
            }
            li {
              p {
                'To establish type constraints for these attributes.'
              }
            }
            li {
              p {
                'To provide'
                a {
                  title 'Attribute Default'
                  href '#dt-default'
                  'default values'
                }
                'for\nattributes.'
              }
            }
          }
          p {
            '['
            a {
              name 'dt-attdecl'
              id 'dt-attdecl'
              title 'Attribute-List Declaration'
              'Definition'
            }
            ':'
            b {
              'Attribute-list\ndeclarations'
            }
            'specify the name, data type, and default value (if any)\nof each attribute associated with a given element type:]'
          }
          h5 {
            a {
              name 'd0e2926'
              id 'd0e2926'
            }
            'Attribute-list Declaration'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-AttlistDecl'
                    id 'NT-AttlistDecl'
                  }
                  '[52]'
                }
                td {
                  code {
                    'AttlistDecl'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'<!ATTLIST\''
                    a {
                      href '#NT-S'
                      'S'
                    }
                    a {
                      href '#NT-Name'
                      'Name'
                    }
                    a {
                      href '#NT-AttDef'
                      'AttDef'
                    }
                    '*'
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '? \'>\''
                  }
                }
              }
            }
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-AttDef'
                    id 'NT-AttDef'
                  }
                  '[53]'
                }
                td {
                  code {
                    'AttDef'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-S'
                      'S'
                    }
                    a {
                      href '#NT-Name'
                      'Name'
                    }
                    a {
                      href '#NT-S'
                      'S'
                    }
                    a {
                      href '#NT-AttType'
                      'AttType'
                    }
                    a {
                      href '#NT-S'
                      'S'
                    }
                    a {
                      href '#NT-DefaultDecl'
                      'DefaultDecl'
                    }
                  }
                }
              }
            }
          }
          p {
            'The'
            a {
              href '#NT-Name'
              'Name'
            }
            'in the'
            a {
              href '#NT-AttlistDecl'
              'AttlistDecl'
            }
            'rule is the type of an element. At user option, an XML processor'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MAY'
            }
            'issue\na warning if attributes are declared for an element type not itself declared,\nbut this is not an error. The'
            a {
              href '#NT-Name'
              'Name'
            }
            'in the'
            a {
              href '#NT-AttDef'
              'AttDef'
            }
            'rule is the name of the attribute.'
          }
          p {
            'When more than one'
            a {
              href '#NT-AttlistDecl'
              'AttlistDecl'
            }
            'is provided\nfor a given element type, the contents of all those provided are merged. When\nmore than one definition is provided for the same attribute of a given element\ntype, the first declaration is binding and later declarations are ignored.'
            a {
              title 'For interoperability'
              href '#dt-interop'
              'For interoperability,'
            }
            'writers of DTDs may choose\nto provide at most one attribute-list declaration for a given element type,\nat most one attribute definition for a given attribute name in an attribute-list\ndeclaration, and at least one attribute definition in each attribute-list\ndeclaration. For interoperability, an XML processor'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MAY'
            }
            'at user option\nissue a warning when more than one attribute-list declaration is provided\nfor a given element type, or more than one attribute definition is provided\nfor a given attribute, but this is not an error.'
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'sec-attribute-types'
                id 'sec-attribute-types'
              }
              '3.3.1 Attribute Types'
            }
            p {
              'XML attribute types are of three kinds: a string type, a set of tokenized\ntypes, and enumerated types. The string type may take any literal string as\na value; the tokenized types are more constrained.\nThe validity constraints noted in the grammar are applied after the attribute\nvalue has been normalized as described in'
              a {
                href '#AVNormalize'
                b {
                  '3.3.3 Attribute-Value Normalization'
                }
              }
              '.'
            }
            h5 {
              a {
                name 'd0e3004'
                id 'd0e3004'
              }
              'Attribute Types'
            }
            table {
              class 'scrap'
              summary 'Scrap'
              tbody {
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-AttType'
                      id 'NT-AttType'
                    }
                    '[54]'
                  }
                  td {
                    code {
                      'AttType'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      a {
                        href '#NT-StringType'
                        'StringType'
                      }
                      '|'
                      a {
                        href '#NT-TokenizedType'
                        'TokenizedType'
                      }
                      '|'
                      a {
                        href '#NT-EnumeratedType'
                        'EnumeratedType'
                      }
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-StringType'
                      id 'NT-StringType'
                    }
                    '[55]'
                  }
                  td {
                    code {
                      'StringType'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      '\'CDATA\''
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-TokenizedType'
                      id 'NT-TokenizedType'
                    }
                    '[56]'
                  }
                  td {
                    code {
                      'TokenizedType'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      '\'ID\''
                    }
                  }
                  td {
                    a {
                      href '#id'
                      '[VC: ID]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    a {
                      href '#one-id-per-el'
                      '[VC: One ID per Element Type]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    a {
                      href '#id-default'
                      '[VC: ID Attribute Default]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    code {
                      '| \'IDREF\''
                    }
                  }
                  td {
                    a {
                      href '#idref'
                      '[VC: IDREF]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    code {
                      '| \'IDREFS\''
                    }
                  }
                  td {
                    a {
                      href '#idref'
                      '[VC: IDREF]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    code {
                      '| \'ENTITY\''
                    }
                  }
                  td {
                    a {
                      href '#entname'
                      '[VC: Entity Name]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    code {
                      '| \'ENTITIES\''
                    }
                  }
                  td {
                    a {
                      href '#entname'
                      '[VC: Entity Name]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    code {
                      '| \'NMTOKEN\''
                    }
                  }
                  td {
                    a {
                      href '#nmtok'
                      '[VC: Name Token]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    code {
                      '| \'NMTOKENS\''
                    }
                  }
                  td {
                    a {
                      href '#nmtok'
                      '[VC: Name Token]'
                    }
                  }
                }
              }
            }
            div {
              class 'constraint'
              p {
                class 'prefix'
                a {
                  name 'id'
                  id 'id'
                }
                b {
                  'Validity constraint: ID'
                }
              }
              p {
                'Values of type'
                b {
                  'ID'
                }
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'match the'
                a {
                  href '#NT-Name'
                  'Name'
                }
                'production. A name'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST NOT'
                }
                'appear more than once\nin an XML document as a value of this type; i.e., ID values'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'uniquely\nidentify the elements which bear them.'
              }
            }
            div {
              class 'constraint'
              p {
                class 'prefix'
                a {
                  name 'one-id-per-el'
                  id 'one-id-per-el'
                }
                b {
                  'Validity constraint: One ID per Element Type'
                }
              }
              p {
                'An element type'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST NOT'
                }
                'have more than one ID attribute specified.'
              }
            }
            div {
              class 'constraint'
              p {
                class 'prefix'
                a {
                  name 'id-default'
                  id 'id-default'
                }
                b {
                  'Validity constraint: ID Attribute Default'
                }
              }
              p {
                'An ID attribute'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'have a declared default of'
                b {
                  '#IMPLIED'
                }
                'or'
                b {
                  '#REQUIRED'
                }
                '.'
              }
            }
            div {
              class 'constraint'
              p {
                class 'prefix'
                a {
                  name 'idref'
                  id 'idref'
                }
                b {
                  'Validity constraint: IDREF'
                }
              }
              p {
                'Values of type'
                b {
                  'IDREF'
                }
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'match the'
                a {
                  href '#NT-Name'
                  'Name'
                }
                'production, and values of type'
                b {
                  'IDREFS'
                }
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'match'
                a {
                  href '#NT-Names'
                  'Names'
                }
                '; each'
                a {
                  href '#NT-Name'
                  'Name'
                }
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'match the value of an ID attribute on some element in the XML document;\ni.e.'
                b {
                  'IDREF'
                }
                'values'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'match the value of some ID attribute.'
              }
            }
            div {
              class 'constraint'
              p {
                class 'prefix'
                a {
                  name 'entname'
                  id 'entname'
                }
                b {
                  'Validity constraint: Entity Name'
                }
              }
              p {
                'Values of type'
                b {
                  'ENTITY'
                }
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'match the'
                a {
                  href '#NT-Name'
                  'Name'
                }
                'production, values of type'
                b {
                  'ENTITIES'
                }
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'match'
                a {
                  href '#NT-Names'
                  'Names'
                }
                '; each'
                a {
                  href '#NT-Name'
                  'Name'
                }
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'match the name of an'
                a {
                  title 'Unparsed Entity'
                  href '#dt-unparsed'
                  'unparsed entity'
                }
                'declared in the'
                a {
                  title 'Document Type Declaration'
                  href '#dt-doctype'
                  'DTD'
                }
                '.'
              }
            }
            div {
              class 'constraint'
              p {
                class 'prefix'
                a {
                  name 'nmtok'
                  id 'nmtok'
                }
                b {
                  'Validity constraint: Name Token'
                }
              }
              p {
                'Values of type'
                b {
                  'NMTOKEN'
                }
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'match the'
                a {
                  href '#NT-Nmtoken'
                  'Nmtoken'
                }
                'production; values of type'
                b {
                  'NMTOKENS'
                }
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'match'
                a {
                  href '#NT-Nmtokens'
                  'Nmtokens'
                }
                '.'
              }
            }
            p {
              '['
              a {
                name 'dt-enumerated'
                id 'dt-enumerated'
                title 'Enumerated Attribute Values'
                'Definition'
              }
              ':'
              b {
                'Enumerated attributes'
              }
              'have a list of allowed values in their declaration\n\t\t\t\t\t\t]. They'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'take one of those values.  There are two kinds of enumerated attribute types:'
            }
            h5 {
              a {
                name 'd0e3200'
                id 'd0e3200'
              }
              'Enumerated Attribute Types'
            }
            table {
              class 'scrap'
              summary 'Scrap'
              tbody {
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-EnumeratedType'
                      id 'NT-EnumeratedType'
                    }
                    '[57]'
                  }
                  td {
                    code {
                      'EnumeratedType'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      a {
                        href '#NT-NotationType'
                        'NotationType'
                      }
                      '|'
                      a {
                        href '#NT-Enumeration'
                        'Enumeration'
                      }
                    }
                  }
                }
              }
              tbody {
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-NotationType'
                      id 'NT-NotationType'
                    }
                    '[58]'
                  }
                  td {
                    code {
                      'NotationType'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      '\'NOTATION\''
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '\'(\''
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '?'
                      a {
                        href '#NT-Name'
                        'Name'
                      }
                      '('
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '? \'|\''
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '?'
                      a {
                        href '#NT-Name'
                        'Name'
                      }
                      ')*'
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '? \')\''
                    }
                  }
                  td {
                    a {
                      href '#notatn'
                      '[VC: Notation Attributes]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    a {
                      href '#OneNotationPer'
                      '[VC: One Notation Per Element Type]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    a {
                      href '#NoNotationEmpty'
                      '[VC: No Notation on Empty Element]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    a {
                      href '#NoDuplicateTokens'
                      '[VC: No Duplicate Tokens]'
                    }
                  }
                }
              }
              tbody {
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-Enumeration'
                      id 'NT-Enumeration'
                    }
                    '[59]'
                  }
                  td {
                    code {
                      'Enumeration'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      '\'(\''
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '?'
                      a {
                        href '#NT-Nmtoken'
                        'Nmtoken'
                      }
                      '('
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '? \'|\''
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '?'
                      a {
                        href '#NT-Nmtoken'
                        'Nmtoken'
                      }
                      ')*'
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '? \')\''
                    }
                  }
                  td {
                    a {
                      href '#enum'
                      '[VC: Enumeration]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    a {
                      href '#NoDuplicateTokens'
                      '[VC: No Duplicate Tokens]'
                    }
                  }
                }
              }
            }
            p {
              'A'
              b {
                'NOTATION'
              }
              'attribute identifies a'
              a {
                title 'Notation'
                href '#dt-notation'
                'notation'
              }
              ',\ndeclared in the DTD with associated system and/or public identifiers, to be\nused in interpreting the element to which the attribute is attached.'
            }
            div {
              class 'constraint'
              p {
                class 'prefix'
                a {
                  name 'notatn'
                  id 'notatn'
                }
                b {
                  'Validity constraint: Notation Attributes'
                }
              }
              p {
                'Values of this type'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'match one of the'
                a {
                  href '#Notations'
                  cite {
                    'notation'
                  }
                }
                'names\nincluded in the declaration; all notation names in the declaration'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'be\ndeclared.'
              }
            }
            div {
              class 'constraint'
              p {
                class 'prefix'
                a {
                  name 'OneNotationPer'
                  id 'OneNotationPer'
                }
                b {
                  'Validity constraint: One Notation Per Element Type'
                }
              }
              p {
                'An element type'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST NOT'
                }
                'have more than one'
                b {
                  'NOTATION'
                }
                'attribute specified.'
              }
            }
            div {
              class 'constraint'
              p {
                class 'prefix'
                a {
                  name 'NoNotationEmpty'
                  id 'NoNotationEmpty'
                }
                b {
                  'Validity constraint: No Notation on Empty Element'
                }
              }
              p {
                a {
                  title 'For Compatibility'
                  href '#dt-compat'
                  'For compatibility'
                }
                ',\nan attribute of type'
                b {
                  'NOTATION'
                }
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST NOT'
                }
                'be declared on an element\ndeclared'
                b {
                  'EMPTY'
                }
                '.'
              }
            }
            div {
              class 'constraint'
              p {
                class 'prefix'
                a {
                  name 'NoDuplicateTokens'
                  id 'NoDuplicateTokens'
                }
                b {
                  'Validity constraint: No Duplicate Tokens'
                }
              }
              p {
                'The notation names in a single'
                a {
                  href '#NT-NotationType'
                  'NotationType'
                }
                'attribute declaration, as well as the'
                a {
                  href '#NT-Nmtoken'
                  'NmToken'
                }
                's in a single'
                a {
                  href '#NT-Enumeration'
                  'Enumeration'
                }
                'attribute declaration,'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'all be distinct.'
              }
            }
            div {
              class 'constraint'
              p {
                class 'prefix'
                a {
                  name 'enum'
                  id 'enum'
                }
                b {
                  'Validity constraint: Enumeration'
                }
              }
              p {
                'Values of this type'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'match\none of the'
                a {
                  href '#NT-Nmtoken'
                  'Nmtoken'
                }
                'tokens in the declaration.'
              }
            }
            p {
              a {
                title 'For interoperability'
                href '#dt-interop'
                'For interoperability,'
              }
              'the same'
              a {
                href '#NT-Nmtoken'
                'Nmtoken'
              }
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'SHOULD NOT'
              }
              'occur more than once in the enumerated\nattribute types of a single element type.'
            }
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'sec-attr-defaults'
                id 'sec-attr-defaults'
              }
              '3.3.2 Attribute Defaults'
            }
            p {
              'An'
              a {
                title 'Attribute-List Declaration'
                href '#dt-attdecl'
                'attribute declaration'
              }
              'provides information\non whether the attribute\'s presence is'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'REQUIRED'
              }
              ', and if not, how an XML processor\nis to react if a declared attribute is absent in a document.'
            }
            h5 {
              a {
                name 'd0e3369'
                id 'd0e3369'
              }
              'Attribute Defaults'
            }
            table {
              class 'scrap'
              summary 'Scrap'
              tbody {
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-DefaultDecl'
                      id 'NT-DefaultDecl'
                    }
                    '[60]'
                  }
                  td {
                    code {
                      'DefaultDecl'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      '\'#REQUIRED\' | \'#IMPLIED\''
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    code {
                      '| ((\'#FIXED\''
                      a {
                        href '#NT-S'
                        'S'
                      }
                      ')?'
                      a {
                        href '#NT-AttValue'
                        'AttValue'
                      }
                      ')'
                    }
                  }
                  td {
                    a {
                      href '#RequiredAttr'
                      '[VC: Required Attribute]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    a {
                      href '#defattrvalid'
                      '[VC: Attribute Default Value Syntactically Correct]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    a {
                      href '#CleanAttrVals'
                      '[WFC: No < in Attribute Values]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    a {
                      href '#FixedAttr'
                      '[VC: Fixed Attribute Default]'
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    a {
                      href '#NoExternalRefs'
                      '[WFC: No External Entity References]'
                    }
                  }
                }
              }
            }
            p {
              'In an attribute declaration,'
              b {
                '#REQUIRED'
              }
              'means that the attribute'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'always be provided,'
              b {
                '#IMPLIED'
              }
              'that no default value is provided.\n\n\t\t\t\t\t\t['
              a {
                name 'dt-default'
                id 'dt-default'
                title 'Attribute Default'
                'Definition'
              }
              ': If\nthe declaration is neither'
              b {
                '#REQUIRED'
              }
              'nor'
              b {
                '#IMPLIED'
              }
              ', then\nthe'
              a {
                href '#NT-AttValue'
                'AttValue'
              }
              'value contains the declared'
              b {
                'default'
              }
              'value; the'
              b {
                '#FIXED'
              }
              'keyword states that the attribute'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'always have\nthe default value.\nWhen an XML processor encounters\nan element\nwithout a specification for an attribute for which it has read a default\nvalue declaration, it'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'report the attribute with the declared default\nvalue to the application.]'
            }
            div {
              class 'constraint'
              p {
                class 'prefix'
                a {
                  name 'RequiredAttr'
                  id 'RequiredAttr'
                }
                b {
                  'Validity constraint: Required Attribute'
                }
              }
              p {
                'If the default\ndeclaration is the keyword'
                b {
                  '#REQUIRED'
                }
                ', then the attribute'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'be\nspecified for all elements of the type in the attribute-list declaration.'
              }
            }
            div {
              class 'constraint'
              p {
                class 'prefix'
                a {
                  name 'defattrvalid'
                  id 'defattrvalid'
                }
                b {
                  'Validity constraint: Attribute Default Value Syntactically Correct'
                }
              }
              p {
                'The declared default value'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'meet the syntactic\nconstraints of the declared attribute type. That is, the default value of an attribute:'
              }
              ul {
                li {
                  p {
                    'of type IDREF or ENTITY must match the'
                    a {
                      href '#NT-Name'
                      'Name'
                    }
                    'production;'
                  }
                }
                li {
                  p {
                    'of type IDREFS or ENTITIES must match the'
                    a {
                      href '#NT-Names'
                      'Names'
                    }
                    'production;'
                  }
                }
                li {
                  p {
                    'of type NMTOKEN must match the'
                    a {
                      href '#NT-Nmtoken'
                      'Nmtoken'
                    }
                    'production;'
                  }
                }
                li {
                  p {
                    'of type NMTOKENS must match the'
                    a {
                      href '#NT-Nmtokens'
                      'Nmtokens'
                    }
                    'production;'
                  }
                }
                li {
                  p {
                    'of an'
                    a {
                      href '#NT-EnumeratedType'
                      'enumerated type'
                    }
                    '(either a'
                    a {
                      href '#NT-NotationType'
                      'NOTATION'
                    }
                    'type or an'
                    a {
                      href '#NT-Enumeration'
                      'enumeration'
                    }
                    ') must match one of the enumerated values.'
                  }
                }
              }
              p {
                'Note that only the\nsyntactic constraints of the type are required here; other constraints (e.g.\nthat the value be the name of a declared unparsed entity, for an attribute of\ntype ENTITY) will be reported by a validating\nparser only if an element without a specification for this attribute\nactually occurs.'
              }
            }
            div {
              class 'constraint'
              p {
                class 'prefix'
                a {
                  name 'FixedAttr'
                  id 'FixedAttr'
                }
                b {
                  'Validity constraint: Fixed Attribute Default'
                }
              }
              p {
                'If an attribute\nhas a default value declared with the'
                b {
                  '#FIXED'
                }
                'keyword, instances of\nthat attribute'
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'match the default value.'
              }
            }
            p {
              'Examples of attribute-list declarations:'
            }
            div {
              class 'exampleInner'
              pre {
                '<!ATTLIST termdef\n          id      ID      #REQUIRED\n          name    CDATA   #IMPLIED>\n<!ATTLIST list\n          type    (bullets|ordered|glossary)  "ordered">\n<!ATTLIST form\n          method  CDATA   #FIXED "POST">'
              }
            }
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'AVNormalize'
                id 'AVNormalize'
              }
              '3.3.3 Attribute-Value Normalization'
            }
            p {
              'Before the value of an attribute is passed to the application or checked\nfor validity, the XML processor'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'normalize the attribute value by applying\nthe algorithm below, or by using some other method such that the value passed\nto the application is the same as that produced by the algorithm.'
            }
            ol {
              class 'enumar'
              li {
                p {
                  'All line breaks'
                  em {
                    class 'rfc2119'
                    title 'Keyword in RFC 2119 context'
                    'MUST'
                  }
                  'have been normalized on input to #xA as described\nin'
                  a {
                    href '#sec-line-ends'
                    b {
                      '2.11 End-of-Line Handling'
                    }
                  }
                  ', so the rest of this algorithm operates\non text normalized in this way.'
                }
              }
              li {
                p {
                  'Begin with a normalized value consisting of the empty string.'
                }
              }
              li {
                p {
                  'For each character, entity reference, or character reference in the\nunnormalized attribute value, beginning with the first and continuing to the\nlast, do the following:'
                }
                ul {
                  li {
                    p {
                      'For a character reference, append the referenced character to the\nnormalized value.'
                    }
                  }
                  li {
                    p {
                      'For an entity reference, recursively apply step 3 of this algorithm\nto the replacement text of the entity.'
                    }
                  }
                  li {
                    p {
                      'For a white space character (#x20, #xD, #xA, #x9), append a space\ncharacter (#x20) to the normalized value.'
                    }
                  }
                  li {
                    p {
                      'For another character, append the character to the normalized value.'
                    }
                  }
                }
              }
            }
            p {
              'If the attribute type is not CDATA, then the XML processor'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'further\nprocess the normalized attribute value by discarding any leading and trailing\nspace (#x20) characters, and by replacing sequences of space (#x20) characters\nby a single space (#x20) character.'
            }
            p {
              'Note that if the unnormalized attribute value contains a character reference\nto a white space character other than space (#x20), the normalized value contains\nthe referenced character itself (#xD, #xA or #x9). This contrasts with the\ncase where the unnormalized value contains a white space character (not a\nreference), which is replaced with a space character (#x20) in the normalized\nvalue and also contrasts with the case where the unnormalized value contains\nan entity reference whose replacement text contains a white space character;\nbeing recursively processed, the white space character is replaced with a\nspace character (#x20) in the normalized value.'
            }
            p {
              'All attributes for which no declaration has been read'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'SHOULD'
              }
              'be treated\nby a non-validating processor as if declared'
              b {
                'CDATA'
              }
              '.'
            }
            p {
              'It is an error if an'
              a {
                title 'Attribute Value'
                href '#dt-attrval'
                'attribute\nvalue'
              }
              'contains a'
              a {
                title 'Entity Reference'
                href '#dt-entref'
                'reference'
              }
              'to an\nentity for which no declaration has been read.'
            }
            p {
              'Following are examples of attribute normalization. Given the following\ndeclarations:'
            }
            div {
              class 'exampleInner'
              pre {
                '<!ENTITY d "&#xD;">\n<!ENTITY a "&#xA;">\n<!ENTITY da "&#xD;&#xA;">'
              }
            }
            p {
              'the attribute specifications in the left column below would be normalized\nto the character sequences of the middle column if the attribute'
              code {
                'a'
              }
              'is declared'
              b {
                'NMTOKENS'
              }
              'and to those of the right columns if'
              code {
                'a'
              }
              'is declared'
              b {
                'CDATA'
              }
              '.'
            }
            table {
              border '1'
              frame 'border'
              thead {
                tr {
                  th {
                    'Attribute specification'
                  }
                  th {
                    'a is NMTOKENS'
                  }
                  th {
                    'a is CDATA'
                  }
                }
              }
              tbody {
                tr {
                  td {
                    div {
                      class 'exampleInner'
                      pre {
                        'a="\n\nxyz"'
                      }
                    }
                  }
                  td {
                    div {
                      class 'exampleInner'
                      pre {
                        'x y z'
                      }
                    }
                  }
                  td {
                    div {
                      class 'exampleInner'
                      pre {
                        '#x20 #x20 x y z'
                      }
                    }
                  }
                }
                tr {
                  td {
                    div {
                      class 'exampleInner'
                      pre {
                        'a="&d;&d;A&a;&#x20;&a;B&da;"'
                      }
                    }
                  }
                  td {
                    div {
                      class 'exampleInner'
                      pre {
                        'A #x20 B'
                      }
                    }
                  }
                  td {
                    div {
                      class 'exampleInner'
                      pre {
                        '#x20 #x20 A #x20 #x20 #x20 B #x20 #x20'
                      }
                    }
                  }
                }
                tr {
                  td {
                    div {
                      class 'exampleInner'
                      pre {
                        'a=\n"&#xd;&#xd;A&#xa;&#xa;B&#xd;&#xa;"'
                      }
                    }
                  }
                  td {
                    div {
                      class 'exampleInner'
                      pre {
                        '#xD #xD A #xA #xA B #xD #xA'
                      }
                    }
                  }
                  td {
                    div {
                      class 'exampleInner'
                      pre {
                        '#xD #xD A #xA #xA B #xD #xA'
                      }
                    }
                  }
                }
              }
            }
            p {
              'Note that the last example is invalid (but well-formed) if'
              code {
                'a'
              }
              'is declared to be of type'
              b {
                'NMTOKENS'
              }
              '.'
            }
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-condition-sect'
              id 'sec-condition-sect'
            }
            '3.4 Conditional Sections'
          }
          p {
            '['
            a {
              name 'dt-cond-section'
              id 'dt-cond-section'
              title 'conditional section'
              'Definition'
            }
            ':'
            b {
              'Conditional\nsections'
            }
            'are portions of the'
            a {
              title 'Document Type Declaration'
              href '#dt-doctype'
              'document type\ndeclaration external subset'
            }
            'or\nof external parameter entities which are included in, or excluded from,\nthe logical structure of the DTD based on the keyword which governs them.]'
          }
          h5 {
            a {
              name 'd0e3658'
              id 'd0e3658'
            }
            'Conditional Section'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-conditionalSect'
                    id 'NT-conditionalSect'
                  }
                  '[61]'
                }
                td {
                  code {
                    'conditionalSect'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-includeSect'
                      'includeSect'
                    }
                    '|'
                    a {
                      href '#NT-ignoreSect'
                      'ignoreSect'
                    }
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-includeSect'
                    id 'NT-includeSect'
                  }
                  '[62]'
                }
                td {
                  code {
                    'includeSect'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'<![\''
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '? \'INCLUDE\''
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '? \'[\''
                    a {
                      href '#NT-extSubsetDecl'
                      'extSubsetDecl'
                    }
                    '\']]>\''
                  }
                }
                td {
                  a {
                    href '#condsec-nesting'
                    '[VC: Proper Conditional Section/PE Nesting]'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-ignoreSect'
                    id 'NT-ignoreSect'
                  }
                  '[63]'
                }
                td {
                  code {
                    'ignoreSect'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'<![\''
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '? \'IGNORE\''
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '? \'[\''
                    a {
                      href '#NT-ignoreSectContents'
                      'ignoreSectContents'
                    }
                    '*\n\']]>\''
                  }
                }
                td {
                  a {
                    href '#condsec-nesting'
                    '[VC: Proper Conditional Section/PE Nesting]'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-ignoreSectContents'
                    id 'NT-ignoreSectContents'
                  }
                  '[64]'
                }
                td {
                  code {
                    'ignoreSectContents'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-Ignore'
                      'Ignore'
                    }
                    '(\'<![\''
                    a {
                      href '#NT-ignoreSectContents'
                      'ignoreSectContents'
                    }
                    '\']]>\''
                    a {
                      href '#NT-Ignore'
                      'Ignore'
                    }
                    ')*'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-Ignore'
                    id 'NT-Ignore'
                  }
                  '[65]'
                }
                td {
                  code {
                    'Ignore'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-Char'
                      'Char'
                    }
                    '* - ('
                    a {
                      href '#NT-Char'
                      'Char'
                    }
                    '*\n(\'<![\' | \']]>\')'
                    a {
                      href '#NT-Char'
                      'Char'
                    }
                    '*)'
                  }
                }
              }
            }
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'condsec-nesting'
                id 'condsec-nesting'
              }
              b {
                'Validity constraint: Proper Conditional Section/PE Nesting'
              }
            }
            p {
              'If any of the "'
              code {
                '<!['
              }
              '",\n"'
              code {
                '['
              }
              '", or "'
              code {
                ']]>'
              }
              '" of a conditional section is contained\nin the replacement text for a parameter-entity reference, all of them'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'be contained in the same replacement text.'
            }
          }
          p {
            'Like the internal and external DTD subsets, a conditional section may contain\none or more complete declarations, comments, processing instructions, or nested\nconditional sections, intermingled with white space.'
          }
          p {
            'If the keyword of the conditional section is'
            b {
              'INCLUDE'
            }
            ', then the\ncontents of the conditional section'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be processed as part of the DTD. If the keyword of\nthe conditional section is'
            b {
              'IGNORE'
            }
            ', then the contents of the conditional\nsection'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'NOT'
            }
            'be processed as part of the DTD.\nIf a conditional section with a keyword of'
            b {
              'INCLUDE'
            }
            'occurs within\na larger conditional section with a keyword of'
            b {
              'IGNORE'
            }
            ', both the outer\nand the inner conditional sections'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be ignored. The contents\nof an ignored conditional section'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be parsed by ignoring all characters after\nthe "'
            code {
              '['
            }
            '" following the keyword, except conditional section starts\n"'
            code {
              '<!['
            }
            '" and ends "'
            code {
              ']]>'
            }
            '", until the matching conditional\nsection end is found. Parameter entity references'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST NOT'
            }
            'be recognized in this\nprocess.'
          }
          p {
            'If the keyword of the conditional section is a parameter-entity reference,\nthe parameter entity'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be replaced by its content before the processor\ndecides whether to include or ignore the conditional section.'
          }
          p {
            'An example:'
          }
          div {
            class 'exampleInner'
            pre {
              '<!ENTITY % draft \'INCLUDE\' >\n<!ENTITY % final \'IGNORE\' >\n\n<![%draft;[\n<!ELEMENT book (comments*, title, body, supplements?)>\n]]>\n<![%final;[\n<!ELEMENT book (title, body, supplements?)>\n]]>'
            }
          }
        }
      }
      div {
        class 'div1'
        h2 {
          a {
            name 'sec-physical-struct'
            id 'sec-physical-struct'
          }
          '4 Physical Structures'
        }
        p {
          '['
          a {
            name 'dt-entity'
            id 'dt-entity'
            title 'Entity'
            'Definition'
          }
          ': An XML document may consist of one\nor many storage units. These\nare called'
          b {
            'entities'
          }
          '; they all have'
          b {
            'content'
          }
          'and are\nall (except for the'
          a {
            title 'Document Entity'
            href '#dt-docent'
            'document entity'
          }
          'and\nthe'
          a {
            title 'Document Type Declaration'
            href '#dt-doctype'
            'external DTD subset'
          }
          ') identified by\nentity'
          b {
            'name'
          }
          '.] Each XML document has one entity\ncalled the'
          a {
            title 'Document Entity'
            href '#dt-docent'
            'document entity'
          }
          ', which serves\nas the starting point for the'
          a {
            title 'XML Processor'
            href '#dt-xml-proc'
            'XML processor'
          }
          'and may contain the whole document.'
        }
        p {
          'Entities may be either parsed or unparsed. ['
          a {
            name 'dt-parsedent'
            id 'dt-parsedent'
            title 'Text Entity'
            'Definition'
          }
          ': The contents of a'
          b {
            'parsed\nentity'
          }
          'are referred to as its'
          a {
            title 'Replacement Text'
            href '#dt-repltext'
            'replacement\ntext'
          }
          '; this'
          a {
            title 'Text'
            href '#dt-text'
            'text'
          }
          'is considered an\nintegral part of the document.]'
        }
        p {
          '['
          a {
            name 'dt-unparsed'
            id 'dt-unparsed'
            title 'Unparsed Entity'
            'Definition'
          }
          ': An'
          b {
            'unparsed entity'
          }
          'is a resource whose contents may or may not be'
          a {
            title 'Text'
            href '#dt-text'
            'text'
          }
          ',\nand if text, may\nbe other than XML. Each unparsed entity has an associated'
          a {
            title 'Notation'
            href '#dt-notation'
            'notation'
          }
          ', identified by name. Beyond a requirement\nthat an XML processor make the identifiers for the entity and notation available\nto the application, XML places no constraints on the contents of unparsed\nentities.]'
        }
        p {
          'Parsed entities are invoked by name using entity references; unparsed entities\nby name, given in the value of'
          b {
            'ENTITY'
          }
          'or'
          b {
            'ENTITIES'
          }
          'attributes.'
        }
        p {
          '['
          a {
            name 'gen-entity'
            id 'gen-entity'
            title 'general entity'
            'Definition'
          }
          ':'
          b {
            'General entities'
          }
          'are entities for use within the document content. In this specification, general\nentities are sometimes referred to with the unqualified term'
          em {
            'entity'
          }
          'when this leads to no ambiguity.]\n\t\t\t\t['
          a {
            name 'dt-PE'
            id 'dt-PE'
            title 'Parameter entity'
            'Definition'
          }
          ':'
          b {
            'Parameter\nentities'
          }
          'are parsed entities for use within the DTD.]\nThese two types of entities use different forms of reference and are recognized\nin different contexts. Furthermore, they occupy different namespaces; a parameter\nentity and a general entity with the same name are two distinct entities.'
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-references'
              id 'sec-references'
            }
            '4.1 Character and Entity References'
          }
          p {
            '['
            a {
              name 'dt-charref'
              id 'dt-charref'
              title 'Character Reference'
              'Definition'
            }
            ':  A'
            b {
              'character\nreference'
            }
            'refers to a specific character in the ISO/IEC 10646 character\nset, for example one not directly accessible from available input devices.]'
          }
          h5 {
            a {
              name 'd0e3895'
              id 'd0e3895'
            }
            'Character Reference'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-CharRef'
                    id 'NT-CharRef'
                  }
                  '[66]'
                }
                td {
                  code {
                    'CharRef'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'&#\' [0-9]+ \';\''
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                }
                td {
                }
                td {
                }
                td {
                  code {
                    '| \'&#x\' [0-9a-fA-F]+ \';\''
                  }
                }
                td {
                  a {
                    href '#wf-Legalchar'
                    '[WFC: Legal Character]'
                  }
                }
              }
            }
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'wf-Legalchar'
                id 'wf-Legalchar'
              }
              b {
                'Well-formedness constraint: Legal Character'
              }
            }
            p {
              'Characters referred\nto using character references'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'match the production for'
              a {
                href '#NT-Char'
                'Char'
              }
              '.'
            }
          }
          p {
            'If the character reference begins with "'
            code {
              '&#x'
            }
            '",\nthe digits and letters up to the terminating'
            code {
              ';'
            }
            'provide a hexadecimal\nrepresentation of the character\'s code point in ISO/IEC 10646. If it begins\njust with "'
            code {
              '&#'
            }
            '", the digits up to the terminating'
            code {
              ';'
            }
            'provide a decimal representation of the character\'s code point.'
          }
          p {
            '['
            a {
              name 'dt-entref'
              id 'dt-entref'
              title 'Entity Reference'
              'Definition'
            }
            ': An'
            b {
              'entity reference'
            }
            'refers to the content of a named entity.]\n\t\t\t\t\t['
            a {
              name 'dt-GERef'
              id 'dt-GERef'
              title 'General Entity Reference'
              'Definition'
            }
            ': References to parsed general entities use\nampersand ('
            code {
              '&'
            }
            ') and semicolon ('
            code {
              ';'
            }
            ') as delimiters.]\n\t\t\t\t\t['
            a {
              name 'dt-PERef'
              id 'dt-PERef'
              title 'Parameter-entity reference'
              'Definition'
            }
            ':'
            b {
              'Parameter-entity references'
            }
            'use percent-sign ('
            code {
              '%'
            }
            ') and semicolon ('
            code {
              ';'
            }
            ') as delimiters.]'
          }
          h5 {
            a {
              name 'd0e3966'
              id 'd0e3966'
            }
            'Entity Reference'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-Reference'
                    id 'NT-Reference'
                  }
                  '[67]'
                }
                td {
                  code {
                    'Reference'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-EntityRef'
                      'EntityRef'
                    }
                    '|'
                    a {
                      href '#NT-CharRef'
                      'CharRef'
                    }
                  }
                }
              }
            }
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-EntityRef'
                    id 'NT-EntityRef'
                  }
                  '[68]'
                }
                td {
                  code {
                    'EntityRef'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'&\''
                    a {
                      href '#NT-Name'
                      'Name'
                    }
                    '\';\''
                  }
                }
                td {
                  a {
                    href '#wf-entdeclared'
                    '[WFC: Entity Declared]'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                }
                td {
                }
                td {
                }
                td {
                }
                td {
                  a {
                    href '#vc-entdeclared'
                    '[VC: Entity Declared]'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                }
                td {
                }
                td {
                }
                td {
                }
                td {
                  a {
                    href '#textent'
                    '[WFC: Parsed Entity]'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                }
                td {
                }
                td {
                }
                td {
                }
                td {
                  a {
                    href '#norecursion'
                    '[WFC: No Recursion]'
                  }
                }
              }
            }
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-PEReference'
                    id 'NT-PEReference'
                  }
                  '[69]'
                }
                td {
                  code {
                    'PEReference'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'%\''
                    a {
                      href '#NT-Name'
                      'Name'
                    }
                    '\';\''
                  }
                }
                td {
                  a {
                    href '#vc-entdeclared'
                    '[VC: Entity Declared]'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                }
                td {
                }
                td {
                }
                td {
                }
                td {
                  a {
                    href '#norecursion'
                    '[WFC: No Recursion]'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                }
                td {
                }
                td {
                }
                td {
                }
                td {
                  a {
                    href '#indtd'
                    '[WFC: In DTD]'
                  }
                }
              }
            }
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'wf-entdeclared'
                id 'wf-entdeclared'
              }
              b {
                'Well-formedness constraint: Entity Declared'
              }
            }
            p {
              'In a document\nwithout any DTD, a document with only an internal DTD subset which contains\nno parameter entity references, or a document with "'
              code {
                'standalone=\'yes\''
              }
              '", for\nan entity reference that does not occur within the external subset or a parameter\nentity, the'
              a {
                href '#NT-Name'
                'Name'
              }
              'given in the entity reference'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              a {
                title 'match'
                href '#dt-match'
                'match'
              }
              'that in an'
              a {
                href '#sec-entity-decl'
                cite {
                  'entity\ndeclaration'
                }
              }
              'that does not occur within the external subset or a\nparameter entity, except that well-formed documents need not declare\nany of the following entities:'
              code {
                'amp'
              }
              ','
              code {
                'lt'
              }
              ','
              code {
                'gt'
              }
              ','
              code {
                'apos'
              }
              ','
              code {
                'quot'
              }
              '. The\ndeclaration of a general entity'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'precede any reference to it which appears\nin a default value in an attribute-list declaration.'
            }
            p {
              'Note that non-validating processors are'
              a {
                href '#include-if-valid'
                cite {
                  'not\nobligated to'
                }
              }
              'read and process entity declarations occurring in parameter entities or in\nthe external subset; for such documents,\nthe rule that an entity must be declared is a well-formedness constraint only\nif'
              a {
                href '#sec-rmd'
                cite {
                  'standalone=\'yes\''
                }
              }
              '.'
            }
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'vc-entdeclared'
                id 'vc-entdeclared'
              }
              b {
                'Validity constraint: Entity Declared'
              }
            }
            p {
              'In a document with an external subset or parameter  entity references'
              span {
                ',\n\t\t\t\t\t\tif the document is not standalone (either "'
                code {
                  'standalone=\'no\''
                }
                '"\n\t\t\t\t\t\tis specified or there is no standalone declaration), then'
              }
              'the'
              a {
                href '#NT-Name'
                'Name'
              }
              'given in the entity reference'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              a {
                title 'match'
                href '#dt-match'
                'match'
              }
              'that in an'
              a {
                href '#sec-entity-decl'
                cite {
                  'entity\ndeclaration'
                }
              }
              '. For interoperability, valid documents'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'SHOULD'
              }
              'declare\nthe entities'
              code {
                'amp'
              }
              ','
              code {
                'lt'
              }
              ','
              code {
                'gt'
              }
              ','
              code {
                'apos'
              }
              ','
              code {
                'quot'
              }
              ', in the form specified in'
              a {
                href '#sec-predefined-ent'
                b {
                  '4.6 Predefined Entities'
                }
              }
              '.\nThe declaration of a parameter entity'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'precede any reference to it. Similarly,\nthe declaration of a general entity'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'precede any attribute-list\ndeclaration containing a default value with a direct or indirect reference\nto that general entity.'
            }
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'textent'
                id 'textent'
              }
              b {
                'Well-formedness constraint: Parsed Entity'
              }
            }
            p {
              'An entity reference'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST\nNOT'
              }
              'contain the name of an'
              a {
                title 'Unparsed Entity'
                href '#dt-unparsed'
                'unparsed entity'
              }
              '.\nUnparsed entities may be referred to only in'
              a {
                title 'Attribute Value'
                href '#dt-attrval'
                'attribute\nvalues'
              }
              'declared to be of type'
              b {
                'ENTITY'
              }
              'or'
              b {
                'ENTITIES'
              }
              '.'
            }
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'norecursion'
                id 'norecursion'
              }
              b {
                'Well-formedness constraint: No Recursion'
              }
            }
            p {
              'A parsed entity'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST NOT'
              }
              'contain a recursive reference to itself, either directly or indirectly.'
            }
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'indtd'
                id 'indtd'
              }
              b {
                'Well-formedness constraint: In DTD'
              }
            }
            p {
              'Parameter-entity references'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST NOT'
              }
              'appear outside\n the'
              a {
                title 'Document Type Declaration'
                href '#dt-doctype'
                'DTD'
              }
              '.'
            }
          }
          p {
            'Examples of character and entity references:'
          }
          div {
            class 'exampleInner'
            pre {
              'Type <key>less-than</key> (&#x3C;) to save options.\nThis document was prepared on &docdate; and\nis classified &security-level;.'
            }
          }
          p {
            'Example of a parameter-entity reference:'
          }
          div {
            class 'exampleInner'
            pre {
              '<!-- declare the parameter entity "ISOLat2"... -->\n<!ENTITY % ISOLat2\n         SYSTEM "http://www.xml.com/iso/isolat2-xml.entities" >\n<!-- ... now reference it. -->\n%ISOLat2;'
            }
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-entity-decl'
              id 'sec-entity-decl'
            }
            '4.2 Entity Declarations'
          }
          p {
            '['
            a {
              name 'dt-entdecl'
              id 'dt-entdecl'
              title 'entity declaration'
              'Definition'
            }
            ':  Entities are declared\nthus:]'
          }
          h5 {
            a {
              name 'd0e4163'
              id 'd0e4163'
            }
            'Entity Declaration'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-EntityDecl'
                    id 'NT-EntityDecl'
                  }
                  '[70]'
                }
                td {
                  code {
                    'EntityDecl'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-GEDecl'
                      'GEDecl'
                    }
                    '|'
                    a {
                      href '#NT-PEDecl'
                      'PEDecl'
                    }
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-GEDecl'
                    id 'NT-GEDecl'
                  }
                  '[71]'
                }
                td {
                  code {
                    'GEDecl'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'<!ENTITY\''
                    a {
                      href '#NT-S'
                      'S'
                    }
                    a {
                      href '#NT-Name'
                      'Name'
                    }
                    a {
                      href '#NT-S'
                      'S'
                    }
                    a {
                      href '#NT-EntityDef'
                      'EntityDef'
                    }
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '?\n\'>\''
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-PEDecl'
                    id 'NT-PEDecl'
                  }
                  '[72]'
                }
                td {
                  code {
                    'PEDecl'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'<!ENTITY\''
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '\'%\''
                    a {
                      href '#NT-S'
                      'S'
                    }
                    a {
                      href '#NT-Name'
                      'Name'
                    }
                    a {
                      href '#NT-S'
                      'S'
                    }
                    a {
                      href '#NT-PEDef'
                      'PEDef'
                    }
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '? \'>\''
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-EntityDef'
                    id 'NT-EntityDef'
                  }
                  '[73]'
                }
                td {
                  code {
                    'EntityDef'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-EntityValue'
                      'EntityValue'
                    }
                    '| ('
                    a {
                      href '#NT-ExternalID'
                      'ExternalID'
                    }
                    a {
                      href '#NT-NDataDecl'
                      'NDataDecl'
                    }
                    '?)'
                  }
                }
              }
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-PEDef'
                    id 'NT-PEDef'
                  }
                  '[74]'
                }
                td {
                  code {
                    'PEDef'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    a {
                      href '#NT-EntityValue'
                      'EntityValue'
                    }
                    '|'
                    a {
                      href '#NT-ExternalID'
                      'ExternalID'
                    }
                  }
                }
              }
            }
          }
          p {
            'The'
            a {
              href '#NT-Name'
              'Name'
            }
            'identifies the entity in an'
            a {
              title 'Entity Reference'
              href '#dt-entref'
              'entity\nreference'
            }
            'or, in the case of an unparsed entity, in the value of\nan'
            b {
              'ENTITY'
            }
            'or'
            b {
              'ENTITIES'
            }
            'attribute. If the same entity is declared\nmore than once, the first declaration encountered is binding; at user option,\nan XML processor'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MAY'
            }
            'issue a warning if entities are declared multiple times.'
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'sec-internal-ent'
                id 'sec-internal-ent'
              }
              '4.2.1 Internal Entities'
            }
            p {
              '['
              a {
                name 'dt-internent'
                id 'dt-internent'
                title 'Internal Entity Replacement Text'
                'Definition'
              }
              ': If the\nentity definition is an'
              a {
                href '#NT-EntityValue'
                'EntityValue'
              }
              ', the defined\nentity is called an'
              b {
                'internal entity'
              }
              '. There is no separate physical\nstorage object, and the content of the entity is given in the declaration.]\nNote that some processing of entity and character references in the'
              a {
                title 'Literal Entity Value'
                href '#dt-litentval'
                'literal entity value'
              }
              'may be required to produce\nthe correct'
              a {
                title 'Replacement Text'
                href '#dt-repltext'
                'replacement text'
              }
              ': see'
              a {
                href '#intern-replacement'
                b {
                  '4.5 Construction of Entity Replacement Text'
                }
              }
              '.'
            }
            p {
              'An internal entity is a'
              a {
                title 'Text Entity'
                href '#dt-parsedent'
                'parsed entity'
              }
              '.'
            }
            p {
              'Example of an internal entity declaration:'
            }
            div {
              class 'exampleInner'
              pre {
                '<!ENTITY Pub-Status "This is a pre-release of the\n specification.">'
              }
            }
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'sec-external-ent'
                id 'sec-external-ent'
              }
              '4.2.2 External Entities'
            }
            p {
              '['
              a {
                name 'dt-extent'
                id 'dt-extent'
                title 'External Entity'
                'Definition'
              }
              ': If the entity is not internal,\nit is an'
              b {
                'external entity'
              }
              ', declared as follows:]'
            }
            h5 {
              a {
                name 'd0e4313'
                id 'd0e4313'
              }
              'External Entity Declaration'
            }
            table {
              class 'scrap'
              summary 'Scrap'
              tbody {
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-ExternalID'
                      id 'NT-ExternalID'
                    }
                    '[75]'
                  }
                  td {
                    code {
                      'ExternalID'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      '\'SYSTEM\''
                      a {
                        href '#NT-S'
                        'S'
                      }
                      a {
                        href '#NT-SystemLiteral'
                        'SystemLiteral'
                      }
                    }
                  }
                }
                tr {
                  valign 'baseline'
                  td {
                  }
                  td {
                  }
                  td {
                  }
                  td {
                    code {
                      '| \'PUBLIC\''
                      a {
                        href '#NT-S'
                        'S'
                      }
                      a {
                        href '#NT-PubidLiteral'
                        'PubidLiteral'
                      }
                      a {
                        href '#NT-S'
                        'S'
                      }
                      a {
                        href '#NT-SystemLiteral'
                        'SystemLiteral'
                      }
                    }
                  }
                }
              }
              tbody {
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-NDataDecl'
                      id 'NT-NDataDecl'
                    }
                    '[76]'
                  }
                  td {
                    code {
                      'NDataDecl'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '\'NDATA\''
                      a {
                        href '#NT-S'
                        'S'
                      }
                      a {
                        href '#NT-Name'
                        'Name'
                      }
                    }
                  }
                  td {
                    a {
                      href '#not-declared'
                      '[VC: Notation Declared]'
                    }
                  }
                }
              }
            }
            p {
              'If the'
              a {
                href '#NT-NDataDecl'
                'NDataDecl'
              }
              'is present, this is a general'
              a {
                title 'Unparsed Entity'
                href '#dt-unparsed'
                'unparsed entity'
              }
              '; otherwise it is a parsed entity.'
            }
            div {
              class 'constraint'
              p {
                class 'prefix'
                a {
                  name 'not-declared'
                  id 'not-declared'
                }
                b {
                  'Validity constraint: Notation Declared'
                }
              }
              p {
                'The'
                a {
                  href '#NT-Name'
                  'Name'
                }
                em {
                  class 'rfc2119'
                  title 'Keyword in RFC 2119 context'
                  'MUST'
                }
                'match the declared name of a'
                a {
                  title 'Notation'
                  href '#dt-notation'
                  'notation'
                }
                '.'
              }
            }
            p {
              '['
              a {
                name 'dt-sysid'
                id 'dt-sysid'
                title 'System Identifier'
                'Definition'
              }
              ': The'
              a {
                href '#NT-SystemLiteral'
                'SystemLiteral'
              }
              'is called the entity\'s'
              b {
                'system\nidentifier'
              }
              '. It is meant to be converted to a URI reference\n(as defined in'
              a {
                href '#rfc3986'
                '[IETF RFC 3986]'
              }
              '),\nas part of the\nprocess of dereferencing it to obtain input for the XML processor to construct the\nentity\'s replacement text.] It is an error for a fragment identifier\n(beginning with a'
              code {
                '#'
              }
              'character) to be part of a system identifier.\nUnless otherwise provided by information outside the scope of this specification\n(e.g. a special XML element type defined by a particular DTD, or a processing\ninstruction defined by a particular application specification), relative URIs\nare relative to the location of the resource within which the entity declaration\noccurs. This is defined to\nbe the external entity containing the \'<\' which starts the declaration, at the\npoint when it is parsed as a declaration.\nA URI might thus be relative to the'
              a {
                title 'Document Entity'
                href '#dt-docent'
                'document\nentity'
              }
              ', to the entity containing the'
              a {
                title 'Document Type Declaration'
                href '#dt-doctype'
                'external\nDTD subset'
              }
              ', or to some other'
              a {
                title 'External Entity'
                href '#dt-extent'
                'external parameter\nentity'
              }
              '. Attempts to\nretrieve the resource identified by a URI may be redirected at the parser\nlevel (for example, in an entity resolver) or below (at the protocol level,\nfor example, via an HTTP'
              code {
                'Location:'
              }
              'header). In the absence of additional\ninformation outside the scope of this specification within the resource,\nthe base URI of a resource is always the URI of the actual resource returned.\nIn other words, it is the URI of the resource retrieved after all redirection\nhas occurred.'
            }
            p {
              'System\nidentifiers (and other XML strings meant to be used as URI references) may contain\ncharacters that, according to'
              a {
                href '#rfc3986'
                '[IETF RFC 3986]'
              }
              ',\nmust be escaped before a URI can be used to retrieve the referenced resource. The\ncharacters to be escaped are the control characters #x0 to #x1F and #x7F (most of\nwhich cannot appear in XML), space #x20, the delimiters \'<\' #x3C, \'>\' #x3E and\n\'"\' #x22, the'
              em {
                'unwise'
              }
              'characters \'{\' #x7B, \'}\' #x7D, \'|\' #x7C, \'\\\' #x5C, \'^\' #x5E and\n\'`\' #x60, as well as all characters above #x7F. Since escaping is not always a fully\nreversible process, it'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'be performed only when absolutely necessary and as late\nas possible in a processing chain. In particular, neither the process of converting\na relative URI to an absolute one nor the process of passing a URI reference to a\nprocess or software component responsible for dereferencing it'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'SHOULD'
              }
              'trigger escaping.\nWhen escaping does occur, it'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'be performed as follows:'
            }
            ol {
              class 'enumar'
              li {
                p {
                  'Each character to be escaped is represented in UTF-8'
                  span {
                    a {
                      href '#Unicode'
                      '[Unicode]'
                    }
                  }
                  'as one or more bytes.'
                }
              }
              li {
                p {
                  'The resulting bytes are escaped with\nthe URI escaping mechanism (that is, converted to'
                  code {
                    '%'
                  }
                  var {
                    'HH'
                  }
                  ',\nwhere HH is the hexadecimal notation of the byte value).'
                }
              }
              li {
                p {
                  'The original character is replaced by the resulting character sequence.'
                }
              }
            }
            div {
              class 'note'
              p {
                class 'prefix'
                b {
                  'Note:'
                }
              }
              p {
                'In a future edition of this specification, the XML Core Working Group intends to replace the preceding paragraph\n\t\t\t\t\t\t\tand list of steps with a normative reference to an upcoming revision of IETF RFC 3987, which will define\n\t\t\t\t\t\t\t"Legacy Extended IRIs (LEIRIs)".  When this revision is available, it is the intent of the XML Core WG to use it to replace\n\t\t\t\t\t\t\tlanguage similar to the above in any future revisions of XML-related specifications under its purview.'
              }
            }
            p {
              '['
              a {
                name 'dt-pubid'
                id 'dt-pubid'
                title 'Public identifier'
                'Definition'
              }
              ':  In addition to a system\nidentifier, an external identifier may include a'
              b {
                'public identifier'
              }
              '.]\nAn XML processor attempting to retrieve the entity\'s content may use\nany combination of\nthe public and system identifiers as well as additional information outside the\nscope of this specification to try to generate an alternative URI reference.\nIf the processor is unable to do so, it'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'use the URI\nreference specified in the system literal. Before a match is attempted,\nall strings of white space in the public identifier'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'be normalized to\nsingle space characters (#x20), and leading and trailing white space'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'be removed.'
            }
            p {
              'Examples of external entity declarations:'
            }
            div {
              class 'exampleInner'
              pre {
                '<!ENTITY open-hatch\n         SYSTEM "http://www.textuality.com/boilerplate/OpenHatch.xml">\n<!ENTITY open-hatch\n         PUBLIC "-//Textuality//TEXT Standard open-hatch boilerplate//EN"\n         "http://www.textuality.com/boilerplate/OpenHatch.xml">\n<!ENTITY hatch-pic\n         SYSTEM "../grafix/OpenHatch.gif"\n         NDATA gif >'
              }
            }
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'TextEntities'
              id 'TextEntities'
            }
            '4.3 Parsed Entities'
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'sec-TextDecl'
                id 'sec-TextDecl'
              }
              '4.3.1 The Text Declaration'
            }
            p {
              'External parsed entities'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'SHOULD'
              }
              'each begin with a'
              b {
                'text declaration'
              }
              '.'
            }
            h5 {
              a {
                name 'd0e4481'
                id 'd0e4481'
              }
              'Text Declaration'
            }
            table {
              class 'scrap'
              summary 'Scrap'
              tbody {
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-TextDecl'
                      id 'NT-TextDecl'
                    }
                    '[77]'
                  }
                  td {
                    code {
                      'TextDecl'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      '\'<?xml\''
                      a {
                        href '#NT-VersionInfo'
                        'VersionInfo'
                      }
                      '?'
                      a {
                        href '#NT-EncodingDecl'
                        'EncodingDecl'
                      }
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '? \'?>\''
                    }
                  }
                }
              }
            }
            p {
              'The text declaration'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'be provided literally, not by reference\n\t\t\t\t\tto a parsed entity. The text declaration'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST NOT'
              }
              'appear at any\n\t\t\t\t\tposition other than the beginning of an external parsed entity. The text declaration\n          in an external parsed entity is not considered part of its'
              a {
                title 'Replacement Text'
                href '#dt-repltext'
                'replacement text'
              }
              '.'
            }
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'wf-entities'
                id 'wf-entities'
              }
              '4.3.2 Well-Formed Parsed Entities'
            }
            p {
              'The document entity is well-formed if it matches the production labeled'
              a {
                href '#NT-document'
                'document'
              }
              '. An external general parsed entity is well-formed\nif it matches the production labeled'
              a {
                href '#NT-extParsedEnt'
                'extParsedEnt'
              }
              '. All\nexternal parameter entities are well-formed by definition.'
            }
            div {
              class 'note'
              p {
                class 'prefix'
                b {
                  'Note:'
                }
              }
              p {
                'Only parsed entities that are referenced directly or indirectly within the document are required to be well-formed.'
              }
            }
            h5 {
              a {
                name 'd0e4524'
                id 'd0e4524'
              }
              'Well-Formed External Parsed Entity'
            }
            table {
              class 'scrap'
              summary 'Scrap'
              tbody {
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-extParsedEnt'
                      id 'NT-extParsedEnt'
                    }
                    '[78]'
                  }
                  td {
                    code {
                      'extParsedEnt'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      a {
                        href '#NT-TextDecl'
                        'TextDecl'
                      }
                      '?'
                      a {
                        href '#NT-content'
                        'content'
                      }
                    }
                  }
                }
              }
            }
            p {
              'An internal general parsed entity is well-formed if its replacement text\nmatches the production labeled'
              a {
                href '#NT-content'
                'content'
              }
              '. All internal\nparameter entities are well-formed by definition.'
            }
            p {
              'A consequence of well-formedness in general\nentities is that the logical and physical\nstructures in an XML document are properly nested; no'
              a {
                title 'Start-Tag'
                href '#dt-stag'
                'start-tag'
              }
              ','
              a {
                title 'End Tag'
                href '#dt-etag'
                'end-tag'
              }
              ','
              a {
                title 'Empty'
                href '#dt-empty'
                'empty-element tag'
              }
              ','
              a {
                title 'Element'
                href '#dt-element'
                'element'
              }
              ','
              a {
                title 'Comment'
                href '#dt-comment'
                'comment'
              }
              ','
              a {
                title 'Processing instruction'
                href '#dt-pi'
                'processing instruction'
              }
              ','
              a {
                title 'Character Reference'
                href '#dt-charref'
                'character\nreference'
              }
              ', or'
              a {
                title 'Entity Reference'
                href '#dt-entref'
                'entity reference'
              }
              'can begin in one entity and end in another.'
            }
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'charencoding'
                id 'charencoding'
              }
              '4.3.3 Character Encoding in Entities'
            }
            p {
              'Each external parsed entity in an XML document may use a different encoding\nfor its characters. All XML processors'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'be able to read entities in both\nthe UTF-8 and UTF-16 encodings. The terms "UTF-8"\nand "UTF-16" in this specification do not apply to'
              span {
                'related character encodings, including but not limited to UTF-16BE, UTF-16LE, or CESU-8.'
              }
            }
            p {
              'Entities encoded in UTF-16'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'and entities\nencoded in UTF-8'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MAY'
              }
              'begin with the Byte Order Mark described by\nAnnex H of'
              a {
                href '#ISO10646-2000'
                '[ISO/IEC 10646:2000]'
              }
              ', section'
              span {
                '16.8'
              }
              'of'
              a {
                href '#Unicode'
                '[Unicode]'
              }
              '(the ZERO WIDTH NO-BREAK SPACE character, #xFEFF). This is an encoding signature,\nnot part of either the markup or the character data of the XML document. XML\nprocessors'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'be able to use this character to differentiate between UTF-8\nand UTF-16 encoded documents.'
            }
            p {
              'If the replacement text of an external entity is to\n\t\t\t\t\t\tbegin with the character U+FEFF, and no text declaration\n\t\t\t\t\t\tis present, then a Byte Order Mark MUST be present,\n\t\t\t\t\t\twhether the entity is encoded in UTF-8 or UTF-16.'
            }
            p {
              'Although an XML processor is required to read only entities in the UTF-8\nand UTF-16 encodings, it is recognized that other encodings are used around\nthe world, and it may be desired for XML processors to read entities that\nuse them. In\nthe absence of external character encoding information (such as MIME headers),\nparsed entities which are stored in an encoding other than UTF-8 or UTF-16'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'begin with a text declaration (see'
              a {
                href '#sec-TextDecl'
                b {
                  '4.3.1 The Text Declaration'
                }
              }
              ') containing\nan encoding declaration:'
            }
            h5 {
              a {
                name 'd0e4623'
                id 'd0e4623'
              }
              'Encoding Declaration'
            }
            table {
              class 'scrap'
              summary 'Scrap'
              tbody {
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-EncodingDecl'
                      id 'NT-EncodingDecl'
                    }
                    '[80]'
                  }
                  td {
                    code {
                      'EncodingDecl'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      a {
                        href '#NT-S'
                        'S'
                      }
                      '\'encoding\''
                      a {
                        href '#NT-Eq'
                        'Eq'
                      }
                      '(\'"\''
                      a {
                        href '#NT-EncName'
                        'EncName'
                      }
                      '\'"\' | "\'"'
                      a {
                        href '#NT-EncName'
                        'EncName'
                      }
                      '"\'" )'
                    }
                  }
                }
              }
              tbody {
                tr {
                  valign 'baseline'
                  td {
                    a {
                      name 'NT-EncName'
                      id 'NT-EncName'
                    }
                    '[81]'
                  }
                  td {
                    code {
                      'EncName'
                    }
                  }
                  td {
                    '::='
                  }
                  td {
                    code {
                      '[A-Za-z] ([A-Za-z0-9._] | \'-\')*'
                    }
                  }
                  td {
                    i {
                      '/* Encoding\nname contains only Latin characters */'
                    }
                  }
                }
              }
            }
            p {
              'In the'
              a {
                title 'Document Entity'
                href '#dt-docent'
                'document entity'
              }
              ', the encoding\ndeclaration is part of the'
              a {
                title 'XML Declaration'
                href '#dt-xmldecl'
                'XML declaration'
              }
              '.\nThe'
              a {
                href '#NT-EncName'
                'EncName'
              }
              'is the name of the encoding used.'
            }
            p {
              'In an encoding declaration, the values "'
              code {
                'UTF-8'
              }
              '", "'
              code {
                'UTF-16'
              }
              '",\n"'
              code {
                'ISO-10646-UCS-2'
              }
              '", and "'
              code {
                'ISO-10646-UCS-4'
              }
              '"'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'SHOULD'
              }
              'be used\nfor the various encodings and transformations of Unicode / ISO/IEC 10646,\nthe values "'
              code {
                'ISO-8859-1'
              }
              '", "'
              code {
                'ISO-8859-2'
              }
              '",\n... "'
              code {
                'ISO-8859-'
              }
              var {
                'n'
              }
              '" (where'
              var {
                'n'
              }
              'is the part number)'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'SHOULD'
              }
              'be used for the parts of ISO 8859, and\nthe values "'
              code {
                'ISO-2022-JP'
              }
              '", "'
              code {
                'Shift_JIS'
              }
              '",\nand "'
              code {
                'EUC-JP'
              }
              '"'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'SHOULD'
              }
              'be used for the various encoded\nforms of JIS X-0208-1997. It\nis'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'RECOMMENDED'
              }
              'that character encodings registered (as'
              em {
                'charset'
              }
              's)\nwith the Internet Assigned Numbers Authority'
              a {
                href '#IANA'
                '[IANA-CHARSETS]'
              }
              ',\nother than those just listed, be referred to using their registered names;\nother encodings'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'SHOULD'
              }
              'use names starting with an "x-" prefix.\nXML processors'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'SHOULD'
              }
              'match character encoding names in a case-insensitive\nway and'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'SHOULD'
              }
              'either interpret an IANA-registered name as the encoding registered\nat IANA for that name or treat it as unknown (processors are, of course, not\nrequired to support all IANA-registered encodings).'
            }
            p {
              'In the absence of information provided by an external transport protocol\n(e.g. HTTP or MIME), it is a'
              a {
                title 'Fatal Error'
                href '#dt-fatal'
                'fatal error'
              }
              'for\nan entity including an encoding declaration to be presented to the XML processor\nin an encoding other than that named in the declaration, or for an entity which\nbegins with neither a Byte Order Mark\nnor an encoding declaration to use an encoding other than UTF-8. Note that\nsince ASCII is a subset of UTF-8, ordinary ASCII entities do not strictly\nneed an encoding declaration.'
            }
            p {
              'It is a'
              a {
                title 'Fatal Error'
                href '#dt-fatal'
                'fatal error'
              }
              'for a'
              a {
                href '#NT-TextDecl'
                'TextDecl'
              }
              'to occur other\nthan at the beginning of an external entity.'
            }
            p {
              'It is a'
              a {
                title 'Fatal Error'
                href '#dt-fatal'
                'fatal error'
              }
              'when an XML processor\nencounters an entity with an encoding that it is unable to process. It\nis a'
              a {
                title 'Fatal Error'
                href '#dt-fatal'
                'fatal error'
              }
              'if an XML entity is determined (via default, encoding declaration,\nor higher-level protocol) to be in a certain encoding but contains byte\nsequences that are not legal in that encoding. Specifically, it is a\nfatal error if an entity encoded in UTF-8 contains any'
              span {
                'ill-formed'
              }
              'code unit sequences,\nas defined in'
              span {
                'section 3.9 of'
              }
              'Unicode'
              span {
                a {
                  href '#Unicode'
                  '[Unicode]'
                }
              }
              '. Unless an encoding\nis determined by a higher-level protocol, it is also a'
              a {
                title 'Fatal Error'
                href '#dt-fatal'
                'fatal error'
              }
              'if an XML entity\ncontains no encoding declaration and its content is not legal UTF-8 or UTF-16.'
            }
            p {
              'Examples of text declarations containing encoding declarations:'
            }
            div {
              class 'exampleInner'
              pre {
                '<?xml encoding=\'UTF-8\'?>\n<?xml encoding=\'EUC-JP\'?>'
              }
            }
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'entproc'
              id 'entproc'
            }
            '4.4 XML Processor Treatment of Entities and References'
          }
          p {
            'The table below summarizes the contexts in which character references,\nentity references, and invocations of unparsed entities might appear and the'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'REQUIRED'
            }
            'behavior of an'
            a {
              title 'XML Processor'
              href '#dt-xml-proc'
              'XML processor'
            }
            'in each case. The labels in the leftmost column describe the recognition context:'
          }
          dl {
            dt {
              class 'label'
              'Reference in Content'
            }
            dd {
              p {
                'as a reference anywhere after the'
                a {
                  title 'Start-Tag'
                  href '#dt-stag'
                  'start-tag'
                }
                'and before the'
                a {
                  title 'End Tag'
                  href '#dt-etag'
                  'end-tag'
                }
                'of an element; corresponds\nto the nonterminal'
                a {
                  href '#NT-content'
                  'content'
                }
                '.'
              }
            }
            dt {
              class 'label'
              'Reference in Attribute Value'
            }
            dd {
              p {
                'as a reference within either the value of an attribute in a'
                a {
                  title 'Start-Tag'
                  href '#dt-stag'
                  'start-tag'
                }
                ',\nor a default value in an'
                a {
                  title 'Attribute-List Declaration'
                  href '#dt-attdecl'
                  'attribute declaration'
                }
                ';\ncorresponds to the nonterminal'
                a {
                  href '#NT-AttValue'
                  'AttValue'
                }
                '.'
              }
            }
            dt {
              class 'label'
              'Occurs as Attribute Value'
            }
            dd {
              p {
                'as a'
                a {
                  href '#NT-Name'
                  'Name'
                }
                ', not a reference, appearing either as\nthe value of an attribute which has been declared as type'
                b {
                  'ENTITY'
                }
                ',\nor as one of the space-separated tokens in the value of an attribute which\nhas been declared as type'
                b {
                  'ENTITIES'
                }
                '.'
              }
            }
            dt {
              class 'label'
              'Reference in Entity Value'
            }
            dd {
              p {
                'as a reference within a parameter or internal entity\'s'
                a {
                  title 'Literal Entity Value'
                  href '#dt-litentval'
                  'literal\nentity value'
                }
                'in the entity\'s declaration; corresponds to the nonterminal'
                a {
                  href '#NT-EntityValue'
                  'EntityValue'
                }
                '.'
              }
            }
            dt {
              class 'label'
              'Reference in DTD'
            }
            dd {
              p {
                'as a reference within either the internal or external subsets of the'
                a {
                  title 'Document Type Declaration'
                  href '#dt-doctype'
                  'DTD'
                }
                ', but outside of an'
                a {
                  href '#NT-EntityValue'
                  'EntityValue'
                }
                ','
                a {
                  href '#NT-AttValue'
                  'AttValue'
                }
                ','
                a {
                  href '#NT-PI'
                  'PI'
                }
                ','
                a {
                  href '#NT-Comment'
                  'Comment'
                }
                ','
                a {
                  href '#NT-SystemLiteral'
                  'SystemLiteral'
                }
                ','
                a {
                  href '#NT-PubidLiteral'
                  'PubidLiteral'
                }
                ',\nor the contents of an ignored conditional section (see'
                a {
                  href '#sec-condition-sect'
                  b {
                    '3.4 Conditional Sections'
                  }
                }
                ').'
              }
              p {
                '.'
              }
            }
          }
          p {
          }
          table {
            border '1'
            frame 'border'
            cellpadding '7'
            tbody {
              align 'center'
              tr {
                td {
                  rowspan '2'
                }
                td {
                  colspan '4'
                  align 'center'
                  valign 'bottom'
                  'Entity\nType'
                }
                td {
                  rowspan '2'
                  align 'center'
                  'Character'
                }
              }
              tr {
                align 'center'
                valign 'bottom'
                td {
                  'Parameter'
                }
                td {
                  'Internal General'
                }
                td {
                  'External Parsed\nGeneral'
                }
                td {
                  'Unparsed'
                }
              }
              tr {
                align 'center'
                valign 'middle'
                td {
                  align 'right'
                  'Reference\nin Content'
                }
                td {
                  a {
                    href '#not-recognized'
                    cite {
                      'Not recognized'
                    }
                  }
                }
                td {
                  a {
                    href '#included'
                    cite {
                      'Included'
                    }
                  }
                }
                td {
                  a {
                    href '#include-if-valid'
                    cite {
                      'Included\nif validating'
                    }
                  }
                }
                td {
                  a {
                    href '#forbidden'
                    cite {
                      'Forbidden'
                    }
                  }
                }
                td {
                  a {
                    href '#included'
                    cite {
                      'Included'
                    }
                  }
                }
              }
              tr {
                align 'center'
                valign 'middle'
                td {
                  align 'right'
                  'Reference in Attribute Value'
                }
                td {
                  a {
                    href '#not-recognized'
                    cite {
                      'Not recognized'
                    }
                  }
                }
                td {
                  a {
                    href '#inliteral'
                    cite {
                      'Included\nin literal'
                    }
                  }
                }
                td {
                  a {
                    href '#forbidden'
                    cite {
                      'Forbidden'
                    }
                  }
                }
                td {
                  a {
                    href '#forbidden'
                    cite {
                      'Forbidden'
                    }
                  }
                }
                td {
                  a {
                    href '#included'
                    cite {
                      'Included'
                    }
                  }
                }
              }
              tr {
                align 'center'
                valign 'middle'
                td {
                  align 'right'
                  'Occurs as Attribute\nValue'
                }
                td {
                  a {
                    href '#not-recognized'
                    cite {
                      'Not recognized'
                    }
                  }
                }
                td {
                  a {
                    href '#forbidden'
                    cite {
                      'Forbidden'
                    }
                  }
                }
                td {
                  a {
                    href '#forbidden'
                    cite {
                      'Forbidden'
                    }
                  }
                }
                td {
                  a {
                    href '#notify'
                    cite {
                      'Notify'
                    }
                  }
                }
                td {
                  a {
                    href '#not-recognized'
                    cite {
                      'Not recognized'
                    }
                  }
                }
              }
              tr {
                align 'center'
                valign 'middle'
                td {
                  align 'right'
                  'Reference in EntityValue'
                }
                td {
                  a {
                    href '#inliteral'
                    cite {
                      'Included in literal'
                    }
                  }
                }
                td {
                  a {
                    href '#bypass'
                    cite {
                      'Bypassed'
                    }
                  }
                }
                td {
                  a {
                    href '#bypass'
                    cite {
                      'Bypassed'
                    }
                  }
                }
                td {
                  a {
                    href '#error'
                    cite {
                      'Error'
                    }
                  }
                }
                td {
                  a {
                    href '#included'
                    cite {
                      'Included'
                    }
                  }
                }
              }
              tr {
                align 'center'
                valign 'middle'
                td {
                  align 'right'
                  'Reference in DTD'
                }
                td {
                  a {
                    href '#as-PE'
                    cite {
                      'Included as PE'
                    }
                  }
                }
                td {
                  a {
                    href '#forbidden'
                    cite {
                      'Forbidden'
                    }
                  }
                }
                td {
                  a {
                    href '#forbidden'
                    cite {
                      'Forbidden'
                    }
                  }
                }
                td {
                  a {
                    href '#forbidden'
                    cite {
                      'Forbidden'
                    }
                  }
                }
                td {
                  a {
                    href '#forbidden'
                    cite {
                      'Forbidden'
                    }
                  }
                }
              }
            }
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'not-recognized'
                id 'not-recognized'
              }
              '4.4.1 Not Recognized'
            }
            p {
              'Outside the DTD, the'
              code {
                '%'
              }
              'character has no special significance;\nthus, what would be parameter entity references in the DTD are not recognized\nas markup in'
              a {
                href '#NT-content'
                'content'
              }
              '. Similarly, the names of unparsed\nentities are not recognized except when they appear in the value of an appropriately\ndeclared attribute.'
            }
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'included'
                id 'included'
              }
              '4.4.2 Included'
            }
            p {
              '['
              a {
                name 'dt-include'
                id 'dt-include'
                title 'Include'
                'Definition'
              }
              ': An entity is'
              b {
                'included'
              }
              'when its'
              a {
                title 'Replacement Text'
                href '#dt-repltext'
                'replacement text'
              }
              'is retrieved\nand processed, in place of the reference itself, as though it were part of\nthe document at the location the reference was recognized.] The replacement\ntext may contain both'
              a {
                title 'Character Data'
                href '#dt-chardata'
                'character data'
              }
              'and (except for parameter entities)'
              a {
                title 'Markup'
                href '#dt-markup'
                'markup'
              }
              ',\nwhich'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'be recognized in the usual way. (The string "'
              code {
                'AT&amp;T;'
              }
              '"\nexpands to "'
              code {
                'AT&T;'
              }
              '" and the remaining ampersand\nis not recognized as an entity-reference delimiter.) A character reference\nis'
              b {
                'included'
              }
              'when the indicated character is processed in place\nof the reference itself.'
            }
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'include-if-valid'
                id 'include-if-valid'
              }
              '4.4.3 Included If Validating'
            }
            p {
              'When an XML processor recognizes a reference to a parsed entity, in order\nto'
              a {
                title 'Validity'
                href '#dt-valid'
                'validate'
              }
              'the document, the processor'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              a {
                title 'Include'
                href '#dt-include'
                'include'
              }
              'its replacement text. If\nthe entity is external, and the processor is not attempting to validate the\nXML document, the processor'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MAY'
              }
              ', but need\nnot, include the entity\'s replacement text. If a non-validating processor\ndoes not include the replacement text, it'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'inform the application that\nit recognized, but did not read, the entity.'
            }
            p {
              'This rule is based on the recognition that the automatic inclusion provided\nby the SGML and XML entity mechanism, primarily designed to support modularity\nin authoring, is not necessarily appropriate for other applications, in particular\ndocument browsing. Browsers, for example, when encountering an external parsed\nentity reference, might choose to provide a visual indication of the entity\'s\npresence and retrieve it for display only on demand.'
            }
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'forbidden'
                id 'forbidden'
              }
              '4.4.4 Forbidden'
            }
            p {
              'The following are forbidden, and constitute'
              a {
                title 'Fatal Error'
                href '#dt-fatal'
                'fatal\nerrors'
              }
              ':'
            }
            ul {
              li {
                p {
                  'the appearance of a reference to an'
                  a {
                    title 'Unparsed Entity'
                    href '#dt-unparsed'
                    'unparsed\nentity'
                  }
                  ', except in the'
                  a {
                    href '#NT-EntityValue'
                    'EntityValue'
                  }
                  'in an entity declaration.'
                }
              }
              li {
                p {
                  'the appearance of any character or general-entity reference in the\nDTD except within an'
                  a {
                    href '#NT-EntityValue'
                    'EntityValue'
                  }
                  'or'
                  a {
                    href '#NT-AttValue'
                    'AttValue'
                  }
                  '.'
                }
              }
              li {
                p {
                  'a reference to an external entity in an attribute value.'
                }
              }
            }
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'inliteral'
                id 'inliteral'
              }
              '4.4.5 Included in Literal'
            }
            p {
              'When an'
              a {
                title 'Entity Reference'
                href '#dt-entref'
                'entity reference'
              }
              'appears in\nan attribute value, or a parameter entity reference appears in a literal entity\nvalue, its'
              a {
                title 'Replacement Text'
                href '#dt-repltext'
                'replacement text'
              }
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'be processed\nin place of the reference itself as though it were part of the document at\nthe location the reference was recognized, except that a single or double\nquote character in the replacement text'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'always be treated as a normal data\ncharacter and'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST NOT'
              }
              'terminate the literal. For example, this is well-formed:'
            }
            div {
              class 'exampleInner'
              pre {
                '<!ENTITY % YN \'"Yes"\' >\n<!ENTITY WhatHeSaid "He said %YN;" >'
              }
            }
            p {
              'while this is not:'
            }
            div {
              class 'exampleInner'
              pre {
                '<!ENTITY EndAttr "27\'" >\n<element attribute=\'a-&EndAttr;>'
              }
            }
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'notify'
                id 'notify'
              }
              '4.4.6 Notify'
            }
            p {
              'When the name of an'
              a {
                title 'Unparsed Entity'
                href '#dt-unparsed'
                'unparsed entity'
              }
              'appears as a token in the value of an attribute of declared type'
              b {
                'ENTITY'
              }
              'or'
              b {
                'ENTITIES'
              }
              ', a validating processor'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'inform the application of\nthe'
              a {
                title 'System Identifier'
                href '#dt-sysid'
                'system'
              }
              'and'
              a {
                title 'Public identifier'
                href '#dt-pubid'
                'public'
              }
              '(if any) identifiers for both the entity and its associated'
              a {
                title 'Notation'
                href '#dt-notation'
                'notation'
              }
              '.'
            }
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'bypass'
                id 'bypass'
              }
              '4.4.7 Bypassed'
            }
            p {
              'When a general entity reference appears in the'
              a {
                href '#NT-EntityValue'
                'EntityValue'
              }
              'in an entity declaration, it'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'be bypassed and left as is.'
            }
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'as-PE'
                id 'as-PE'
              }
              '4.4.8 Included as PE'
            }
            p {
              'Just as with external parsed entities, parameter entities need only be'
              a {
                href '#include-if-valid'
                cite {
                  'included if validating'
                }
              }
              '. When a parameter-entity\nreference is recognized in the DTD and included, its'
              a {
                title 'Replacement Text'
                href '#dt-repltext'
                'replacement\ntext'
              }
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST'
              }
              'be enlarged by the attachment of one leading and one following\nspace (#x20) character; the intent is to constrain the replacement text of\nparameter entities to contain an integral number of grammatical tokens in\nthe DTD. This\nbehavior'
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST NOT'
              }
              'apply to parameter entity references within entity values;\nthese are described in'
              a {
                href '#inliteral'
                b {
                  '4.4.5 Included in Literal'
                }
              }
              '.'
            }
          }
          div {
            class 'div3'
            h4 {
              a {
                name 'error'
                id 'error'
              }
              '4.4.9 Error'
            }
            p {
              'It is an'
              a {
                title 'Error'
                href '#dt-error'
                'error'
              }
              'for a reference to\n\t\tan unparsed entity to appear in the'
              a {
                href '#NT-EntityValue'
                'EntityValue'
              }
              'in an\n\t\tentity declaration.'
            }
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'intern-replacement'
              id 'intern-replacement'
            }
            '4.5 Construction of Entity Replacement Text'
          }
          p {
            'In discussing the treatment of entities, it is useful to distinguish\ntwo forms of the entity\'s value.\n['
            a {
              name 'dt-litentval'
              id 'dt-litentval'
              title 'Literal Entity Value'
              'Definition'
            }
            ': For an\ninternal entity, the'
            b {
              'literal\nentity value'
            }
            'is the quoted string actually present in the entity declaration,\ncorresponding to the non-terminal'
            a {
              href '#NT-EntityValue'
              'EntityValue'
            }
            '.]\n\t\t\t\t\t['
            a {
              name 'dt-extlitentval'
              id 'dt-extlitentval'
              title 'Literal Entity Value'
              'Definition'
            }
            ': For an external entity, the'
            b {
              'literal\nentity value'
            }
            'is the exact text contained in the entity.]\n\t\t\t\t\t['
            a {
              name 'dt-repltext'
              id 'dt-repltext'
              title 'Replacement Text'
              'Definition'
            }
            ': For an\ninternal entity, the'
            b {
              'replacement text'
            }
            'is the content of the entity, after replacement of character references and\nparameter-entity references.]\n\t\t\t\t\t['
            a {
              name 'dt-extrepltext'
              id 'dt-extrepltext'
              title 'Replacement Text'
              'Definition'
            }
            ': For\nan external entity, the'
            b {
              'replacement text'
            }
            'is the content of the entity,\nafter stripping the text declaration (leaving any surrounding whitespace) if there\nis one but without any replacement of character references or parameter-entity\nreferences.]'
          }
          p {
            'The literal entity value as given in an internal entity declaration ('
            a {
              href '#NT-EntityValue'
              'EntityValue'
            }
            ') may contain character, parameter-entity,\nand general-entity references. Such references'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be contained entirely\nwithin the literal entity value. The actual replacement text that is'
            a {
              title 'Include'
              href '#dt-include'
              'included'
            }
            '(or'
            a {
              title ''
              href '#inliteral'
              'included in literal'
            }
            ') as described above'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'contain the'
            em {
              'replacement\ntext'
            }
            'of any parameter entities referred to, and'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'contain the character\nreferred to, in place of any character references in the literal entity value;\nhowever, general-entity references'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be left as-is, unexpanded. For example,\ngiven the following declarations:'
          }
          div {
            class 'exampleInner'
            pre {
              '<!ENTITY % pub    "&#xc9;ditions Gallimard" >\n<!ENTITY   rights "All rights reserved" >\n<!ENTITY   book   "La Peste: Albert Camus,\n&#xA9; 1947 %pub;. &rights;" >'
            }
          }
          p {
            'then the replacement text for the entity "'
            code {
              'book'
            }
            '"\nis:'
          }
          div {
            class 'exampleInner'
            pre {
              'La Peste: Albert Camus,\n© 1947 Éditions Gallimard. &rights;'
            }
          }
          p {
            'The general-entity reference "'
            code {
              '&rights;'
            }
            '" would\nbe expanded should the reference "'
            code {
              '&book;'
            }
            '" appear\nin the document\'s content or an attribute value.'
          }
          p {
            'These simple rules may have complex interactions; for a detailed discussion\nof a difficult example, see'
            a {
              href '#sec-entexpand'
              b {
                'D Expansion of Entity and Character References'
              }
            }
            '.'
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-predefined-ent'
              id 'sec-predefined-ent'
            }
            '4.6 Predefined Entities'
          }
          p {
            '['
            a {
              name 'dt-escape'
              id 'dt-escape'
              title 'escape'
              'Definition'
            }
            ': Entity and character references may\nboth be used to'
            b {
              'escape'
            }
            'the left angle bracket, ampersand, and\nother delimiters. A set of general entities ('
            code {
              'amp'
            }
            ','
            code {
              'lt'
            }
            ','
            code {
              'gt'
            }
            ','
            code {
              'apos'
            }
            ','
            code {
              'quot'
            }
            ') is specified for\nthis purpose. Numeric character references may also be used; they are expanded\nimmediately when recognized and'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be treated as character data, so the\nnumeric character references "'
            code {
              '&#60;'
            }
            '" and "'
            code {
              '&#38;'
            }
            '" may be used to escape'
            code {
              '<'
            }
            'and'
            code {
              '&'
            }
            'when they occur\nin character data.]'
          }
          p {
            'All XML processors'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'recognize these entities whether they are declared\nor not.'
            a {
              title 'For interoperability'
              href '#dt-interop'
              'For interoperability'
            }
            ', valid XML\ndocuments'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'SHOULD'
            }
            'declare these entities, like any others, before using them. If\nthe entities'
            code {
              'lt'
            }
            'or'
            code {
              'amp'
            }
            'are declared, they'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be\ndeclared as internal entities whose replacement text is a character reference\nto the respective\ncharacter (less-than sign or ampersand) being escaped; the double\nescaping is'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'REQUIRED'
            }
            'for these entities so that references to them produce\na well-formed result. If the entities'
            code {
              'gt'
            }
            ','
            code {
              'apos'
            }
            ',\nor'
            code {
              'quot'
            }
            'are declared, they'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'be declared as internal entities\nwhose replacement text is the single character being escaped (or a character\nreference to that character; the double escaping here is'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'OPTIONAL'
            }
            'but harmless).\nFor example:'
          }
          div {
            class 'exampleInner'
            pre {
              '<!ENTITY lt     "&#38;#60;">\n<!ENTITY gt     "&#62;">\n<!ENTITY amp    "&#38;#38;">\n<!ENTITY apos   "&#39;">\n<!ENTITY quot   "&#34;">'
            }
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'Notations'
              id 'Notations'
            }
            '4.7 Notation Declarations'
          }
          p {
            '['
            a {
              name 'dt-notation'
              id 'dt-notation'
              title 'Notation'
              'Definition'
            }
            ':'
            b {
              'Notations'
            }
            'identify\nby name the format of'
            a {
              title 'Unparsed Entity'
              href '#dt-unparsed'
              'unparsed entities'
            }
            ',\nthe format of elements which bear a notation attribute, or the application\nto which a'
            a {
              title 'Processing instruction'
              href '#dt-pi'
              'processing instruction'
            }
            'is addressed.]'
          }
          p {
            '['
            a {
              name 'dt-notdecl'
              id 'dt-notdecl'
              title 'Notation Declaration'
              'Definition'
            }
            ':'
            b {
              'Notation declarations'
            }
            'provide a name for the notation, for use in entity and attribute-list declarations\nand in attribute specifications, and an external identifier for the notation\nwhich may allow an XML processor or its client application to locate a helper\napplication capable of processing data in the given notation.]'
          }
          h5 {
            a {
              name 'd0e5457'
              id 'd0e5457'
            }
            'Notation Declarations'
          }
          table {
            class 'scrap'
            summary 'Scrap'
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-NotationDecl'
                    id 'NT-NotationDecl'
                  }
                  '[82]'
                }
                td {
                  code {
                    'NotationDecl'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'<!NOTATION\''
                    a {
                      href '#NT-S'
                      'S'
                    }
                    a {
                      href '#NT-Name'
                      'Name'
                    }
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '('
                    a {
                      href '#NT-ExternalID'
                      'ExternalID'
                    }
                    '|'
                    a {
                      href '#NT-PublicID'
                      'PublicID'
                    }
                    ')'
                    a {
                      href '#NT-S'
                      'S'
                    }
                    '? \'>\''
                  }
                }
                td {
                  a {
                    href '#UniqueNotationName'
                    '[VC: Unique Notation Name]'
                  }
                }
              }
            }
            tbody {
              tr {
                valign 'baseline'
                td {
                  a {
                    name 'NT-PublicID'
                    id 'NT-PublicID'
                  }
                  '[83]'
                }
                td {
                  code {
                    'PublicID'
                  }
                }
                td {
                  '::='
                }
                td {
                  code {
                    '\'PUBLIC\''
                    a {
                      href '#NT-S'
                      'S'
                    }
                    a {
                      href '#NT-PubidLiteral'
                      'PubidLiteral'
                    }
                  }
                }
              }
            }
          }
          div {
            class 'constraint'
            p {
              class 'prefix'
              a {
                name 'UniqueNotationName'
                id 'UniqueNotationName'
              }
              b {
                'Validity constraint: Unique Notation Name'
              }
            }
            p {
              'A given'
              a {
                href '#NT-Name'
                'Name'
              }
              em {
                class 'rfc2119'
                title 'Keyword in RFC 2119 context'
                'MUST NOT'
              }
              'be declared in more than one notation declaration.'
            }
          }
          p {
            'XML processors'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'provide applications with the name and external identifier(s)\nof any notation declared and referred to in an attribute value, attribute\ndefinition, or entity declaration. They'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MAY'
            }
            'additionally resolve the external\nidentifier into the'
            a {
              title 'System Identifier'
              href '#dt-sysid'
              'system identifier'
            }
            ', file\nname, or other information needed to allow the application to call a processor\nfor data in the notation described. (It is not an error, however, for XML\ndocuments to declare and refer to notations for which notation-specific applications\nare not available on the system where the XML processor or application is\nrunning.)'
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-doc-entity'
              id 'sec-doc-entity'
            }
            '4.8 Document Entity'
          }
          p {
            '['
            a {
              name 'dt-docent'
              id 'dt-docent'
              title 'Document Entity'
              'Definition'
            }
            ': The'
            b {
              'document entity'
            }
            'serves as the root of the entity tree and a starting-point for an'
            a {
              title 'XML Processor'
              href '#dt-xml-proc'
              'XML processor'
            }
            '.] This specification does\nnot specify how the document entity is to be located by an XML processor;\nunlike other entities, the document entity has no name and might well appear\non a processor input stream without any identification at all.'
          }
        }
      }
      div {
        class 'div1'
        h2 {
          a {
            name 'sec-conformance'
            id 'sec-conformance'
          }
          '5 Conformance'
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'proc-types'
              id 'proc-types'
            }
            '5.1 Validating and Non-Validating Processors'
          }
          p {
            'Conforming'
            a {
              title 'XML Processor'
              href '#dt-xml-proc'
              'XML processors'
            }
            'fall into\ntwo classes: validating and non-validating.'
          }
          p {
            'Validating and non-validating processors alike'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'report violations of\nthis specification\'s well-formedness constraints in the content of the'
            a {
              title 'Document Entity'
              href '#dt-docent'
              'document entity'
            }
            'and any other'
            a {
              title 'Text Entity'
              href '#dt-parsedent'
              'parsed\nentities'
            }
            'that they read.'
          }
          p {
            '['
            a {
              name 'dt-validating'
              id 'dt-validating'
              title 'Validating Processor'
              'Definition'
            }
            ':'
            b {
              'Validating\nprocessors'
            }
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            ',\nat user option, report violations of the constraints expressed by\nthe declarations in the'
            a {
              title 'Document Type Declaration'
              href '#dt-doctype'
              'DTD'
            }
            ', and failures\nto fulfill the validity constraints given in this specification.]\nTo accomplish this, validating XML processors'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'read and process the entire\nDTD and all external parsed entities referenced in the document.'
          }
          p {
            'Non-validating processors are'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'REQUIRED'
            }
            'to check only the'
            a {
              title 'Document Entity'
              href '#dt-docent'
              'document\nentity'
            }
            ', including the entire internal DTD subset, for well-formedness. ['
            a {
              name 'dt-use-mdecl'
              id 'dt-use-mdecl'
              title 'Process Declarations'
              'Definition'
            }
            ':  While they are not required\nto check the document for validity, they are'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'REQUIRED'
            }
            'to'
            b {
              'process'
            }
            'all the declarations they read in the internal DTD subset and in any parameter\nentity that they read, up to the first reference to a parameter entity that\nthey do'
            em {
              'not'
            }
            'read; that is to say, they'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'use the information\nin those declarations to'
            a {
              href '#AVNormalize'
              cite {
                'normalize'
              }
            }
            'attribute values,'
            a {
              href '#included'
              cite {
                'include'
              }
            }
            'the replacement\ntext of internal entities, and supply'
            a {
              href '#sec-attr-defaults'
              cite {
                'default\nattribute values'
              }
            }
            '.] Except when'
            code {
              'standalone="yes"'
            }
            ', they'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST NOT'
            }
            a {
              title 'Process Declarations'
              href '#dt-use-mdecl'
              'process'
            }
            a {
              title 'entity declaration'
              href '#dt-entdecl'
              'entity\ndeclarations'
            }
            'or'
            a {
              title 'Attribute-List Declaration'
              href '#dt-attdecl'
              'attribute-list declarations'
            }
            'encountered after a reference to a parameter entity that is not read, since\nthe entity may have contained overriding declarations; when'
            code {
              'standalone="yes"'
            }
            ', processors'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'MUST'
            }
            'process these declarations.'
          }
          p {
            'Note that when processing invalid documents with a non-validating\nprocessor the application may not be presented with consistent\ninformation.  For example, several requirements for uniqueness\nwithin the document may not be met, including more than one element\nwith the same id, duplicate declarations of elements or notations\nwith the same name, etc.  In these cases the behavior of the parser\nwith respect to reporting such information to the application is\nundefined.'
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'safe-behavior'
              id 'safe-behavior'
            }
            '5.2 Using XML Processors'
          }
          p {
            'The behavior of a validating XML processor is highly predictable; it must\nread every piece of a document and report all well-formedness and validity\nviolations. Less is required of a non-validating processor; it need not read\nany part of the document other than the document entity. This has two effects\nthat may be important to users of XML processors:'
          }
          ul {
            li {
              p {
                'Certain well-formedness errors, specifically those that require reading\nexternal entities, may fail to be detected by a non-validating processor. Examples\ninclude the constraints entitled'
                a {
                  href '#wf-entdeclared'
                  cite {
                    'Entity Declared'
                  }
                }
                ','
                a {
                  href '#textent'
                  cite {
                    'Parsed Entity'
                  }
                }
                ', and'
                a {
                  href '#norecursion'
                  cite {
                    'No\nRecursion'
                  }
                }
                ', as well as some of the cases described as'
                a {
                  href '#forbidden'
                  cite {
                    'forbidden'
                  }
                }
                'in'
                a {
                  href '#entproc'
                  b {
                    '4.4 XML Processor Treatment of Entities and References'
                  }
                }
                '.'
              }
            }
            li {
              p {
                'The information passed from the processor to the application may\nvary, depending on whether the processor reads parameter and external entities.\nFor example, a non-validating processor may fail to'
                a {
                  href '#AVNormalize'
                  cite {
                    'normalize'
                  }
                }
                'attribute values,'
                a {
                  href '#included'
                  cite {
                    'include'
                  }
                }
                'the replacement\ntext of internal entities, or supply'
                a {
                  href '#sec-attr-defaults'
                  cite {
                    'default\nattribute values'
                  }
                }
                ', where doing so depends on having read declarations\nin external or parameter entities'
                span {
                  ', or in the internal subset after an unread \nparameter entity reference'
                }
                '.'
              }
            }
          }
          p {
            'For maximum reliability in interoperating between different XML processors,\napplications which use non-validating processors'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'SHOULD NOT'
            }
            'rely on any behaviors\nnot required of such processors. Applications which require DTD facilities not related to validation (such\nas the declaration of default attributes and internal entities that are or may be specified in\nexternal entities)'
            em {
              class 'rfc2119'
              title 'Keyword in RFC 2119 context'
              'SHOULD'
            }
            'use validating XML processors.'
          }
        }
      }
      div {
        class 'div1'
        h2 {
          a {
            name 'sec-notation'
            id 'sec-notation'
          }
          '6 Notation'
        }
        p {
          'The formal grammar of XML is given in this specification using a simple\nExtended Backus-Naur Form (EBNF) notation. Each rule in the grammar defines\none symbol, in the form'
        }
        div {
          class 'exampleInner'
          pre {
            'symbol ::= expression'
          }
        }
        p {
          'Symbols are written with an initial capital letter if they are the\nstart symbol of a regular language, otherwise with an initial lowercase letter.\nLiteral strings are quoted.'
        }
        p {
          'Within the expression on the right-hand side of a rule, the following expressions\nare used to match strings of one or more characters:'
        }
        dl {
          dt {
            class 'label'
            code {
              '#xN'
            }
          }
          dd {
            p {
              'where'
              code {
                'N'
              }
              'is a hexadecimal integer, the expression matches the character\nwhose number\n(code point) in ISO/IEC 10646 is'
              code {
                'N'
              }
              '. The number of leading zeros in the'
              code {
                '#xN'
              }
              'form is insignificant.'
            }
          }
          dt {
            class 'label'
            code {
              '[a-zA-Z]'
            }
            ','
            code {
              '[#xN-#xN]'
            }
          }
          dd {
            p {
              'matches any'
              a {
                href '#NT-Char'
                'Char'
              }
              'with a value in the range(s) indicated (inclusive).'
            }
          }
          dt {
            class 'label'
            code {
              '[abc]'
            }
            ','
            code {
              '[#xN#xN#xN]'
            }
          }
          dd {
            p {
              'matches any'
              a {
                href '#NT-Char'
                'Char'
              }
              'with a value among the characters\nenumerated. Enumerations and ranges can be mixed in one set of brackets.'
            }
          }
          dt {
            class 'label'
            code {
              '[^a-z]'
            }
            ','
            code {
              '[^#xN-#xN]'
            }
          }
          dd {
            p {
              'matches any'
              a {
                href '#NT-Char'
                'Char'
              }
              'with a value'
              em {
                'outside'
              }
              'the range\nindicated.'
            }
          }
          dt {
            class 'label'
            code {
              '[^abc]'
            }
            ','
            code {
              '[^#xN#xN#xN]'
            }
          }
          dd {
            p {
              'matches any'
              a {
                href '#NT-Char'
                'Char'
              }
              'with a value not among the characters given. Enumerations\nand ranges of forbidden values can be mixed in one set of brackets.'
            }
          }
          dt {
            class 'label'
            code {
              '"string"'
            }
          }
          dd {
            p {
              'matches a literal string'
              a {
                title 'match'
                href '#dt-match'
                'matching'
              }
              'that\ngiven inside the double quotes.'
            }
          }
          dt {
            class 'label'
            code {
              '\'string\''
            }
          }
          dd {
            p {
              'matches a literal string'
              a {
                title 'match'
                href '#dt-match'
                'matching'
              }
              'that\ngiven inside the single quotes.'
            }
          }
        }
        p {
          'These symbols may be combined to match more complex patterns as follows,\nwhere'
          code {
            'A'
          }
          'and'
          code {
            'B'
          }
          'represent simple expressions:'
        }
        dl {
          dt {
            class 'label'
            '('
            code {
              'expression'
            }
            ')'
          }
          dd {
            p {
              code {
                'expression'
              }
              'is treated as a unit and may be combined as described\nin this list.'
            }
          }
          dt {
            class 'label'
            code {
              'A?'
            }
          }
          dd {
            p {
              'matches'
              code {
                'A'
              }
              'or nothing; optional'
              code {
                'A'
              }
              '.'
            }
          }
          dt {
            class 'label'
            code {
              'A B'
            }
          }
          dd {
            p {
              'matches'
              code {
                'A'
              }
              'followed by'
              code {
                'B'
              }
              '. This\noperator has higher precedence than alternation; thus'
              code {
                'A B | C D'
              }
              'is identical to'
              code {
                '(A B) | (C D)'
              }
              '.'
            }
          }
          dt {
            class 'label'
            code {
              'A | B'
            }
          }
          dd {
            p {
              'matches'
              code {
                'A'
              }
              'or'
              code {
                'B'
              }
              '.'
            }
          }
          dt {
            class 'label'
            code {
              'A - B'
            }
          }
          dd {
            p {
              'matches any string that matches'
              code {
                'A'
              }
              'but does not match'
              code {
                'B'
              }
              '.'
            }
          }
          dt {
            class 'label'
            code {
              'A+'
            }
          }
          dd {
            p {
              'matches one or more occurrences of'
              code {
                'A'
              }
              '. Concatenation\nhas higher precedence than alternation; thus'
              code {
                'A+ | B+'
              }
              'is identical\nto'
              code {
                '(A+) | (B+)'
              }
              '.'
            }
          }
          dt {
            class 'label'
            code {
              'A*'
            }
          }
          dd {
            p {
              'matches zero or more occurrences of'
              code {
                'A'
              }
              '. Concatenation\nhas higher precedence than alternation; thus'
              code {
                'A* | B*'
              }
              'is identical\nto'
              code {
                '(A*) | (B*)'
              }
              '.'
            }
          }
        }
        p {
          'Other notations used in the productions are:'
        }
        dl {
          dt {
            class 'label'
            code {
              '/* ... */'
            }
          }
          dd {
            p {
              'comment.'
            }
          }
          dt {
            class 'label'
            code {
              '[ wfc: ... ]'
            }
          }
          dd {
            p {
              'well-formedness constraint; this identifies by name a constraint on'
              a {
                title 'Well-Formed'
                href '#dt-wellformed'
                'well-formed'
              }
              'documents associated with a production.'
            }
          }
          dt {
            class 'label'
            code {
              '[ vc: ... ]'
            }
          }
          dd {
            p {
              'validity constraint; this identifies by name a constraint on'
              a {
                title 'Validity'
                href '#dt-valid'
                'valid'
              }
              'documents associated with a production.'
            }
          }
        }
        p {
        }
      }
    }
    div {
      class 'back'
      div {
        class 'div1'
        h2 {
          a {
            name 'sec-bibliography'
            id 'sec-bibliography'
          }
          'A References'
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-existing-stds'
              id 'sec-existing-stds'
            }
            'A.1 Normative References'
          }
          dl {
            dt {
              class 'label'
              a {
                name 'IANA'
                id 'IANA'
              }
              'IANA-CHARSETS'
            }
            dd {
              '(Internet\nAssigned Numbers Authority)'
              a {
                href 'http://www.iana.org/assignments/character-sets'
                cite {
                  'Official Names for Character Sets'
                }
              }
              ',\ned. Keld Simonsen et al.  (See http://www.iana.org/assignments/character-sets.)'
            }
            dt {
              class 'label'
              a {
                name 'rfc2119'
                id 'rfc2119'
              }
              'IETF RFC 2119'
            }
            dd {
              'IETF\n(Internet Engineering Task Force).'
              a {
                href 'http://www.ietf.org/rfc/rfc2119.txt'
                cite {
                  'RFC 2119: Key words for use in RFCs to Indicate Requirement Levels'
                }
              }
              '.\nScott Bradner, 1997.  (See http://www.ietf.org/rfc/rfc2119.txt.)'
            }
            dt {
              class 'label'
              a {
                name 'RFC1766'
              }
              'IETF BCP 47'
            }
            dd {
              'IETF\n  (Internet Engineering Task Force).'
              cite {
                'BCP 47, consisting of'
                a {
                  href 'http://tools.ietf.org/html/rfc4646'
                  'RFC 4646: Tags for Identifying Languages'
                }
                ', and'
                a {
                  href 'http://tools.ietf.org/html/rfc4647'
                  'RFC 4647: Matching of Language Tags'
                }
              }
              ',\n\t\t\t\t\t\tA. Phillips, M. Davis. 2006.'
            }
            dt {
              class 'label'
              a {
                name 'rfc3986'
                id 'rfc3986'
              }
              'IETF RFC 3986'
            }
            dd {
              'IETF (Internet Engineering Task Force).'
              a {
                href 'http://www.ietf.org/rfc/rfc3986.txt'
                cite {
                  'RFC 3986: Uniform Resource Identifier (URI): Generic Syntax'
                }
              }
              '. T. Berners-Lee, R. Fielding, L. Masinter. 2005.  (See http://www.ietf.org/rfc/rfc3986.txt.)'
            }
            dt {
              class 'label'
              a {
                name 'ISO10646'
                id 'ISO10646'
              }
              'ISO/IEC 10646'
            }
            dd {
              'ISO (International\nOrganization for Standardization).'
              cite {
                'ISO/IEC 10646-1:2000. Information\ntechnology — Universal Multiple-Octet Coded Character Set (UCS) —\nPart 1: Architecture and Basic Multilingual Plane'
              }
              'and'
              cite {
                'ISO/IEC 10646-2:2001.\nInformation technology — Universal Multiple-Octet Coded Character Set (UCS) — Part 2:\nSupplementary Planes'
              }
              ', as, from time to time, amended, replaced by a new edition or\nexpanded by the addition of new parts. [Geneva]: International Organization for Standardization.\n(See'
              a {
                href 'http://www.iso.org/iso/home.htm'
                'http://www.iso.org/iso/home.htm'
              }
              'for the latest version.)'
            }
            dt {
              class 'label'
              a {
                name 'ISO10646-2000'
                id 'ISO10646-2000'
              }
              'ISO/IEC 10646:2000'
            }
            dd {
              'ISO (International\nOrganization for Standardization).'
              cite {
                'ISO/IEC 10646-1:2000. Information\ntechnology — Universal Multiple-Octet Coded Character Set (UCS) —\nPart 1: Architecture and Basic Multilingual Plane.'
              }
              '[Geneva]: International\nOrganization for Standardization, 2000.'
            }
            dt {
              class 'label'
              a {
                name 'Unicode'
                id 'Unicode'
              }
              'Unicode'
            }
            dd {
              'The Unicode Consortium.'
              em {
                'The Unicode\nStandard, Version'
                span {
                  '5.0.0,'
                }
              }
              span {
                'defined by: The Unicode Standard, Version 5.0 (Boston, MA,\nAddison-Wesley, 2007. ISBN 0-321-48091-0)'
              }
              '.'
            }
            dt {
              class 'label'
              a {
                name 'unipart15'
                id 'unipart15'
              }
              'UnicodeNormal'
            }
            dd {
              'The Unicode\nConsortium.'
              a {
                href 'http://unicode.org/reports/tr15/'
                cite {
                  'Unicode normalization forms'
                }
              }
              '.  Mark Davis and\nMartin Durst.  2008.  (See http://unicode.org/reports/tr15/.)'
            }
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'null'
              id 'null'
            }
            'A.2 Other References'
          }
          dl {
            dt {
              class 'label'
              a {
                name 'Aho'
                id 'Aho'
              }
              'Aho/Ullman'
            }
            dd {
              'Aho, Alfred V., Ravi Sethi, and Jeffrey D.\nUllman.'
              cite {
                'Compilers: Principles, Techniques, and Tools'
              }
              '.\nReading: Addison-Wesley, 1986, rpt. corr. 1988.'
            }
            dt {
              class 'label'
              a {
                name 'ABK'
                id 'ABK'
              }
              'Brüggemann-Klein'
            }
            dd {
              'Brüggemann-Klein,\nAnne.'
              a {
                href 'ftp://ftp.informatik.uni-freiburg.de/documents/papers/brueggem/habil.ps'
                cite {
                  'Formal Models in Document Processing'
                }
              }
              '. Habilitationsschrift. Faculty\nof Mathematics at the University of Freiburg, 1993.  (See ftp://ftp.informatik.uni-freiburg.de/documents/papers/brueggem/habil.ps.)'
            }
            dt {
              class 'label'
              a {
                name 'ABKDW'
                id 'ABKDW'
              }
              'Brüggemann-Klein and Wood'
            }
            dd {
              'Brüggemann-Klein,\nAnne, and Derick Wood.'
              cite {
                'Deterministic Regular Languages'
              }
              '.\nUniversität Freiburg, Institut für Informatik, Bericht 38, Oktober 1991. Extended\nabstract in A. Finkel, M. Jantzen, Hrsg., STACS 1992, S. 173-184. Springer-Verlag,\nBerlin 1992. Lecture Notes in Computer Science 577. Full version titled'
              cite {
                'One-Unambiguous\nRegular Languages'
              }
              'in Information and Computation 140 (2): 229-253,\nFebruary 1998.'
            }
            dt {
              class 'label'
              a {
                name 'Clark'
                id 'Clark'
              }
              'Clark'
            }
            dd {
              'James Clark.'
              a {
                href 'http://www.w3.org/TR/NOTE-sgml-xml-971215'
                cite {
                  'Comparison of SGML and XML'
                }
              }
              '.  (See http://www.w3.org/TR/NOTE-sgml-xml-971215.)'
            }
            dt {
              class 'label'
              a {
                name 'IANA-LANGCODES'
              }
              'IANA-LANGCODES'
            }
            dd {
              '(Internet\nAssigned Numbers Authority)'
              a {
                href 'http://www.iana.org/assignments/language-subtag-registry'
                cite {
                  'Registry of Language Tags'
                }
              }
              '(See http://www.iana.org/assignments/language-subtag-registry.)'
            }
            dt {
              class 'label'
              a {
                name 'RFC2141'
                id 'RFC2141'
              }
              'IETF RFC 2141'
            }
            dd {
              'IETF\n(Internet Engineering Task Force).'
              a {
                href 'http://www.ietf.org/rfc/rfc2141.txt'
                cite {
                  'RFC 2141: URN Syntax'
                }
              }
              ', ed.\nR. Moats. 1997.   (See http://www.ietf.org/rfc/rfc2141.txt.)'
            }
            dt {
              class 'label'
              a {
                name 'rfc2376'
                id 'rfc2376'
              }
              'IETF RFC 3023'
            }
            dd {
              'IETF\n(Internet Engineering Task Force).'
              a {
                href 'http://www.ietf.org/rfc/rfc3023.txt'
                cite {
                  'RFC 3023: XML Media Types'
                }
              }
              '.\neds. M. Murata, S. St.Laurent, D. Kohn. 2001.  (See http://www.ietf.org/rfc/rfc3023.txt.)'
            }
            dt {
              class 'label'
              a {
                name 'rfc2781'
                id 'rfc2781'
              }
              'IETF RFC 2781'
            }
            dd {
              'IETF\n(Internet Engineering Task Force).'
              a {
                href 'http://www.ietf.org/rfc/rfc2781.txt'
                cite {
                  'RFC 2781: UTF-16, an encoding\nof ISO 10646'
                }
              }
              ', ed. P. Hoffman, F. Yergeau. 2000.  (See http://www.ietf.org/rfc/rfc2781.txt.)'
            }
            dt {
              class 'label'
              a {
                name 'ISO639'
                id 'ISO639'
              }
              'ISO 639'
            }
            dd {
              '(International Organization for Standardization).'
              cite {
                'ISO 639:1988 (E).\nCode for the representation of names of languages.'
              }
              '[Geneva]: International\nOrganization for Standardization, 1988.'
            }
            dt {
              class 'label'
              a {
                name 'ISO3166'
                id 'ISO3166'
              }
              'ISO 3166'
            }
            dd {
              '(International Organization for Standardization).'
              cite {
                'ISO 3166-1:1997\n(E). Codes for the representation of names of countries and their subdivisions —\nPart 1: Country codes'
              }
              '[Geneva]: International Organization for\nStandardization, 1997.'
            }
            dt {
              class 'label'
              a {
                name 'ISO8879'
                id 'ISO8879'
              }
              'ISO 8879'
            }
            dd {
              'ISO (International Organization for Standardization).'
              cite {
                'ISO\n8879:1986(E). Information processing — Text and Office Systems —\nStandard Generalized Markup Language (SGML).'
              }
              'First edition —\n1986-10-15. [Geneva]: International Organization for Standardization, 1986.'
            }
            dt {
              class 'label'
              a {
                name 'ISO10744'
                id 'ISO10744'
              }
              'ISO/IEC 10744'
            }
            dd {
              'ISO (International Organization for\nStandardization).'
              cite {
                'ISO/IEC 10744-1992 (E). Information technology —\nHypermedia/Time-based Structuring Language (HyTime).'
              }
              '[Geneva]:\nInternational Organization for Standardization, 1992.'
              em {
                'Extended Facilities\nAnnexe.'
              }
              '[Geneva]: International Organization for Standardization, 1996.'
            }
            dt {
              class 'label'
              a {
                name 'websgml'
                id 'websgml'
              }
              'WEBSGML'
            }
            dd {
              'ISO\n(International Organization for Standardization).'
              a {
                href 'http://www.sgmlsource.com/8879/n0029.htm'
                cite {
                  'ISO 8879:1986\nTC2. Information technology — Document Description and Processing Languages'
                }
              }
              '.\n[Geneva]: International Organization for Standardization, 1998.  (See http://www.sgmlsource.com/8879/n0029.htm.)'
            }
            dt {
              class 'label'
              a {
                name 'xml-names'
                id 'xml-names'
              }
              'XML Names'
            }
            dd {
              'Tim Bray,\nDave Hollander, and Andrew Layman, editors.'
              a {
                href 'http://www.w3.org/TR/xml-names/'
                cite {
                  'Namespaces in XML'
                }
              }
              '.\nTextuality, Hewlett-Packard, and Microsoft. World Wide Web Consortium, 1999.  (See http://www.w3.org/TR/xml-names/.)'
            }
          }
        }
      }
      div {
        class 'div1'
        h2 {
          a {
            name 'CharClasses'
            id 'CharClasses'
          }
          'B Character Classes'
        }
        p {
          'Because of changes to productions'
          a {
            href '#NT-NameStartChar'
            '[4]'
          }
          'and'
          a {
            href '#NT-Name'
            '[5]'
          }
          ', the productions in\n\t\t\t\tthis Appendix are now orphaned and not used anymore in determining\n\t\t\t\tname characters.  This Appendix may be removed in a future edition of \n\t\t\t\tthis specification; other specifications that wish to refer to the productions herein should\n\t\t\t\tdo so by means of a reference to the relevant production(s) in the'
          a {
            href 'http://www.w3.org/TR/2006/REC-xml-20060816/'
            'Fourth Edition'
          }
          'of this specification.'
        }
        p {
          'Following the characteristics defined in the Unicode standard, characters\nare classed as base characters (among others, these contain the alphabetic\ncharacters of the Latin alphabet), ideographic characters, and combining characters (among\nothers, this class contains most diacritics). Digits and extenders are also\ndistinguished.'
        }
        h5 {
          a {
            name 'CHARACTERS'
            id 'CHARACTERS'
          }
          'Characters'
        }
        table {
          class 'scrap'
          summary 'Scrap'
          tbody {
            tr {
              valign 'baseline'
              td {
                a {
                  name 'NT-Letter'
                  id 'NT-Letter'
                }
                '[84]'
              }
              td {
                code {
                  'Letter'
                }
              }
              td {
                '::='
              }
              td {
                code {
                  a {
                    href '#NT-BaseChar'
                    'BaseChar'
                  }
                  '|'
                  a {
                    href '#NT-Ideographic'
                    'Ideographic'
                  }
                }
              }
            }
            tr {
              valign 'baseline'
              td {
                a {
                  name 'NT-BaseChar'
                  id 'NT-BaseChar'
                }
                '[85]'
              }
              td {
                code {
                  'BaseChar'
                }
              }
              td {
                '::='
              }
              td {
                code {
                  '[#x0041-#x005A] | [#x0061-#x007A] | [#x00C0-#x00D6]\n| [#x00D8-#x00F6] | [#x00F8-#x00FF] | [#x0100-#x0131] | [#x0134-#x013E]\n| [#x0141-#x0148] | [#x014A-#x017E] | [#x0180-#x01C3] | [#x01CD-#x01F0]\n| [#x01F4-#x01F5] | [#x01FA-#x0217] | [#x0250-#x02A8] | [#x02BB-#x02C1]\n| #x0386 | [#x0388-#x038A] | #x038C | [#x038E-#x03A1]\n| [#x03A3-#x03CE] | [#x03D0-#x03D6] | #x03DA | #x03DC\n| #x03DE | #x03E0 | [#x03E2-#x03F3] | [#x0401-#x040C]\n| [#x040E-#x044F] | [#x0451-#x045C] | [#x045E-#x0481] | [#x0490-#x04C4]\n| [#x04C7-#x04C8] | [#x04CB-#x04CC] | [#x04D0-#x04EB] | [#x04EE-#x04F5]\n| [#x04F8-#x04F9] | [#x0531-#x0556] | #x0559 | [#x0561-#x0586]\n| [#x05D0-#x05EA] | [#x05F0-#x05F2] | [#x0621-#x063A] | [#x0641-#x064A]\n| [#x0671-#x06B7] | [#x06BA-#x06BE] | [#x06C0-#x06CE] | [#x06D0-#x06D3]\n| #x06D5 | [#x06E5-#x06E6] | [#x0905-#x0939] | #x093D\n| [#x0958-#x0961] | [#x0985-#x098C] | [#x098F-#x0990] | [#x0993-#x09A8]\n| [#x09AA-#x09B0] | #x09B2 | [#x09B6-#x09B9] | [#x09DC-#x09DD]\n| [#x09DF-#x09E1] | [#x09F0-#x09F1] | [#x0A05-#x0A0A] | [#x0A0F-#x0A10]\n| [#x0A13-#x0A28] | [#x0A2A-#x0A30] | [#x0A32-#x0A33] | [#x0A35-#x0A36]\n| [#x0A38-#x0A39] | [#x0A59-#x0A5C] | #x0A5E | [#x0A72-#x0A74]\n| [#x0A85-#x0A8B] | #x0A8D | [#x0A8F-#x0A91] | [#x0A93-#x0AA8]\n| [#x0AAA-#x0AB0] | [#x0AB2-#x0AB3] | [#x0AB5-#x0AB9] | #x0ABD\n| #x0AE0 | [#x0B05-#x0B0C] | [#x0B0F-#x0B10] | [#x0B13-#x0B28]\n| [#x0B2A-#x0B30] | [#x0B32-#x0B33] | [#x0B36-#x0B39] | #x0B3D\n| [#x0B5C-#x0B5D] | [#x0B5F-#x0B61] | [#x0B85-#x0B8A] | [#x0B8E-#x0B90]\n| [#x0B92-#x0B95] | [#x0B99-#x0B9A] | #x0B9C | [#x0B9E-#x0B9F]\n| [#x0BA3-#x0BA4] | [#x0BA8-#x0BAA] | [#x0BAE-#x0BB5] | [#x0BB7-#x0BB9]\n| [#x0C05-#x0C0C] | [#x0C0E-#x0C10] | [#x0C12-#x0C28] | [#x0C2A-#x0C33]\n| [#x0C35-#x0C39] | [#x0C60-#x0C61] | [#x0C85-#x0C8C] | [#x0C8E-#x0C90]\n| [#x0C92-#x0CA8] | [#x0CAA-#x0CB3] | [#x0CB5-#x0CB9] | #x0CDE\n| [#x0CE0-#x0CE1] | [#x0D05-#x0D0C] | [#x0D0E-#x0D10] | [#x0D12-#x0D28]\n| [#x0D2A-#x0D39] | [#x0D60-#x0D61] | [#x0E01-#x0E2E] | #x0E30\n| [#x0E32-#x0E33] | [#x0E40-#x0E45] | [#x0E81-#x0E82] | #x0E84\n| [#x0E87-#x0E88] | #x0E8A | #x0E8D | [#x0E94-#x0E97]\n| [#x0E99-#x0E9F] | [#x0EA1-#x0EA3] | #x0EA5 | #x0EA7\n| [#x0EAA-#x0EAB] | [#x0EAD-#x0EAE] | #x0EB0 | [#x0EB2-#x0EB3]\n| #x0EBD | [#x0EC0-#x0EC4] | [#x0F40-#x0F47] | [#x0F49-#x0F69]\n| [#x10A0-#x10C5] | [#x10D0-#x10F6] | #x1100 | [#x1102-#x1103]\n| [#x1105-#x1107] | #x1109 | [#x110B-#x110C] | [#x110E-#x1112]\n| #x113C | #x113E | #x1140 | #x114C | #x114E | #x1150\n| [#x1154-#x1155] | #x1159 | [#x115F-#x1161] | #x1163\n| #x1165 | #x1167 | #x1169 | [#x116D-#x116E] | [#x1172-#x1173]\n| #x1175 | #x119E | #x11A8 | #x11AB | [#x11AE-#x11AF]\n| [#x11B7-#x11B8] | #x11BA | [#x11BC-#x11C2] | #x11EB\n| #x11F0 | #x11F9 | [#x1E00-#x1E9B] | [#x1EA0-#x1EF9]\n| [#x1F00-#x1F15] | [#x1F18-#x1F1D] | [#x1F20-#x1F45] | [#x1F48-#x1F4D]\n| [#x1F50-#x1F57] | #x1F59 | #x1F5B | #x1F5D | [#x1F5F-#x1F7D]\n| [#x1F80-#x1FB4] | [#x1FB6-#x1FBC] | #x1FBE | [#x1FC2-#x1FC4]\n| [#x1FC6-#x1FCC] | [#x1FD0-#x1FD3] | [#x1FD6-#x1FDB] | [#x1FE0-#x1FEC]\n| [#x1FF2-#x1FF4] | [#x1FF6-#x1FFC] | #x2126 | [#x212A-#x212B]\n| #x212E | [#x2180-#x2182] | [#x3041-#x3094] | [#x30A1-#x30FA]\n| [#x3105-#x312C] | [#xAC00-#xD7A3]'
                }
              }
            }
            tr {
              valign 'baseline'
              td {
                a {
                  name 'NT-Ideographic'
                  id 'NT-Ideographic'
                }
                '[86]'
              }
              td {
                code {
                  'Ideographic'
                }
              }
              td {
                '::='
              }
              td {
                code {
                  '[#x4E00-#x9FA5] | #x3007 | [#x3021-#x3029]'
                }
              }
            }
            tr {
              valign 'baseline'
              td {
                a {
                  name 'NT-CombiningChar'
                  id 'NT-CombiningChar'
                }
                '[87]'
              }
              td {
                code {
                  'CombiningChar'
                }
              }
              td {
                '::='
              }
              td {
                code {
                  '[#x0300-#x0345] | [#x0360-#x0361] | [#x0483-#x0486]\n| [#x0591-#x05A1] | [#x05A3-#x05B9] | [#x05BB-#x05BD] | #x05BF\n| [#x05C1-#x05C2] | #x05C4 | [#x064B-#x0652] | #x0670\n| [#x06D6-#x06DC] | [#x06DD-#x06DF] | [#x06E0-#x06E4] | [#x06E7-#x06E8]\n| [#x06EA-#x06ED] | [#x0901-#x0903] | #x093C | [#x093E-#x094C]\n| #x094D | [#x0951-#x0954] | [#x0962-#x0963] | [#x0981-#x0983]\n| #x09BC | #x09BE | #x09BF | [#x09C0-#x09C4] | [#x09C7-#x09C8]\n| [#x09CB-#x09CD] | #x09D7 | [#x09E2-#x09E3] | #x0A02\n| #x0A3C | #x0A3E | #x0A3F | [#x0A40-#x0A42] | [#x0A47-#x0A48]\n| [#x0A4B-#x0A4D] | [#x0A70-#x0A71] | [#x0A81-#x0A83] | #x0ABC\n| [#x0ABE-#x0AC5] | [#x0AC7-#x0AC9] | [#x0ACB-#x0ACD] | [#x0B01-#x0B03]\n| #x0B3C | [#x0B3E-#x0B43] | [#x0B47-#x0B48] | [#x0B4B-#x0B4D]\n| [#x0B56-#x0B57] | [#x0B82-#x0B83] | [#x0BBE-#x0BC2] | [#x0BC6-#x0BC8]\n| [#x0BCA-#x0BCD] | #x0BD7 | [#x0C01-#x0C03] | [#x0C3E-#x0C44]\n| [#x0C46-#x0C48] | [#x0C4A-#x0C4D] | [#x0C55-#x0C56] | [#x0C82-#x0C83]\n| [#x0CBE-#x0CC4] | [#x0CC6-#x0CC8] | [#x0CCA-#x0CCD] | [#x0CD5-#x0CD6]\n| [#x0D02-#x0D03] | [#x0D3E-#x0D43] | [#x0D46-#x0D48] | [#x0D4A-#x0D4D]\n| #x0D57 | #x0E31 | [#x0E34-#x0E3A] | [#x0E47-#x0E4E]\n| #x0EB1 | [#x0EB4-#x0EB9] | [#x0EBB-#x0EBC] | [#x0EC8-#x0ECD]\n| [#x0F18-#x0F19] | #x0F35 | #x0F37 | #x0F39 | #x0F3E\n| #x0F3F | [#x0F71-#x0F84] | [#x0F86-#x0F8B] | [#x0F90-#x0F95]\n| #x0F97 | [#x0F99-#x0FAD] | [#x0FB1-#x0FB7] | #x0FB9\n| [#x20D0-#x20DC] | #x20E1 | [#x302A-#x302F] | #x3099\n| #x309A'
                }
              }
            }
            tr {
              valign 'baseline'
              td {
                a {
                  name 'NT-Digit'
                  id 'NT-Digit'
                }
                '[88]'
              }
              td {
                code {
                  'Digit'
                }
              }
              td {
                '::='
              }
              td {
                code {
                  '[#x0030-#x0039] | [#x0660-#x0669] | [#x06F0-#x06F9]\n| [#x0966-#x096F] | [#x09E6-#x09EF] | [#x0A66-#x0A6F] | [#x0AE6-#x0AEF]\n| [#x0B66-#x0B6F] | [#x0BE7-#x0BEF] | [#x0C66-#x0C6F] | [#x0CE6-#x0CEF]\n| [#x0D66-#x0D6F] | [#x0E50-#x0E59] | [#x0ED0-#x0ED9] | [#x0F20-#x0F29]'
                }
              }
            }
            tr {
              valign 'baseline'
              td {
                a {
                  name 'NT-Extender'
                  id 'NT-Extender'
                }
                '[89]'
              }
              td {
                code {
                  'Extender'
                }
              }
              td {
                '::='
              }
              td {
                code {
                  '#x00B7 | #x02D0 | #x02D1 | #x0387 | #x0640\n| #x0E46 | #x0EC6 | #x3005 | [#x3031-#x3035] | [#x309D-#x309E]\n| [#x30FC-#x30FE]'
                }
              }
            }
          }
        }
        p {
          'The character classes defined here can be derived from the Unicode 2.0\ncharacter database as follows:'
        }
        ul {
          li {
            p {
              'Name start characters must have one of the categories Ll, Lu, Lo,\nLt, Nl.'
            }
          }
          li {
            p {
              'Name characters other than Name-start characters must have one of\nthe categories Mc, Me, Mn, Lm, or Nd.'
            }
          }
          li {
            p {
              'Characters in the compatibility area (i.e. with character code greater\nthan #xF900 and less than #xFFFE) are not allowed in XML names.'
            }
          }
          li {
            p {
              'Characters which have a font or compatibility decomposition (i.e.\nthose with a "compatibility formatting tag" in field 5 of the\ndatabase -- marked by field 5 beginning with a "<") are not\nallowed.'
            }
          }
          li {
            p {
              'The following characters are treated as name-start characters rather\nthan name characters, because the property file classifies them as Alphabetic:\n[#x02BB-#x02C1], #x0559, #x06E5, #x06E6.'
            }
          }
          li {
            p {
              'Characters #x20DD-#x20E0 are excluded (in accordance with Unicode 2.0,\nsection 5.14).'
            }
          }
          li {
            p {
              'Character #x00B7 is classified as an extender, because the property\nlist so identifies it.'
            }
          }
          li {
            p {
              'Character #x0387 is added as a name character, because #x00B7 is\nits canonical equivalent.'
            }
          }
          li {
            p {
              'Characters \':\' and \'_\' are allowed as name-start characters.'
            }
          }
          li {
            p {
              'Characters \'-\' and \'.\' are allowed as name characters.'
            }
          }
        }
      }
      div {
        class 'div1'
        h2 {
          a {
            name 'sec-xml-and-sgml'
            id 'sec-xml-and-sgml'
          }
          'C XML and SGML (Non-Normative)'
        }
        p {
          'XML\nis designed to be a subset of SGML, in that every XML document should also\nbe a conforming SGML document. For a detailed comparison of the additional\nrestrictions that XML places on documents beyond those of SGML, see'
          a {
            href '#Clark'
            '[Clark]'
          }
          '.'
        }
      }
      div {
        class 'div1'
        h2 {
          a {
            name 'sec-entexpand'
            id 'sec-entexpand'
          }
          'D Expansion of Entity and Character References (Non-Normative)'
        }
        p {
          'This appendix contains some examples illustrating the sequence of entity-\nand character-reference recognition and expansion, as specified in'
          a {
            href '#entproc'
            b {
              '4.4 XML Processor Treatment of Entities and References'
            }
          }
          '.'
        }
        p {
          'If the DTD contains the declaration'
        }
        div {
          class 'exampleInner'
          pre {
            '<!ENTITY example "<p>An ampersand (&#38;#38;) may be escaped\nnumerically (&#38;#38;#38;) or with a general entity\n(&amp;amp;).</p>" >'
          }
        }
        p {
          'then the XML processor will recognize the character references when it\nparses the entity declaration, and resolve them before storing the following\nstring as the value of the entity "'
          code {
            'example'
          }
          '":'
        }
        div {
          class 'exampleInner'
          pre {
            '<p>An ampersand (&#38;) may be escaped\nnumerically (&#38;#38;) or with a general entity\n(&amp;amp;).</p>'
          }
        }
        p {
          'A reference in the document to "'
          code {
            '&example;'
          }
          '"\nwill cause the text to be reparsed, at which time the start- and end-tags\nof the'
          code {
            'p'
          }
          'element will be recognized and the three references will\nbe recognized and expanded, resulting in a'
          code {
            'p'
          }
          'element with the following\ncontent (all data, no delimiters or markup):'
        }
        div {
          class 'exampleInner'
          pre {
            'An ampersand (&) may be escaped\nnumerically (&#38;) or with a general entity\n(&amp;).'
          }
        }
        p {
          'A more complex example will illustrate the rules and their effects fully.\nIn the following example, the line numbers are solely for reference.'
        }
        div {
          class 'exampleInner'
          pre {
            '1 <?xml version=\'1.0\'?>\n2 <!DOCTYPE test [\n3 <!ELEMENT test (#PCDATA) >\n4 <!ENTITY % xx \'&#37;zz;\'>\n5 <!ENTITY % zz \'&#60;!ENTITY tricky "error-prone" >\' >\n6 %xx;\n7 ]>\n8 <test>This sample shows a &tricky; method.</test>'
          }
        }
        p {
          'This produces the following:'
        }
        ul {
          li {
            p {
              'in line 4, the reference to character 37 is expanded immediately,\nand the parameter entity "'
              code {
                'xx'
              }
              '" is stored in the symbol\ntable with the value "'
              code {
                '%zz;'
              }
              '". Since the replacement\ntext is not rescanned, the reference to parameter entity "'
              code {
                'zz'
              }
              '"\nis not recognized. (And it would be an error if it were, since "'
              code {
                'zz'
              }
              '"\nis not yet declared.)'
            }
          }
          li {
            p {
              'in line 5, the character reference "'
              code {
                '&#60;'
              }
              '"\nis expanded immediately and the parameter entity "'
              code {
                'zz'
              }
              '"\nis stored with the replacement text "'
              code {
                '<!ENTITY tricky "error-prone"\n>'
              }
              '", which is a well-formed entity declaration.'
            }
          }
          li {
            p {
              'in line 6, the reference to "'
              code {
                'xx'
              }
              '" is recognized,\nand the replacement text of "'
              code {
                'xx'
              }
              '" (namely "'
              code {
                '%zz;'
              }
              '")\nis parsed. The reference to "'
              code {
                'zz'
              }
              '" is recognized in\nits turn, and its replacement text ("'
              code {
                '<!ENTITY tricky "error-prone"\n>'
              }
              '") is parsed. The general entity "'
              code {
                'tricky'
              }
              '"\nhas now been declared, with the replacement text "'
              code {
                'error-prone'
              }
              '".'
            }
          }
          li {
            p {
              'in line 8, the reference to the general entity "'
              code {
                'tricky'
              }
              '"\nis recognized, and it is expanded, so the full content of the'
              code {
                'test'
              }
              'element is the self-describing (and ungrammatical) string'
              em {
                'This sample\nshows a error-prone method.'
              }
            }
          }
        }
        p {
          'In the following example'
        }
        div {
          class 'exampleInner'
          pre {
            '<!DOCTYPE foo [ \n<!ENTITY x "&lt;"> \n]> \n<foo attr="&x;"/>'
          }
        }
        p {
          'the replacement text of x is the four characters "&lt;" because\n\t\t\t\treferences to general entities in entity values are'
          a {
            href '#bypass'
            cite {
              'bypassed'
            }
          }
          '.\n\t\t\t\tThe replacement text of lt is a character reference to\n\t\t\t\tthe less-than character, for example the five characters "&#60;"\n\t\t\t\t(see'
          a {
            href '#sec-predefined-ent'
            b {
              '4.6 Predefined Entities'
            }
          }
          ').  Since neither of these contains a less-than character\n\t\t\t\tthe result is well-formed.'
        }
        p {
          'If the definition of x had been'
        }
        div {
          class 'exampleInner'
          pre {
            '<!ENTITY x "&#60;">'
          }
        }
        p {
          'then the document would not have been well-formed, because the\n\t\t\t\treplacement text of x would be the single character "<" which\n\t\t\t\tis not permitted in attribute values (see'
          a {
            href '#CleanAttrVals'
            cite {
              'WFC: No < in Attribute Values'
            }
          }
          ').'
        }
      }
      div {
        class 'div1'
        h2 {
          a {
            name 'determinism'
            id 'determinism'
          }
          'E Deterministic Content Models (Non-Normative)'
        }
        p {
          'As\nnoted in'
          a {
            href '#sec-element-content'
            b {
              '3.2.1 Element Content'
            }
          }
          ', it is required that content\nmodels in element type declarations be deterministic. This requirement is'
          a {
            title 'For Compatibility'
            href '#dt-compat'
            'for compatibility'
          }
          'with SGML (which calls deterministic\ncontent models "unambiguous"); XML processors built\nusing SGML systems may flag non-deterministic content models as errors.'
        }
        p {
          'For example, the content model'
          code {
            '((b, c) | (b, d))'
          }
          'is non-deterministic,\nbecause given an initial'
          code {
            'b'
          }
          'the XML processor\ncannot know which'
          code {
            'b'
          }
          'in the model is being matched without looking\nahead to see which element follows the'
          code {
            'b'
          }
          '. In this case, the two references\nto'
          code {
            'b'
          }
          'can be collapsed into a single reference, making the model read'
          code {
            '(b,\n(c | d))'
          }
          '. An initial'
          code {
            'b'
          }
          'now clearly matches only a single name\nin the content model. The processor doesn\'t need to look ahead to see what follows; either'
          code {
            'c'
          }
          'or'
          code {
            'd'
          }
          'would be accepted.'
        }
        p {
          'More formally: a finite state automaton may be constructed from the content\nmodel using the standard algorithms, e.g. algorithm 3.5 in section 3.9 of\nAho, Sethi, and Ullman'
          a {
            href '#Aho'
            '[Aho/Ullman]'
          }
          '. In many such algorithms, a follow\nset is constructed for each position in the regular expression (i.e., each\nleaf node in the syntax tree for the regular expression); if any position\nhas a follow set in which more than one following position is labeled with\nthe same element type name, then the content model is in error and may be\nreported as an error.'
        }
        p {
          'Algorithms exist which allow many but not all non-deterministic content\nmodels to be reduced automatically to equivalent deterministic models; see\nBrüggemann-Klein 1991'
          a {
            href '#ABK'
            '[Brüggemann-Klein]'
          }
          '.'
        }
      }
      div {
        class 'div1'
        h2 {
          a {
            name 'sec-guessing'
            id 'sec-guessing'
          }
          'F Autodetection of Character Encodings (Non-Normative)'
        }
        p {
          'The XML encoding declaration functions as an internal label on each entity,\nindicating which character encoding is in use. Before an XML processor can\nread the internal label, however, it apparently has to know what character\nencoding is in use—which is what the internal label is trying to indicate.\nIn the general case, this is a hopeless situation. It is not entirely hopeless\nin XML, however, because XML limits the general case in two ways: each implementation\nis assumed to support only a finite set of character encodings, and the XML\nencoding declaration is restricted in position and content in order to make\nit feasible to autodetect the character encoding in use in each entity in\nnormal cases. Also, in many cases other sources of information are available\nin addition to the XML data stream itself. Two cases may be distinguished,\ndepending on whether the XML entity is presented to the processor without,\nor with, any accompanying (external) information. We'
          span {
            'will'
          }
          'consider'
          span {
            'these cases in turn.'
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-guessing-no-ext-info'
              id 'sec-guessing-no-ext-info'
            }
            'F.1 Detection Without External Encoding Information'
          }
          p {
            'Because each XML entity not accompanied by external\nencoding information and not in UTF-8 or UTF-16 encoding must\nbegin with an XML encoding declaration, in which the first characters must\nbe \''
            code {
              '<?xml'
            }
            '\', any conforming processor can detect, after two\nto four octets of input, which of the following cases apply. In reading this\nlist, it may help to know that in UCS-4, \'<\' is "'
            code {
              '#x0000003C'
            }
            '"\nand \'?\' is "'
            code {
              '#x0000003F'
            }
            '", and the Byte Order Mark\nrequired of UTF-16 data streams is "'
            code {
              '#xFEFF'
            }
            '". The notation'
            var {
              '##'
            }
            'is used to denote any byte value except that two consecutive'
            var {
              '##'
            }
            's cannot be both 00.'
          }
          p {
            'With a Byte Order Mark:'
          }
          table {
            border '1'
            frame 'border'
            tbody {
              tr {
                td {
                  code {
                    '00 00 FE\nFF'
                  }
                }
                td {
                  'UCS-4, big-endian machine (1234 order)'
                }
              }
              tr {
                td {
                  code {
                    'FF\nFE 00 00'
                  }
                }
                td {
                  'UCS-4, little-endian machine (4321 order)'
                }
              }
              tr {
                td {
                  code {
                    '00 00 FF FE'
                  }
                }
                td {
                  'UCS-4, unusual octet order (2143)'
                }
              }
              tr {
                td {
                  code {
                    'FE FF 00 00'
                  }
                }
                td {
                  'UCS-4, unusual octet order (3412)'
                }
              }
              tr {
                td {
                  code {
                    'FE FF ## ##'
                  }
                }
                td {
                  'UTF-16, big-endian'
                }
              }
              tr {
                td {
                  code {
                    'FF FE ## ##'
                  }
                }
                td {
                  'UTF-16, little-endian'
                }
              }
              tr {
                td {
                  code {
                    'EF BB BF'
                  }
                }
                td {
                  'UTF-8'
                }
              }
            }
          }
          p {
            'Without a Byte Order Mark:'
          }
          table {
            border '1'
            frame 'border'
            tbody {
              tr {
                td {
                  code {
                    '00 00 00 3C'
                  }
                }
                td {
                  rowspan '4'
                  'UCS-4 or other encoding with a 32-bit code unit and ASCII\ncharacters encoded as ASCII values, in respectively big-endian (1234), little-endian\n(4321) and two unusual byte orders (2143 and 3412). The encoding declaration\nmust be read to determine which of UCS-4 or other supported 32-bit encodings\napplies.'
                }
              }
              tr {
                td {
                  code {
                    '3C 00 00 00'
                  }
                }
              }
              tr {
                td {
                  code {
                    '00 00 3C 00'
                  }
                }
              }
              tr {
                td {
                  code {
                    '00 3C 00 00'
                  }
                }
              }
              tr {
                td {
                  code {
                    '00 3C 00 3F'
                  }
                }
                td {
                  'UTF-16BE or big-endian ISO-10646-UCS-2\nor other encoding with a 16-bit code unit in big-endian order and ASCII characters\nencoded as ASCII values (the encoding declaration must be read to determine\nwhich)'
                }
              }
              tr {
                td {
                  code {
                    '3C 00 3F 00'
                  }
                }
                td {
                  'UTF-16LE or little-endian\nISO-10646-UCS-2 or other encoding with a 16-bit code unit in little-endian\norder and ASCII characters encoded as ASCII values (the encoding declaration\nmust be read to determine which)'
                }
              }
              tr {
                td {
                  code {
                    '3C 3F 78 6D'
                  }
                }
                td {
                  'UTF-8, ISO 646, ASCII, some part of ISO 8859, Shift-JIS, EUC, or any other\n7-bit, 8-bit, or mixed-width encoding which ensures that the characters of\nASCII have their normal positions, width, and values; the actual encoding\ndeclaration must be read to detect which of these applies, but since all of\nthese encodings use the same bit patterns for the relevant ASCII characters,\nthe encoding declaration itself may be read reliably'
                }
              }
              tr {
                td {
                  code {
                    '4C\n6F A7 94'
                  }
                }
                td {
                  'EBCDIC (in some flavor; the full encoding declaration\nmust be read to tell which code page is in use)'
                }
              }
              tr {
                td {
                  'Other'
                }
                td {
                  'UTF-8 without an encoding declaration, or else the data stream is mislabeled\n(lacking a required encoding declaration), corrupt, fragmentary, or enclosed\nin a wrapper of some kind'
                }
              }
            }
          }
          div {
            class 'note'
            p {
              class 'prefix'
              b {
                'Note:'
              }
            }
            p {
              'In cases above which do not require reading the encoding declaration to\ndetermine the encoding, section 4.3.3 still requires that the encoding declaration,\nif present, be read and that the encoding name be checked to match the actual\nencoding of the entity. Also, it is possible that new character encodings\nwill be invented that will make it necessary to use the encoding declaration\nto determine the encoding, in cases where this is not required at present.'
            }
          }
          p {
            'This level of autodetection is enough to read the XML encoding declaration\nand parse the character-encoding identifier, which is still necessary to distinguish\nthe individual members of each family of encodings (e.g. to tell UTF-8 from\n8859, and the parts of 8859 from each other, or to distinguish the specific\nEBCDIC code page in use, and so on).'
          }
          p {
            'Because the contents of the encoding declaration are restricted to characters\nfrom the ASCII repertoire (however encoded),\na processor can reliably read the entire encoding declaration as soon as it\nhas detected which family of encodings is in use. Since in practice, all widely\nused character encodings fall into one of the categories above, the XML encoding\ndeclaration allows reasonably reliable in-band labeling of character encodings,\neven when external sources of information at the operating-system or transport-protocol\nlevel are unreliable. Character encodings such as UTF-7\nthat make overloaded usage of ASCII-valued bytes may fail to be reliably detected.'
          }
          p {
            'Once the processor has detected the character encoding in use, it can act\nappropriately, whether by invoking a separate input routine for each case,\nor by calling the proper conversion function on each character of input.'
          }
          p {
            'Like any self-labeling system, the XML encoding declaration will not work\nif any software changes the entity\'s character set or encoding without updating\nthe encoding declaration. Implementors of character-encoding routines should\nbe careful to ensure the accuracy of the internal and external information\nused to label the entity.'
          }
        }
        div {
          class 'div2'
          h3 {
            a {
              name 'sec-guessing-with-ext-info'
              id 'sec-guessing-with-ext-info'
            }
            'F.2 Priorities in the Presence of External Encoding Information'
          }
          p {
            'The second possible case occurs when the XML entity is accompanied by encoding\ninformation, as in some file systems and some network protocols. When multiple\nsources of information are available, their relative priority and the preferred\nmethod of handling conflict should be specified as part of the higher-level\nprotocol used to deliver XML. In particular, please refer\nto'
            a {
              href '#rfc2376'
              '[IETF RFC 3023]'
            }
            'or its successor, which defines the'
            code {
              'text/xml'
            }
            'and'
            code {
              'application/xml'
            }
            'MIME types and provides some useful guidance.\nIn the interests of interoperability, however, the following rule is recommended.'
          }
          ul {
            li {
              p {
                'If an XML entity is in a file, the Byte-Order Mark and encoding declaration are used\n(if present) to determine the character encoding.'
              }
            }
          }
        }
      }
      div {
        class 'div1'
        h2 {
          a {
            name 'sec-xml-wg'
            id 'sec-xml-wg'
          }
          'G W3C XML Working Group (Non-Normative)'
        }
        p {
          'This specification was prepared and approved for publication by the W3C\nXML Working Group (WG). WG approval of this specification does not necessarily\nimply that all WG members voted for its approval. The current and former\nparticipants of the XML WG are:'
        }
        ul {
          li {
            'Jon Bosak, Sun ('
            i {
              'Chair'
            }
            ')'
          }
          li {
            'James Clark ('
            i {
              'Technical Lead'
            }
            ')'
          }
          li {
            'Tim Bray, Textuality and Netscape ('
            i {
              'XML Co-editor'
            }
            ')'
          }
          li {
            'Jean Paoli, Microsoft ('
            i {
              'XML Co-editor'
            }
            ')'
          }
          li {
            'C. M. Sperberg-McQueen, U. of Ill. ('
            i {
              'XML Co-editor'
            }
            ')'
          }
          li {
            'Dan Connolly, W3C ('
            i {
              'W3C Liaison'
            }
            ')'
          }
          li {
            'Paula Angerstein, Texcel'
          }
          li {
            'Steve DeRose, INSO'
          }
          li {
            'Dave Hollander, HP'
          }
          li {
            'Eliot Kimber, ISOGEN'
          }
          li {
            'Eve Maler, ArborText'
          }
          li {
            'Tom Magliery, NCSA'
          }
          li {
            'Murray Maloney, SoftQuad, Grif SA, Muzmo and Veo Systems'
          }
          li {
            'MURATA Makoto (FAMILY Given), Fuji Xerox Information Systems'
          }
          li {
            'Joel Nava, Adobe'
          }
          li {
            'Conleth O\'Connell, Vignette'
          }
          li {
            'Peter Sharpe, SoftQuad'
          }
          li {
            'John Tigue, DataChannel'
          }
        }
      }
      div {
        class 'div1'
        h2 {
          a {
            name 'sec-core-wg'
            id 'sec-core-wg'
          }
          'H W3C XML Core Working Group (Non-Normative)'
        }
        p {
          'The'
          span {
            'fifth'
          }
          'edition of this specification was prepared by the W3C XML Core\nWorking Group (WG). The participants in the WG at the time of publication of this\nedition were:'
        }
        ul {
          li {
            'John Cowan, Google'
          }
          li {
            'Andrew Fang, PTC-Arbortext'
          }
          li {
            'Paul Grosso, PTC-Arbortext ('
            i {
              'Co-Chair'
            }
            ')'
          }
          li {
            'Konrad Lanz, A-SIT'
          }
          li {
            'Glenn Marcy, IBM'
          }
          li {
            'Henry Thompson, W3C ('
            i {
              'Staff Contact'
            }
            ')'
          }
          li {
            'Richard Tobin, University of Edinburgh'
          }
          li {
            'Daniel Veillard'
          }
          li {
            'Norman Walsh, Mark Logic ('
            i {
              'Co-Chair'
            }
            ')'
          }
          li {
            'François Yergeau'
          }
        }
      }
      div {
        class 'div1'
        h2 {
          a {
            name 'prod-notes'
            id 'prod-notes'
          }
          'I Production Notes (Non-Normative)'
        }
        p {
          'This edition was encoded in a\nslightly modified version of the'
          a {
            href 'http://www.w3.org/2002/xmlspec/dtd/2.10/xmlspec.dtd'
            'XMLspec DTD, v2.10'
          }
          '.\nThe XHTML versions were produced with a combination of the'
          a {
            href 'http://www.w3.org/2002/xmlspec/xhtml/1.13/xmlspec.xsl'
            'xmlspec.xsl'
          }
          ','
          a {
            href 'http://www.w3.org/2002/xmlspec/xhtml/1.13/diffspec.xsl'
            'diffspec.xsl'
          }
          ',\nand'
          a {
            href 'REC-xml.xsl'
            'REC-xml.xsl'
          }
          'XSLT stylesheets.'
        }
      }
      div {
        class 'div1'
        h2 {
          a {
            name 'sec-suggested-names'
            id 'sec-suggested-names'
          }
          'J Suggestions for XML Names (Non-Normative)'
        }
        p {
          'The following suggestions define what is believed to be best\n\t\t\t\tpractice in the construction of XML names used as element names,\n\t\t\t\tattribute names, processing instruction targets, entity names,\n\t\t\t\tnotation names, and the values of attributes of type ID, and are\n\t\t\t\tintended as guidance for document authors and schema designers.\n\t\t\t\tAll references to Unicode are understood with respect to\n\t\t\t\ta particular version of the Unicode Standard greater than or equal\n\t\t\t\tto 5.0; which version should be used is left to the discretion of\n\t\t\t\tthe document author or schema designer.'
        }
        p {
          'The first two suggestions are directly derived from the rules\n\t\t\t\tgiven for identifiers in Standard Annex #31 (UAX #31) of the Unicode Standard, version 5.0'
          a {
            href '#Unicode'
            '[Unicode]'
          }
          ', and\n\t\t\t\texclude all control characters, enclosing nonspacing marks,\n\t\t\t\tnon-decimal numbers, private-use characters, punctuation characters\n\t\t\t\t(with the noted exceptions), symbol characters, unassigned\n\t\t\t\tcodepoints, and white space characters. The other suggestions\n\t\t\t\tare mostly derived from Appendix B in previous editions of this specification.'
        }
        ol {
          class 'enumar'
          li {
            p {
              'The first character of any name should have a Unicode property\n\t\t\t\t\t\tof ID_Start, or else be \'_\' #x5F.'
            }
          }
          li {
            p {
              'Characters other than the first should have a Unicode property\n\t\t\t\t\t\tof ID_Continue, or be one of the characters listed in the table\n\t\t\t\t\t\tentitled "Characters for Natural Language Identifiers" in UAX\n\t\t\t\t\t\t#31, with the exception of "\'" #x27 and "’" #x2019.'
            }
          }
          li {
            p {
              'Characters in names should be expressed using\nNormalization Form C as defined in'
              a {
                href '#unipart15'
                '[UnicodeNormal]'
              }
              '.'
            }
          }
          li {
            p {
              'Ideographic characters which have a canonical decomposition\n\t\t\t\t\t\t(including those in the ranges [#xF900-#xFAFF] and\n\t\t\t\t\t\t[#x2F800-#x2FFFD], with 12 exceptions) should not be used in names.'
            }
          }
          li {
            p {
              'Characters which have a compatibility decomposition (those with\n\t\t\t\t\t\ta "compatibility formatting tag" in field 5 of the Unicode\n\t\t\t\t\t\tCharacter Database -- marked by field 5 beginning with a "<")\n\t\t\t\t\t\tshould not be used in names.  This suggestion does not apply\n\t\t\t\t\t\tto characters which\n\t\t\t\t\t\tdespite their compatibility decompositions are in regular use in\n\t\t\t\t\t\ttheir scripts, for\nexample #x0E33 THAI CHARACTER SARA AM or #x0EB3 LAO CHARACTER AM.'
            }
          }
          li {
            p {
              'Combining characters meant for use with symbols only (including\n\t\t\t\t\t\tthose in the ranges [#x20D0-#x20EF] and [#x1D165-#x1D1AD]) should\n\t\t\t\t\t\tnot be used in names.'
            }
          }
          li {
            p {
              'The interlinear annotation characters ([#xFFF9-#xFFFB]) should\n\t\t\t\t\t\tnot be used in names.'
            }
          }
          li {
            p {
              'Variation selector characters should not be used in names.'
            }
          }
          li {
            p {
              'Names which are nonsensical, unpronounceable, hard to read, or\n\t\t\t\t\t\teasily confusable with other names should not be employed.'
            }
          }
        }
      }
    }
    script {
      type 'application/javascript'
      src 'https://www.w3.org/scripts/TR/fixup.js'
    }
  }
}

